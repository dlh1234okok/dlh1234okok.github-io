<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>这夜景</title>
  
  <subtitle>blog</subtitle>
  <link href="/dlh1234okok.github.io/atom.xml" rel="self"/>
  
  <link href="http://www.dlhblog.online/"/>
  <updated>2018-10-09T08:43:24.624Z</updated>
  <id>http://www.dlhblog.online/</id>
  
  <author>
    <name>li-hong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mybatis学习(1)-搭建和简单查询</title>
    <link href="http://www.dlhblog.online/2018/10/09/Mybatis%E5%AD%A6%E4%B9%A0-1/"/>
    <id>http://www.dlhblog.online/2018/10/09/Mybatis学习-1/</id>
    <published>2018-10-09T03:47:15.000Z</published>
    <updated>2018-10-09T08:43:24.624Z</updated>
    
    <content type="html"><![CDATA[<p>一、简介</p><p>​    mybatis框架是一个基于java的持久层框架。持久层就是将数据存到持久化设备上（如数据库、硬盘等），它对于jdbc和持久层的操作做了简化，将sql和代码分离。</p><p>​    mybatis不是一个完全的orm（对象关系映射）框架，和hibernate（对象关系映射框架）相比，它还需要自己编写sql语句，但是在某些业务逻辑多变的场景下，它可以由自己编写sql语句就显得更加灵活。</p><p>二、环境搭建</p><p>1、maven项目 导入依赖</p><p>​    mybatis核心依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    mysql驱动</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.38<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    log4j依赖（可以输出操作过程，更容易在出错时找到问题）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、添加mybatis配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注册属性文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"jdbc.properties"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置实体类别名：包扫描 默认别名是类名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.shsxt.po"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置MyBatis运行环境 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;user&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在这里可以配置另一个环境 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注册映射文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.shsxt.mapper"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    在配置时可以配置多个运行环境，默认运行标签指定的默认环境（上面为development环境），在需要切换环境时，可以在创建session工厂时指定，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(is,<span class="string">"test"</span>);</span><br></pre></td></tr></table></figure><p>3、配置映射文件（sql代码所在）</p><p>​    配置映射文件的方式有三种：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--包扫描--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.shsxt.mapper"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置xml--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com.shsxt.mapper.UserMapper"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置接口--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"com.shsxt.mapper.UserMapper"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    <strong>一个实体类对应一个映射文件</strong>，所以当业务复杂有多个实体类时，包扫描的配置方式较为方便，而配置xml和配置接口都需要配置多个mapper标签。</p><p>创建一个xml文件作为映射文件，在java目录（因为不在resources目录下不会自动读取配置文件，所以需要指定java目录下读取配置文件）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.tld<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>xml映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.shsxt.mapper.UserMapper"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数字--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryUserByName"</span> <span class="attr">parameterType</span>=<span class="string">"string"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">        select * from user where userName like concat('%',#&#123;userName&#125;,'%')</span><br><span class="line">        <span class="comment">&lt;!--concat:拼接字符串--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>namespace</strong>：指明命名空间，可以和接口对应，后面调用crud操作的时候需要</p><p><strong>parameterType</strong>：指明输入参数类型（int,string,map,java bean,list..）</p><p><strong>resultType</strong>：指明输出数据类型（基本数据类型,string,map,java bean,list）</p><p>​    <strong>在这里输出类型如果为List的话，只需要指明list中泛型的类型</strong></p><p>​    ·当输出类型为javabean类型时，需要写类所在的完整路径com.xxx.xxx.xx；为了书写方便，也可以指定它的别名，如上面一般。指定别名有三种方式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置实体类别名：包扫描 默认别名是类名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.shsxt.po"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--typeAlias标签指定路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"com.shsxt.po.User"</span> <span class="attr">alias</span>=<span class="string">"user"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    还可以把typeAlias中的alias标签以注解的方式写在javabean类的上面</p><p>​    <img src="http://pg0l2q23d.bkt.clouddn.com/mybatis%E9%85%8D%E7%BD%AE%E5%88%AB%E5%90%8D.bmp" alt=""></p><p>和原生jdbc不同的是，原生jdbc的占位符’?’，在这里用#{传入参数的名字}</p><p>​    基本配置就基本完成了，接下来就是调用了，从这里可以看出，mybatis环境中需要配置输入参数类型，输出参数类型和sql语句就可以完成数据库操作。</p><p>​    那我们知道数据库中一部分字段的类型和java中是不同的，比如数据库中的varchar，在java中是String，它是用什么转换的呢—-&gt;<strong>typeHandler类型处理器，在预处理语句中设置一个参数或者获取一个参数时，类型处理器都会将获取到的值以合适的方式转换为java类型</strong></p><p>​    </p><p>三、调用，实现一个查询</p><p>其中主要过程</p><p>（1）读取资源文件</p><p>（2）创建sqlsession工厂</p><p>（3）由sqlsession工厂打开/创建session</p><p>（4）通过session操作数据库</p><p>（5）处理结果</p><p>（6）关闭sqlsession</p><p>我在这里将映射文件对应了一个接口，实现了这个接口并且做了一些封装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperImpl</span> <span class="keyword">implements</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSession sqlSession;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserMapperImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserMapperImpl</span><span class="params">(SqlSessionFactory sqlSessionFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sqlSessionFactory = sqlSessionFactory;</span><br><span class="line">        sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">queryUserByName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            users = sqlSession.selectList(<span class="string">"com.shsxt.mapper.UserMapper.queryUserByName"</span>, userName);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (sqlSession != <span class="keyword">null</span>) &#123;</span><br><span class="line">                sqlSession.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单元测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        InputStream is = Resources.getResourceAsStream(<span class="string">"mybatis.xml"</span>);</span><br><span class="line">        sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userMapper = <span class="keyword">new</span> UserMapperImpl(sqlSessionFactory);</span><br><span class="line">        List&lt;User&gt; users = userMapper.queryUserByName(<span class="string">"z"</span>);</span><br><span class="line">        <span class="keyword">for</span> (User user : users) System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果<img src="http://pg0l2q23d.bkt.clouddn.com/mybatis%E6%9F%A5%E8%AF%A2%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.bmp" alt=""></p><p>因为使用了log4j日志采集，可以看到我们编写的sql还有查询到的总数量</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一、简介&lt;/p&gt;
&lt;p&gt;​    mybatis框架是一个基于java的持久层框架。持久层就是将数据存到持久化设备上（如数据库、硬盘等），它对于jdbc和持久层的操作做了简化，将sql和代码分离。&lt;/p&gt;
&lt;p&gt;​    mybatis不是一个完全的orm（对象关系映射）框
      
    
    </summary>
    
      <category term="Mybatis" scheme="http://www.dlhblog.online/categories/Mybatis/"/>
    
    
  </entry>
  
  <entry>
    <title>Ajax轮询和长轮询</title>
    <link href="http://www.dlhblog.online/2018/10/07/Ajax%E8%BD%AE%E8%AF%A2%E5%92%8C%E9%95%BF%E8%BD%AE%E8%AF%A2/"/>
    <id>http://www.dlhblog.online/2018/10/07/Ajax轮询和长轮询/</id>
    <published>2018-10-07T08:57:06.000Z</published>
    <updated>2018-10-07T09:14:12.228Z</updated>
    
    <content type="html"><![CDATA[<p>​    在需要实时信息更新的时候，可以使用轮询不断向服务器请求获取数据，但是频繁请求服务器，效率低而且十分耗费资源，一般推荐使用webSocket建立持久连接</p><p>​    因为以前没有听说过这个名词，现在了解后在这里做一个备份（这里只贴出代码）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Ajax轮询</span></span><br><span class="line">        <span class="keyword">var</span> get = &#123;</span><br><span class="line">            url:<span class="string">"user"</span>,</span><br><span class="line">            type:<span class="string">"post"</span>,</span><br><span class="line">            dataType:<span class="string">"json"</span>,</span><br><span class="line">            success:<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"next"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// Ajax定时访问服务端，不断建立连接获取数据</span></span><br><span class="line">        <span class="built_in">window</span>.setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $.ajax(get)</span><br><span class="line">        &#125;,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Ajax长轮询</span></span><br><span class="line">        <span class="keyword">var</span> get = &#123;</span><br><span class="line">            url:<span class="string">"user"</span>,</span><br><span class="line">            type:<span class="string">"post"</span>,</span><br><span class="line">            dataType:<span class="string">"json"</span>,</span><br><span class="line">            success:<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                $.ajax(get);    <span class="comment">// 在Ajax的回调函数这里再次发送ajax请求</span></span><br><span class="line">            &#125;,</span><br><span class="line">            error:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                $.ajax(get);    <span class="comment">// 当请求时间过长，再次调用ajax长轮询</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        $.ajax(get);</span><br></pre></td></tr></table></figure><p>在一次请求完成返回之后立刻再次发送请求，当没有数据就会被挂在服务器，但只要有数据就会返回。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    在需要实时信息更新的时候，可以使用轮询不断向服务器请求获取数据，但是频繁请求服务器，效率低而且十分耗费资源，一般推荐使用webSocket建立持久连接&lt;/p&gt;
&lt;p&gt;​    因为以前没有听说过这个名词，现在了解后在这里做一个备份（这里只贴出代码）&lt;/p&gt;
&lt;fi
      
    
    </summary>
    
      <category term="JavaWeb" scheme="http://www.dlhblog.online/categories/JavaWeb/"/>
    
    
  </entry>
  
  <entry>
    <title>webSocket学习(1)</title>
    <link href="http://www.dlhblog.online/2018/10/07/webSocket%E5%AD%A6%E4%B9%A0-1/"/>
    <id>http://www.dlhblog.online/2018/10/07/webSocket学习-1/</id>
    <published>2018-10-07T08:02:04.000Z</published>
    <updated>2018-10-07T08:48:34.249Z</updated>
    
    <content type="html"><![CDATA[<p>一、webSocket是什么</p><p>​    webSocket是html5推出的一种新协议，和HTTP协议基本没有关系，但是为了兼容现有浏览器的握手规范，需要通过HTTP协议完成一部分握手，也可以说是HTTP协议的补充，两者之间有交集，但不是全部，可以用以下这张图理解HTTP和webSocket的关系</p><p><img src="http://pg0l2q23d.bkt.clouddn.com/webSocket%E5%92%8CHTTP%E5%85%B3%E7%B3%BB.jpg" alt="webSocket和HTTP关系"></p><p>二、为什么需要webSocket</p><p>​    HTTP协议是<strong>无状态</strong>（协议对事务处理没有记忆能力），<strong>无连接</strong>（一次请求即断开连接），<strong>单向的应用层协议</strong>（只能由客户端请求服务器，服务器无法主动向客户端发送消息）。</p><p>​    在这种单向请求的特点在服务器状态持续发生变化时客户端想要获知就很麻烦，（可以使用Ajax的<strong>轮询</strong>或者<strong>长轮询</strong>实现），但是轮询效率低并且十分耗费资源（因为要持续不断的打开连接）</p><p>​    在这种情况下，webSocket应运而生了，<strong>webSocket只需要建立一次连接就可以保持连接</strong>，进行持久通信，而且客户端和服务端都可以通过连接发送数据到另一方。</p><p>​    在需要实时通信的需求下使用webSocket最好不过了</p><p>对于webSocket的介绍就到这里，贴一篇关于webSocket原理的文章参考</p><p><a href="https://www.cnblogs.com/fuqiang88/p/5956363.html" target="_blank" rel="noopener"></a></p><p>三、通过Java实现webSocket通信的简易聊天室</p><p>js代码（客户端）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>主页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"userMsg"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"send()"</span>&gt;</span>发送消息<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"closeWebSocket()"</span>&gt;</span>关闭连接<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"clearMsg()"</span>&gt;</span>清屏<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"per"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"statics/jquery-3.3.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%String</span> <span class="attr">nick</span> = <span class="string">request.getParameter(</span>"<span class="attr">nick</span>");%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 页面加载完毕没有登录则跳转到登录页面</span></span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> nick = <span class="xml"><span class="tag">&lt;<span class="name">%=nick%</span>&gt;</span>;</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (nick==<span class="literal">null</span>)&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.location.href=<span class="string">"login.jsp"</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> webSocket = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 判断浏览器是否支持webSocket</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (<span class="string">"WebSocket"</span> <span class="keyword">in</span> <span class="built_in">window</span>)&#123;</span></span><br><span class="line"><span class="javascript">        webSocket = <span class="keyword">new</span> WebSocket(<span class="string">"ws://192.168.1.139:8080/chat"</span>);</span></span><br><span class="line"><span class="javascript">    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">"浏览器不支持webSocket"</span>)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 连接发生错误的回调方法</span></span></span><br><span class="line"><span class="javascript">    webSocket.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        setMsg(<span class="string">"发生错误"</span>)</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 建立连接后要做的事情</span></span></span><br><span class="line"><span class="javascript">    webSocket.onopen = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">        addUser();</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 服务器发送过来的消息</span></span></span><br><span class="line"><span class="javascript">    webSocket.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">        setMsg(event.data);</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 关闭连接</span></span></span><br><span class="line"><span class="javascript">    webSocket.onclose = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">        subUser();</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 当浏览器关闭时关闭连接，防止后台报错</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onbeforeunload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">        closeWebSocket();</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 将信息显示在页面</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">setMsg</span>(<span class="params">msg</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'#msg'</span>).append(msg+<span class="string">"&lt;/br&gt;"</span>);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">addUser</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        webSocket.send(<span class="string">'&lt;%=nick%&gt;'</span>+<span class="string">"加入聊天室"</span>);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">subUser</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        webSocket.send(<span class="string">'&lt;%=nick%&gt;'</span>+<span class="string">"离开聊天室"</span>);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 关闭webSocket连接</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">closeWebSocket</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">        webSocket.close();</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.location.href=<span class="string">"login.jsp"</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 发送消息</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">send</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> userMsg= $(<span class="string">'#userMsg'</span>).val();</span></span><br><span class="line"><span class="javascript">        webSocket.send(<span class="string">'&lt;%=nick%&gt;'</span>+<span class="string">"说："</span>+userMsg);</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'#userMsg'</span>).val(<span class="string">""</span>);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">clearMsg</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'#msg'</span>).empty();</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>java代码（服务端）</p><p>​    在编写代码之前需要引入javaee标准</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javaee-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shsxt.websocket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.websocket.*;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.ServerEndpoint;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CopyOnWriteArraySet;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立一个webSocket的端点，要和js代码中对应</span></span><br><span class="line"><span class="meta">@ServerEndpoint</span>(<span class="string">"/chat"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 与客户端之间连接的会话，通过session向和客户端发送消息</span></span><br><span class="line">    <span class="keyword">private</span> Session session;</span><br><span class="line">    <span class="comment">// concurrent包线程安全的set，用来存放chatServer对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CopyOnWriteArraySet&lt;ChatServer&gt; set = <span class="keyword">new</span> CopyOnWriteArraySet&lt;&gt;();</span><br><span class="line">    <span class="comment">// 用来计算当前在线人数</span></span><br><span class="line">    <span class="keyword">private</span> Integer onlineNum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 建立连接后要做的事情</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOpen</span><span class="params">(Session session)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.session = session;</span><br><span class="line">        set.add(<span class="keyword">this</span>); <span class="comment">//将当前登录对象放入集合</span></span><br><span class="line">        System.out.println(<span class="string">"webSocket连接已经建立.."</span>);</span><br><span class="line">        addOnline();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从客户端收到的消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnMessage</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(String msg,Session session)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.session = session;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (ChatServer chats:set)&#123;</span><br><span class="line">                chats.session.getBasicRemote().sendText(msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 断开连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnClose</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClose</span><span class="params">(Session session)</span></span>&#123;</span><br><span class="line">        set.remove(<span class="keyword">this</span>);</span><br><span class="line">        System.out.println(<span class="string">"断开连接..."</span>);</span><br><span class="line">        subOnline();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发生异常调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnError</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"发生异常..."</span>);</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">addOnline</span><span class="params">()</span></span>&#123;</span><br><span class="line">        onlineNum++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">subOnline</span><span class="params">()</span></span>&#123;</span><br><span class="line">        onlineNum--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取在线人数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Integer <span class="title">getOnline</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> onlineNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上内容大部分源于网络</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一、webSocket是什么&lt;/p&gt;
&lt;p&gt;​    webSocket是html5推出的一种新协议，和HTTP协议基本没有关系，但是为了兼容现有浏览器的握手规范，需要通过HTTP协议完成一部分握手，也可以说是HTTP协议的补充，两者之间有交集，但不是全部，可以用以下这张图
      
    
    </summary>
    
      <category term="webSocket" scheme="http://www.dlhblog.online/categories/webSocket/"/>
    
    
  </entry>
  
  <entry>
    <title>JS原生Ajax</title>
    <link href="http://www.dlhblog.online/2018/10/04/JS%E5%8E%9F%E7%94%9FAjax/"/>
    <id>http://www.dlhblog.online/2018/10/04/JS原生Ajax/</id>
    <published>2018-10-04T10:45:25.000Z</published>
    <updated>2018-10-04T10:52:16.708Z</updated>
    
    <content type="html"><![CDATA[<item><br><br>一、XMLHTTPRequest<br><br>　　Ajax技术核心是XMLHTTPRequest对象（简称XHR），是由微软首先引入的一个特性，其他浏览器提供商后来都提供了相同的实现。在XHR出现之前，Ajax式的通信必须借助一些手段来实现，大多数是使用隐藏的框架或内嵌框架。<br><br>　　Ajax，是Asynchronout JavaScript+XML的简写。这种技术能够向服务器请求额外的数据而无需卸载/刷新页面，会带来更好的用户体验。<br><br>　　1、支持原生XHR对象的浏览器创建XHR对象可以直接实例化XMLHTTPRequest。<br><br>　　　　<img src="https://img2018.cnblogs.com/blog/1467494/201809/1467494-20180905003920647-1826035439.png" alt=""><br><br>　　2、在使用XHR对象时，先必须调用<strong>open()</strong>方法，它接收三个参数：要发送的请求类型（get/post）、请求的URL和表示是否异步(async)。open()方法并不会真正发送请求，而只是启动一个请求以备发送。<br><br>　　3、通过<strong>send()</strong>方法进行发送请求，send()方法接受一个参数，作为请求主体发送的数据。如果不需要必须填null。执行send()方法后请求就会发送到服务器上。<br><br>　　4、请求发送到服务端收到响应后，响应的数据会自动填充XHR对象的属性，一共有四个属性：<br><br>　　　　<img src="https://img2018.cnblogs.com/blog/1467494/201809/1467494-20180905004456221-1111928088.png" alt=""><br><br>&nbsp;<br><br>　　5、接受响应之后，第一步检查status属性，以确定响应已经成功返回，有如下的状态代码：<br><br>　　　　<img src="https://img2018.cnblogs.com/blog/1467494/201809/1467494-20180905004653948-1534573078.png" alt=""><br><br>　　6、判断http状态值以确定响应是否成功返回<br><br>　　　　<img src="https://img2018.cnblogs.com/blog/1467494/201809/1467494-20180905004847155-333519007.png" alt=""><br><br>　　7、当使用异步调用的时候，检测<strong>readyState</strong>属性，每当readyState属性改变时，触发<strong>readyStatechange</strong>事件。这个属性共有五个值：<br><br>　　　　<img src="https://img2018.cnblogs.com/blog/1467494/201809/1467494-20180905005202926-990213462.png" alt=""><br><br>　　　　<img src="https://img2018.cnblogs.com/blog/1467494/201809/1467494-20180905005318012-2003994204.png" alt=""><br><br>&nbsp;<br><br>&nbsp;二、GET与POST<br><br>　　1、GET请求<br><br>　　　　通过URL后的问号给服务器传递键值对数据，服务器接收到返回响应数据。特殊字符传参产生的问题可以使用<strong>encodeURIComponent()</strong>进行编码处理，中文字符的返回及传参，可以将页面保存和设置为utf-8即可，AJAX返回的数据为UTF-8。<br><br>　　2、POST请求<br><br>　　　　通过发送POST请求的数据，不会跟在URL后面，而是通过send()方法向服务器提交数据<br><br>　　　　　　<img src="https://img2018.cnblogs.com/blog/1467494/201809/1467494-20180905005923385-1376951188.png" alt=""><br><br>&nbsp;<br><br>　　　　向服务器发送POST请求由于解析机制的原因，需要进行特别的处理。因为POST请求和Web表单提交是不同的的，需要使用XHR来模仿表单提交。<br><br>　　　　　　<img src="https://img2018.cnblogs.com/blog/1467494/201809/1467494-20180905010106749-1235012049.png" alt=""><br><br>　　　　从性能上来讲POST请求比GET请求消耗更多一些，用相同数据比较，GET请求最多比POST请求快两倍<br><br>&nbsp;<br><br>三、封装Ajax<br><br><div class="cnblogs_code"><br><pre>&lt;script type=”text/javascript”&gt;<br><span style="color: #0000ff;">var</span> obj=<span style="color: #000000;">{<br>    url:</span>“user”<span style="color: #000000;">,<br>    method:</span>“post”<span style="color: #000000;">,<br>    data:{name:</span>“zs”,age:18<span style="color: #000000;">},<br>    async:</span><span style="color: #0000ff;">true</span><span style="color: #000000;">,<br>    success:</span><span style="color: #0000ff;">function</span><span style="color: #000000;">(result){<br>        console.log(result);<br>        console.log(JSON.parse(result))<br>    },<br>    error:</span><span style="color: #0000ff;">function</span><span style="color: #000000;">(result){<br>        console.log(result);<br>    }<br>}<br>ajax(obj)<br><br></span><span style="color: #0000ff;">function</span><span style="color: #000000;"> ajax(obj){<br>​    </span><span style="color: #008000;">//</span><span style="color: #008000;">得到XMLHTTPRequest对象</span><br>​    <span style="color: #0000ff;">var</span> xhr=<span style="color: #0000ff;">new</span><span style="color: #000000;"> XMLHttpRequest();<br>​    </span><span style="color: #008000;">//</span><span style="color: #008000;">将参数格式化</span><br>​    obj.data=<span style="color: #000000;">params(obj.data);<br>​    </span><span style="color: #008000;">//</span><span style="color: #008000;">判断请求方式</span><br>​    <span style="color: #0000ff;">if</span>(obj.method.toUpperCase()==”GET”<span style="color: #000000;">){<br>​        obj.url</span>+=(obj.url.indexOf(“?”)==-1)?”?”+obj.data:”&amp;”+<span style="color: #000000;">obj.data;<br>​        </span><span style="color: #008000;">//</span><span style="color: #008000;">open()方法：请求方式/请求路径/是否异步</span><br><span style="color: #000000;">        xhr.open(obj.method,obj.url,obj.async);<br>​        </span><span style="color: #008000;">//</span><span style="color: #008000;">发送请求</span><br>​        xhr.send(<span style="color: #0000ff;">null</span><span style="color: #000000;">);<br>​    }</span><span style="color: #0000ff;">else</span>{ <span style="color: #008000;">//</span><span style="color: #008000;"> POST请求</span><br><span style="color: #000000;">        xhr.open(obj.method,obj.url,obj.async);<br>​        </span><span style="color: #008000;">//</span><span style="color: #008000;">模拟表单提交</span><br>​        xhr.setRequestHeader(“Content-Type”,”application/x-www-form-urlencode”<span style="color: #000000;">);<br>​        </span><span style="color: #008000;">//</span><span style="color: #008000;">发送请求</span><br><span style="color: #000000;">        xhr.send(obj.data);<br>​    }<br>​    </span><span style="color: #008000;">//</span><span style="color: #008000;">判断是否是异步请求</span><br>​    <span style="color: #0000ff;">if</span>(obj.async){ <span style="color: #008000;">//</span><span style="color: #008000;">异步请求</span><br>​        <span style="color: #008000;">//</span><span style="color: #008000;">判断响应是否完全响应</span><br>​        xhr.onreadystatechange=<span style="color: #0000ff;">function</span><span style="color: #000000;">(){<br>​            </span><span style="color: #0000ff;">if</span>(xhr.readyState==4<span style="color: #000000;">){<br>​                callback();<br>​            }<br>​        }<br>​    }</span><span style="color: #0000ff;">else</span><span style="color: #000000;">{<br>​        callback();<br>​    }<br><br>    </span><span style="color: #008000;">//</span><span style="color: #008000;">回调函数</span><br>    <span style="color: #0000ff;">function</span><span style="color: #000000;"> callback(){<br>        </span><span style="color: #0000ff;">if</span>(xhr.status==200<span style="color: #000000;">){<br>            </span><span style="color: #008000;">//</span><span style="color: #008000;">回调函数</span><br><span style="color: #000000;">            obj.success(xhr.responseText);<br>​        }</span><span style="color: #0000ff;">else</span><span style="color: #000000;">{<br>​            obj.error(</span>“请求失败！错误状态码”+xhr.status+”,错误原因”+<span style="color: #000000;">xhr.statusText);<br>​        }<br>​    }<br>}<br></span><span style="color: #008000;">/<em></em></span><span style="color: #008000;"><br> <em> 将json格式的字符串转换成普通的参数拼接<br>    </em></span><span style="color: #008000;">/</span><br>    <span style="color: #0000ff;">function</span><span style="color: #000000;"> params(data){<br>    </span><span style="color: #0000ff;">var</span> arr=<span style="color: #000000;">[];<br>    </span><span style="color: #0000ff;">if</span>(data!=<span style="color: #0000ff;">null</span> &amp;&amp; data !=””<span style="color: #000000;">){<br>    ​    </span><span style="color: #0000ff;">for</span>(<span style="color: #0000ff;">var</span> d <span style="color: #0000ff;">in</span><span style="color: #000000;"> data){<br>    ​        console.log(d</span>+” “+<span style="color: #000000;">data[d]);<br>    ​        </span><span style="color: #0000ff;">var</span> name=<span style="color: #000000;">encodeURIComponent(d);<br>    ​        </span><span style="color: #0000ff;">var</span> value=<span style="color: #000000;">encodeURIComponent(data[d]);<br><br>            arr.push(name</span>+”=”+<span style="color: #000000;">value);<br>        }<br>        </span><span style="color: #0000ff;">var</span> param=arr.join(“&amp;”<span style="color: #000000;">);<br>        </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> param;<br>    }<br>    </span><span style="color: #0000ff;">return</span> <span style="color: #0000ff;">null</span><span style="color: #000000;">;<br>    }<br>    </span>&lt;/script&gt;</pre><br>    </div><br><br>&nbsp;<br><br>　　&nbsp;同步：<br><br>　　　　提交请求–&gt;等待服务器处理–&gt;处理完毕返回这个期间客户端浏览器不能干的事，当前只能做一件事。<br><br>　　异步：<br><br>　　　　请求通过事件触发–&gt;服务器处理（这时浏览器仍然可以做其他事情）–&gt;处理完毕。可以同时做多件事情<br><br>&nbsp;<br><br>四、JQuery封装的AJax<br><br>　　$.ajax(){}<br><br>　　$.get(){}<br><br>　　$.getJson(){}<br><br>　　$.post(){}<br></item>]]></content>
    
    <summary type="html">
    
      
      
        &lt;item&gt;&lt;br&gt;&lt;br&gt;一、XMLHTTPRequest&lt;br&gt;&lt;br&gt;　　Ajax技术核心是XMLHTTPRequest对象（简称XHR），是由微软首先引入的一个特性，其他浏览器提供商后来都提供了相同的实现。在XHR出现之前，Ajax式的通信必须借助一些手段来实现，大多数是
      
    
    </summary>
    
      <category term="JavaWeb" scheme="http://www.dlhblog.online/categories/JavaWeb/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring-IoC</title>
    <link href="http://www.dlhblog.online/2018/10/04/Spring-IoC/"/>
    <id>http://www.dlhblog.online/2018/10/04/Spring-IoC/</id>
    <published>2018-10-04T10:37:06.000Z</published>
    <updated>2018-10-04T10:43:10.306Z</updated>
    
    <content type="html"><![CDATA[<p>一、Spring框架概念</p><p>　　spring 是众多开源 java 项目中的一员，基于分层的 javaEE 应用一站式轻量级开源框架，<strong>主要核心是 Ioc(控制反转/依赖注入) 与 Aop(面向切面)</strong>两大技术，实现项目在开发过程中的轻松解耦， 提高项目的开发效率。</p><p>　　在项目中引入spring的好处：</p><p>　　　　&middot;<strong>降低组件之间的耦合度，实现软件各层之间的解耦</strong></p><p>　　　　&middot;可以使用容器提供的众多服务，如：事务管理服务、消息服务等</p><p>　　　　&middot;当使用容器管理事务时，开发人员就不需要手工控制事务，也不需要处理复杂的事务传播</p><p>　　　　&middot;容器提供<strong>单例模式</strong>支持，开发人员不再需要自己编写实现代码</p><p>　　　　&middot;容器提供了<strong>AOP技术</strong>，利用它很容易实现如权限拦截、运行期监控等功能</p><p>&nbsp;</p><p>二、Spring源码架构</p><p>　　1、核心容器:spring-beans 和 spring-core 模块是 Spring 框架的核心模块，包含<strong>控制反转（Inversion of Control, IoC）</strong>和<strong>依赖注入（Dependency Injection, DI）</strong> ,核心容器提供 Spring 框架的基本功能。<strong>核心容器的主要组件是 BeanFactory， 工厂模式的实现</strong>。 BeanFactory 使用控制反转（IOC） 思想将应用程序的配置和依赖性规范与实际的应用程序代码分开。</p><p>　　2、Spring 上下文 Spring Context： Spring 上下文是一个配置文件，向 Spring 框架提供上下文信息。 Spring 上下文包括企业服务，例如 JNDI、 EJB、电子邮件、国际化、校验和调度功能。</p><p>　　3、Spring-Expression 模块是统一表达式语言（unified EL）的扩展模块，可以查询、管理运行中的对象，同时也方便的可以调用对象方法、操作数组、集合等。它的语法类似于传统 EL，但提供了额外的功能，最出色的要数函数调用和简单字符串的模板函数。</p><p>　　4、Spring-AOP： spring-aop 是 Spring 的另一个核心模块, 在 Spring中，他是以 JVM 的动态代理技术为基础，然后设计出了一系列的Aop 横切实现，比如前置通知、返回通知、异常通知等。 通过其配置管理特性， Spring AOP 模块直接将面向切面的编程功能集成到了 Spring 框架中。所以，可以很容易地使 Spring 框架管理的任何对象支持 AOP。</p><p>　　……</p><p>&nbsp;三、Spring容器工厂的简单实现</p><p><span style="color: #0000ff;">import</span><span style="color: #000000;"> org.dom4j.Document;<br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> org.dom4j.DocumentException;<br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> org.dom4j.Element;<br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> org.dom4j.XPath;<br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> org.dom4j.io.SAXReader;</span></p><p><span style="color: #0000ff;">import</span><span style="color: #000000;"> java.lang.reflect.Method;<br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> java.net.URL;<br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> java.util.ArrayList;<br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> java.util.HashMap;<br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> java.util.List;<br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> java.util.Map;</span></p><p><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> Factory_01 <span style="color: #0000ff;">implements</span><span style="color: #000000;"> Factory {<br>​    </span><span style="color: #008000;">//</span><span style="color: #008000;"> Map集合用来存放id和class</span><br>​    Map&lt;String, Object&gt; map = <span style="color: #0000ff;">new</span> HashMap&lt;&gt;<span style="color: #000000;">();<br>​    List</span>&lt;Bean&gt; beans = <span style="color: #0000ff;">new</span> ArrayList&lt;&gt;<span style="color: #000000;">();</span></p><pre><code>&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 实例化工厂对象时就完成以下操作&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Factory_01(String fileName) {    &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; xml解析&lt;/span&gt;    &lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;.pathXml(fileName);    &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 实例化对象&lt;/span&gt;    &lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;.instanceBean();    &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 属性赋值&lt;/span&gt;    &lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;.setProperty();}&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 属性赋值&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; setProperty() {    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;try&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; {        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt;(&lt;span style=&quot;color: #0000ff;&quot;&gt;null&lt;/span&gt;!=beans &amp;amp;&amp;amp; beans.size()&amp;gt;0&lt;span style=&quot;color: #000000;&quot;&gt;){            &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;(Bean bean:beans){                List&lt;/span&gt;&amp;lt;Property&amp;gt; properties=&lt;span style=&quot;color: #000000;&quot;&gt;bean.getProperties();                &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt;(&lt;span style=&quot;color: #0000ff;&quot;&gt;null&lt;/span&gt;!=properties &amp;amp;&amp;amp; properties.size()&amp;gt;0&lt;span style=&quot;color: #000000;&quot;&gt;){                    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;(Property property:properties){                        &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 得到property的id和ref&lt;/span&gt;                        String id=&lt;span style=&quot;color: #000000;&quot;&gt;property.getId();                        String ref&lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt;property.getRef();                        &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; set方法中首字母大写&lt;/span&gt;                        id=id.toUpperCase().charAt(0)+id.substring(1&lt;span style=&quot;color: #000000;&quot;&gt;);                        &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 获取到当前class&lt;/span&gt;                        Class clz=&lt;span style=&quot;color: #000000;&quot;&gt;map.get(bean.getId()).getClass();                        &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 找到set方法&lt;/span&gt;                        Method method=clz.getDeclaredMethod(&quot;set&quot;+&lt;span style=&quot;color: #000000;&quot;&gt;id,map.get(ref).getClass());                        method.invoke(map.get(bean.getId()),map.get(ref));                    }                }            }        }    } &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;catch&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; (Exception e) {        e.printStackTrace();    }}&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 实例化&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; instanceBean() {    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color: #0000ff;&quot;&gt;null&lt;/span&gt; != beans &amp;amp;&amp;amp; beans.size() &amp;gt; 0&lt;span style=&quot;color: #000000;&quot;&gt;) {        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;try&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; {            &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; (Bean bean : beans) {                &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 放到map集合中，通过key找到value，实例化该对象&lt;/span&gt;</code></pre><p><span style="color: #000000;">                    map.put(bean.getId(), Class.forName(bean.getClz()).newInstance());<br>​                }<br>​            } </span><span style="color: #0000ff;">catch</span><span style="color: #000000;"> (ClassNotFoundException e) {<br>​                e.printStackTrace();<br>​            } </span><span style="color: #0000ff;">catch</span><span style="color: #000000;"> (IllegalAccessException e) {<br>​                e.printStackTrace();<br>​            } </span><span style="color: #0000ff;">catch</span><span style="color: #000000;"> (InstantiationException e) {<br>​                e.printStackTrace();<br>​            }</span></p><pre><code>    }}&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;/**&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; * xml解析 * * &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;@param&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; fileName xml文件名 &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; pathXml(String fileName) {    &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 获取xml文件&lt;/span&gt;    URL url = &lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;.getClass().getClassLoader().getResource(fileName);    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;try&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; {        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color: #0000ff;&quot;&gt;null&lt;/span&gt; !=&lt;span style=&quot;color: #000000;&quot;&gt; url) {            &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 获取解析器&lt;/span&gt;            SAXReader saxReader = &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; SAXReader();            &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 解析xml文件，返回document对象&lt;/span&gt;            Document document =&lt;span style=&quot;color: #000000;&quot;&gt; saxReader.read(url);            &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 获取xpath对象&lt;/span&gt;            XPath xPath = document.createXPath(&quot;beans/bean&quot;&lt;span style=&quot;color: #000000;&quot;&gt;);            &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 查询选择的节点，返回的是list集合&lt;/span&gt;            List&amp;lt;Element&amp;gt; elements =&lt;span style=&quot;color: #000000;&quot;&gt; xPath.selectNodes(document);            &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 为空判断&lt;/span&gt;            &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color: #0000ff;&quot;&gt;null&lt;/span&gt; != elements &amp;amp;&amp;amp; elements.size() &amp;gt; 0&lt;span style=&quot;color: #000000;&quot;&gt;) {                &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; (Element element : elements) {                    &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 获取property&lt;/span&gt;                    xPath = document.createXPath(&quot;property&quot;&lt;span style=&quot;color: #000000;&quot;&gt;);                    &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 查询选择的节点&lt;/span&gt;                    List&amp;lt;Element&amp;gt; subElements =&lt;span style=&quot;color: #000000;&quot;&gt; xPath.selectNodes(element);                    &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 为空判断&lt;/span&gt;                    List&amp;lt;Property&amp;gt; properties = &lt;span style=&quot;color: #0000ff;&quot;&gt;null&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;                    &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 实例化Bean&lt;/span&gt;                    Bean bean = &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; Bean(element.attributeValue(&quot;id&quot;), element.attributeValue(&quot;class&quot;&lt;span style=&quot;color: #000000;&quot;&gt;));                    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color: #0000ff;&quot;&gt;null&lt;/span&gt; != subElements &amp;amp;&amp;amp; subElements.size() &amp;gt; 0&lt;span style=&quot;color: #000000;&quot;&gt;) {                        properties &lt;/span&gt;= &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;();                        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; (Element subElement : subElements) {                            &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 实例化Property&lt;/span&gt;                            Property property = &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; Property(subElement.attributeValue(&quot;id&quot;), subElement.attributeValue(&quot;ref&quot;&lt;span style=&quot;color: #000000;&quot;&gt;));                            &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 将对象放到集合中&lt;/span&gt;</code></pre><p><span style="color: #000000;">                                properties.add(property);<br>​                            }<br>​                            bean.setProperties(properties);<br>​                        }<br>​                        beans.add(bean);<br>​                    }<br>​                }<br>​            }<br>​        } </span><span style="color: #0000ff;">catch</span><span style="color: #000000;"> (DocumentException e) {<br>​            e.printStackTrace();<br>​        }<br>​    }</span></p><pre><code>@Override&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Object getObj(String name) {    &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 通过id返回class&lt;/span&gt;    &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; map.get(name);}</code></pre><p>}<br><br><span class="cnblogs_code_collapse">View Code</span></p><p>&nbsp;</p><p>四、Spring多文件的加载情况</p><p>　　1、ClassPathXmlApplicationContext类的构造器参数是一个可变长参数</p><p>　　　　　　可同时配置多个xml文件</p><p>　　2、import标签，将自配置文件导入总配置</p><p>　　　　<img src="https://img2018.cnblogs.com/blog/1467494/201809/1467494-20180926001244753-1555408954.png" alt=""></p><p>&nbsp;</p><p>四、Spring Ioc实例化bean的三种方式</p><p>　　<strong>1、构造器的方式实例化bean对象</strong></p><p>　　　　通过默认构造器实例化bean对象，<strong>默认空构造器必须存在</strong></p><p><img src="https://img2018.cnblogs.com/blog/1467494/201809/1467494-20180926222331040-1197348543.png" alt=""></p><p>&nbsp;</p><p>　　2、静态工厂方式实例化bean</p><p>　　　　要有工厂类和静态工厂方法</p><p>　　　　　　通过反射调用静态工厂的静态方法，将该静态方法的返回值作为bean的实例，可以统一管理各个bean的创建</p><p><img src="https://img2018.cnblogs.com/blog/1467494/201809/1467494-20180926222026490-1674063880.png" alt=""></p><p>&nbsp;</p><p>&nbsp;　　3、实例化工厂方式实例化bean</p><p>　　　　工厂类和实例化方法</p><p>　　　　　　工厂方法为非静态，需要配置工厂bean，并在bean中配置factory-bean和factory-method属性</p><p>　　　　　　1) 可用于集成其他框架的bean创建管理方法&nbsp; 2)能够使bean和factory的角色互换</p><p><img src="https://img2018.cnblogs.com/blog/1467494/201809/1467494-20180926222204794-1170574293.png" alt=""></p><p>&nbsp;</p><p>五、Spring 依赖注入</p><p>　　在面向接口编程中，依赖接口可以动态传入多种实现</p><p>　　<strong>1、set注入</strong></p><p>　　　　<strong>property标签，属性的set方法（不会出现循环引用问题）</strong></p><p>　　　　<img src="https://img2018.cnblogs.com/blog/1467494/201809/1467494-20180926225827577-549846355.png" alt=""></p><p>　　　　name：属性名称；ref：bean对象的引用；value：给属性直接赋值（List，Set，Map，properties）</p><p>　　<strong>2、构造器注入</strong></p><p><strong>　　　　constructor-arg标签，带参构造器（会出现循环引用问题，彼此互相依赖对方导致bean无法实例化）</strong></p><p>　　　　<img src="https://img2018.cnblogs.com/blog/1467494/201809/1467494-20180926230338589-548459749.png" alt=""></p><p>　　　　name：属性名称；ref：bean对象id的引用；index：属性的索引</p><p>&nbsp;</p><p>　　3、静态工厂注入</p><p>　　　　<img src="https://img2018.cnblogs.com/blog/1467494/201809/1467494-20180926230514633-1030558018.png" alt=""></p><p>&nbsp;</p><p>　　4、实例化工厂注入</p><p>　　　　<img src="https://img2018.cnblogs.com/blog/1467494/201809/1467494-20180926230547141-476319273.png" alt=""></p><p>&nbsp;</p><p><strong>六、注解方式注入bean</strong></p><p>　　xml配置：加入context命名空间和xsd地址</p><p>　　添加&lt;context:annotation-config/&gt;配置</p><p>&nbsp;</p><p>　　@Resource （属于J2EE）</p><p>　　@Autowired （Spring）</p><p>　　常用于属性字段或set方法上</p><p>　　区别：</p><p>　　　　　@Autowired 默认按bean的类型匹配，和@Qualifier配合使用可以修改按名称匹配</p><p>　　　　　@Resource 默认按名称进行装配，可以通过name属性指定，如果没有指定name属性，当注解写在字段上时，默认取字段名进行匹配注入，如果注解写在set方法上默认取属性名进行装配。当找不到与名称匹配的bean时才按照类型进行装配（当name属性指定，只会按照名称装配）</p><p>&nbsp;</p><p>注解方式注入的简单模拟：</p><p><span style="color: #0000ff;">import</span><span style="color: #000000;"> com.shsxt.annotaioms.Component;<br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> com.shsxt.annotaioms.Component02;<br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> com.shsxt02.controller.UserController;</span></p><p><span style="color: #0000ff;">import</span><span style="color: #000000;"> java.io.File;<br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> java.lang.reflect.Field;<br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> java.net.URL;<br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> java.util.ArrayList;<br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> java.util.HashMap;<br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> java.util.List;<br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> java.util.Map;</span></p><p><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> Test {</span></p><pre><code>&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt; List&amp;lt;String&amp;gt;  clz=&lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;();&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt;  Map&amp;lt;String,Object&amp;gt; map=&lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;();&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; main(String[] args){    String pkg&lt;/span&gt;=&quot;com.shsxt02&quot;&lt;span style=&quot;color: #000000;&quot;&gt;;    &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 获取标记注解的类&lt;/span&gt;</code></pre><p><span style="color: #000000;">        getClZ(pkg);<br>​        </span><span style="color: #008000;">//</span><span style="color: #008000;"> 实例化这些类</span><br><span style="color: #000000;">        instanceClz();<br>​        </span><span style="color: #008000;">//</span><span style="color: #008000;"> 属性赋值</span><br><span style="color: #000000;">        property();<br>​        UserController userController</span>= (UserController) map.get(“userController”<span style="color: #000000;">);<br>​        userController.test();<br>​    }</span></p><pre><code>&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; property() {    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;try&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; {        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color: #0000ff;&quot;&gt;null&lt;/span&gt;!=&lt;span style=&quot;color: #000000;&quot;&gt;map){            &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;(Map.Entry entry:map.entrySet()){                Field[] fields&lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt;entry.getValue().getClass().getDeclaredFields();                &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color: #0000ff;&quot;&gt;null&lt;/span&gt;!=&lt;span style=&quot;color: #000000;&quot;&gt;fields){                    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;(Field field:fields){                        Component02 component02&lt;/span&gt;=field.getAnnotation(Component02.&lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);                        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color: #0000ff;&quot;&gt;null&lt;/span&gt;!=&lt;span style=&quot;color: #000000;&quot;&gt;component02){                            field.setAccessible(&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);                            field.set(entry.getValue(),map.get(component02.value()));                        }                    }                }            }        }    } &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;catch&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; (IllegalAccessException e) {        e.printStackTrace();    }}&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; instanceClz() {    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;try&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; {        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color: #0000ff;&quot;&gt;null&lt;/span&gt;!=clz &amp;amp;&amp;amp; clz.size()&amp;gt;0&lt;span style=&quot;color: #000000;&quot;&gt;){            &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;(String cls:clz){                &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;System.out.println(str);&lt;/span&gt;                cls=cls.replace(&quot;.class&quot;,&quot;&quot;&lt;span style=&quot;color: #000000;&quot;&gt;);                &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;System.out.println(cls);&lt;/span&gt;                Component component=Class.forName(cls).getAnnotation(Component.&lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);                &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color: #0000ff;&quot;&gt;null&lt;/span&gt;!=&lt;span style=&quot;color: #000000;&quot;&gt;component){                    &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;System.out.println(cls);&lt;/span&gt;                    String id=&lt;span style=&quot;color: #000000;&quot;&gt; getId(cls);                    Object obj&lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt;Class.forName(cls).newInstance();                    map.put(id,obj);                }            }        }    } &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;catch&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; (ClassNotFoundException e) {        e.printStackTrace();    } &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;catch&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; (IllegalAccessException e) {        e.printStackTrace();    } &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;catch&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; (InstantiationException e) {        e.printStackTrace();    }}&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; String getId(String cls) {    cls&lt;/span&gt;=cls.substring(cls.lastIndexOf(&quot;.&quot;)+1&lt;span style=&quot;color: #000000;&quot;&gt;);    cls&lt;/span&gt;= cls.toLowerCase().charAt(0)+cls.substring(1&lt;span style=&quot;color: #000000;&quot;&gt;);    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; cls;}&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; getClZ(String pkg) {    &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 获取url&lt;/span&gt;    URL url=&lt;span style=&quot;color: #000000;&quot;&gt;Thread.currentThread().getContextClassLoader().getResource(repStr(pkg));    String urlPath&lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt;url.getFile();    &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;System.out.println(urlPath);&lt;/span&gt;    String[] subFileStrs=&lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; File(urlPath).list();    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;(String str:subFileStrs){        String subFilePath&lt;/span&gt;=urlPath+&quot;/&quot;+&lt;span style=&quot;color: #000000;&quot;&gt;str;        &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;System.out.println(subFilePath);&lt;/span&gt;        File subFile=&lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; File(subFilePath);        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; (subFile.isDirectory()){            &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;System.out.println(pkg+&quot;.&quot;+subFile.getName());&lt;/span&gt;            getClZ(pkg+&quot;.&quot;+&lt;span style=&quot;color: #000000;&quot;&gt;subFile.getName());        }&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;else&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;{            clz.add(pkg&lt;/span&gt;+&quot;.&quot;+&lt;span style=&quot;color: #000000;&quot;&gt;subFile.getName());        }    }}&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; String repStr(String str){    str&lt;/span&gt;=str.replace(&quot;.&quot;,&quot;/&quot;&lt;span style=&quot;color: #000000;&quot;&gt;);    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; str;}</code></pre><p>}<br></p><p>&nbsp;</p><p><strong>七、Spring IOC 容器自动扫描管理bean</strong></p><p>　　xml配置&lt;context:component-scan base-package=””/&gt;</p><p>　　建议的注解</p><p>　　　　Dao层：@Repository</p><p>　　　　Service层：@Service</p><p>　　　　控制层：@Controller</p><p>　　　　不明确：@Component</p><p>&nbsp;</p><p>八、Bean的作用域问题(scope)</p><p>　　1、singleton作用域（单例，默认）</p><p>　　　　lazy-init 懒加载 默认为false</p><p>　　　　　　如果等于true时，spring容器启动的时候不会去实例化这个bean，而是在程序调用时才会去实例化</p><p>　　　　　　<strong>在启动情况下实例化所有singleton的bean对象并缓存与容器中单例的好处：</strong></p><p>　　　　　　　　<strong>1、提前发现潜在的配置问题</strong></p><p><strong>　　　　　　　　2、bean对象存在于缓存中，使用时不用再实例化bean，提高执行性能</strong></p><p>　　　　　　无状态对象适合做单例bean对象（无可变的成员变量）</p><p>&nbsp;</p><p>　　2、prototype作用域（原型）</p><p>　　　　每次向Spring容器请求获取Bean都返回一个全新的Bean，相对于&ldquo;singleton&rdquo;来说就是不缓存Bean。IOC不会维护该对象</p><p>&nbsp;</p><p>　　3、Web应用中的作用域（request、session、globalsession）</p><p>　　　　request作用域：每一次请求</p><p>　　　　session：当前会话</p><p>　　　　globlasession：同session（Portlet环境）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一、Spring框架概念&lt;/p&gt;
&lt;p&gt;　　spring 是众多开源 java 项目中的一员，基于分层的 javaEE 应用一站式轻量级开源框架，&lt;strong&gt;主要核心是 Ioc(控制反转/依赖注入) 与 Aop(面向切面)&lt;/strong&gt;两大技术，实现项目在开发过程中
      
    
    </summary>
    
      <category term="Spring" scheme="http://www.dlhblog.online/categories/Spring/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring-AOP</title>
    <link href="http://www.dlhblog.online/2018/10/04/Spring-AOP/"/>
    <id>http://www.dlhblog.online/2018/10/04/Spring-AOP/</id>
    <published>2018-10-04T10:35:51.000Z</published>
    <updated>2018-10-04T10:36:29.911Z</updated>
    
    <content type="html"><![CDATA[<p>一、代理模式</p><p>　　1、<strong>代理模式的设计原则：</strong></p><p>　　　　&middot;代理类与委托类具有相似的行为</p><p>　　　　&middot;代理类增强委托类的行为</p><p>　　<strong>2、代理模式实现的三要素：</strong></p><p>　　　　代理角色、目标角色、共同行为</p><p>　　　　实现行为接口，持有目标对象的引用</p><p>&nbsp;</p><p>　　3、静态代理和动态代理</p><p>　　　　1）静态代理</p><p>　　　　　　特点：程序运行前制作代理角色</p><p>　　　　　　　　　代理目标角色单一</p><p>　　　　　　　　　代理类数量无法控制</p><p>　　　　2）动态代理</p><p>　　　　　　程序运行期动态创建代理角色</p><p>　　　　　　&middot;JDK动态代理，回调方式实现</p><p>　　　　　　&middot;cglib动态代理，继承方式实现</p><p>　　　　　<strong>区别：</strong></p><p>　　　　　　　　JDK动态代理：委托类必须要有接口，制作过程较快，执行慢</p><p>　　　　　　　　Cglib动态代理：委托类可以没有接口，继承的思维来实现相似性，制作代理过程比较慢，执行快</p><p>&nbsp;</p><p>二、AOP（面相切面编程）</p><p>　　<strong>AOP的两种实现机制是JDK动态代理和cglib动态代理</strong></p><p>　　　　AOP主要应用于日志记录，性能统计，安全控制，事务处理额等方面，<strong>实现公共行为的重复使用</strong></p><p><strong>　　　　降低模块之间的耦合度，提高业务代码的聚合度（高内聚低耦合）</strong></p><p><strong>　　　　提高代码的复用性</strong></p><p><strong>　　　　提高系统的扩展性</strong></p><p><strong>　　Aop基本概念</strong></p><p>　　　　Joinpoint（连接点）：spring中指被拦截到的每一个方法</p><p>　　　　Pointcut（切入点）：规定拦截哪些方法，对那些方法进行处理</p><p>　　　　Advice（通知）：拦截到每一个连接点后要做的操作</p><p>　　　　　　前置通知、返回通知、最终通知、异常通知、环绕通知</p><p>　　　　Aspect（切面）：切入点与通知的结合</p><p>　　　　Target（目标对象）：被代理的目标对象</p><p>　　　　Weave（织入）</p><p>　　　　Introduction（引入）</p><p>&nbsp;</p><p><strong>三、AOP注解实现</strong></p><p>　　1、XML：引入命名空间，开启aop代理环境</p><p>　　　　<img src="https://img2018.cnblogs.com/blog/1467494/201809/1467494-20180927225839932-957057191.png" alt=""></p><p>　　2、Maven项目引入Aspect坐标</p><p>　　3、创建切面类　　@Aspect定义切面类</p><p>　　4、声明方法为切入点　　@Pointcut 匹配规则定义　execution</p><p>　　5、创建通知方法</p><div class="cnblogs_code"><br><pre><span style="color: #0000ff;">package</span><span style="color: #000000;"> com.shsxt02.proxy;<br><br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> org.aspectj.lang.ProceedingJoinPoint;<br></span><span style="color: #0000ff;">import</span> org.aspectj.lang.annotation.<em><span style="color: #000000;">;<br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> org.springframework.stereotype.Component;<br><br>@Aspect<br>@Component<br></span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> LogCut {<br><br>    @Pointcut(</span>“execution(</em> com.shsxt02.service..<em>.</em>(..))”<span style="color: #000000;">)<br>    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> cut() {<br>    }<br><br>    @After(value </span>= “cut()”<span style="color: #000000;">)<br>    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> before(){<br>        System.out.println(</span>“前置通知，目标方法执行前执行…”<span style="color: #000000;">);<br>    }<br><br>    @AfterReturning(value </span>= “cut()”<span style="color: #000000;">)<br>    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> afterReturn(){<br>        System.out.println(</span>“返回通知，方法正常结束后执行…”<span style="color: #000000;">);<br>    }<br><br>    @After(value </span>= “cut()”<span style="color: #000000;">)<br>    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> after(){<br>        System.out.println(</span>“最终通知，方法是否发生异常均会执行…”<span style="color: #000000;">);<br>    }<br><br>    @AfterThrowing(value </span>= “cut()”,throwing = “e”<span style="color: #000000;">)<br>    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> afterThrow(Exception e){<br>        System.out.println(</span>“异常通知，异常时执行…”+<span style="color: #000000;">e);<br>    }<br><br>    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 环绕通知</span><br>    @Around(value = “cut()”<span style="color: #000000;">)<br>    </span><span style="color: #0000ff;">public</span> Object around(ProceedingJoinPoint  pjp) <span style="color: #0000ff;">throws</span><span style="color: #000000;"> Throwable {<br>        Object result</span>=<span style="color: #0000ff;">null</span><span style="color: #000000;">;<br>        System.out.println(</span>“环绕前置…”<span style="color: #000000;">);<br>        System.out.println(</span>“环绕通知…”<span style="color: #000000;">);<br>        System.out.println(</span>“方法签名”+<span style="color: #000000;">pjp.getSignature());<br>        System.out.println(</span>“目标对象”+<span style="color: #000000;">pjp.getTarget());<br>        System.out.println(</span>“种类”+<span style="color: #000000;">pjp.getKind());<br>        Object[] objects</span>=<span style="color: #000000;">pjp.getArgs();<br>        </span><span style="color: #0000ff;">for</span><span style="color: #000000;">(Object o:objects){<br>            System.out.println(</span>“参数”+<span style="color: #000000;">o);<br>        }<br>        result</span>= pjp.proceed(); <span style="color: #008000;">//</span><span style="color: #008000;"> 返回的目标对象</span><br>        System.out.println(“环绕后置…”<span style="color: #000000;">);<br>        </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> result;<br>    }<br>}</span></pre><br></div><p>&nbsp;</p><p><strong>四、AOP XML配置实现</strong></p><p><strong>　　<img src="https://img2018.cnblogs.com/blog/1467494/201809/1467494-20180927230801472-134081809.png" alt=""></strong></p><p>&nbsp;</p><p>&nbsp;</p><p>五、AOP拦截注释</p><p>　　<img src="https://img2018.cnblogs.com/blog/1467494/201809/1467494-20180927231105496-1122978415.png" alt=""></p><p>&nbsp;</p><p><strong>如果目标角色实现了接口，AOP有代理，返回的是代理对象，需要通过接口接收。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一、代理模式&lt;/p&gt;
&lt;p&gt;　　1、&lt;strong&gt;代理模式的设计原则：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　&amp;middot;代理类与委托类具有相似的行为&lt;/p&gt;
&lt;p&gt;　　　　&amp;middot;代理类增强委托类的行为&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;2、代理模式实现的
      
    
    </summary>
    
      <category term="Spring" scheme="http://www.dlhblog.online/categories/Spring/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring-定时器和邮件发送</title>
    <link href="http://www.dlhblog.online/2018/10/04/Spring-%E5%AE%9A%E6%97%B6%E5%99%A8%E5%92%8C%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/"/>
    <id>http://www.dlhblog.online/2018/10/04/Spring-定时器和邮件发送/</id>
    <published>2018-10-04T10:33:08.000Z</published>
    <updated>2018-10-04T10:33:58.177Z</updated>
    
    <content type="html"><![CDATA[<p><strong>一、定时器的实现（task）</strong></p><p>　　1、在XML配置文件中引入约束</p><p>　　　　xmlns:task=”<a href="http://www.springframework.org/schema/task&quot;" target="_blank" rel="noopener">http://www.springframework.org/schema/task&quot;</a></p><p>　　　　<a href="http://www.springframework.org/schema/task" target="_blank" rel="noopener">http://www.springframework.org/schema/task</a></p><p>　　　　<a href="http://www.springframework.org/schema/task/spring-task.xsd" target="_blank" rel="noopener">http://www.springframework.org/schema/task/spring-task.xsd</a></p><p>　　2、编写定时器类，和方法</p><p><img src="https://img2018.cnblogs.com/blog/1467494/201809/1467494-20180928213640447-1543672220.png" alt=""></p><p>&nbsp;</p><p>　　3、使用xml配置文件</p><p>　　　　<img src="https://img2018.cnblogs.com/blog/1467494/201809/1467494-20180928213956638-382258084.png" alt=""></p><p>　　　　加载配置文件就可以执行定时任务了，图为两秒执行一次。</p><p>&nbsp;</p><p><strong>二、邮件发送</strong></p><p>　　1、Java mail发送邮件</p><p>　　　　1) Maven项目引入java mail坐标，也可以手动安装</p><div class="cnblogs_code"><br><pre><span style="color: #0000ff;">package</span><span style="color: #000000;"> com.shsxt.service;<br><br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> org.apache.commons.lang3.StringUtils;<br><br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> javax.activation.DataHandler;<br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> javax.activation.DataSource;<br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> javax.activation.FileDataSource;<br></span><span style="color: #0000ff;">import</span> javax.mail.<em><span style="color: #000000;">;<br></span><span style="color: #0000ff;">import</span> javax.mail.internet.</em><span style="color: #000000;">;<br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> java.io.File;<br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> java.io.UnsupportedEncodingException;<br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> java.nio.charset.Charset;<br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> java.util.Properties;<br><br></span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> MailService {<br><br>    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> mail(String fromUser, String[] receivers, String setSubject, String content, String[] files) {<br>        </span><span style="color: #008000;">//</span><span style="color: #008000;"> 判断参数是否为空</span><br>        <span style="color: #0000ff;">if</span> (!<span style="color: #000000;">judgment(fromUser, receivers, setSubject, content)){<br>            </span><span style="color: #0000ff;">return</span><span style="color: #000000;">;<br>        }<br>        </span><span style="color: #008000;">//</span><span style="color: #008000;"> 获取session</span><br>        Session session =<span style="color: #000000;"> init(fromUser);<br>        Message message </span>= <span style="color: #0000ff;">new</span><span style="color: #000000;"> MimeMessage(session);<br>        </span><span style="color: #008000;">//</span><span style="color: #008000;"> 发送人</span><br><span style="color: #000000;">        sender(fromUser, message);<br>​        </span><span style="color: #008000;">//</span><span style="color: #008000;"> 收件人</span><br><span style="color: #000000;">        recipients(receivers, message);<br>​        </span><span style="color: #008000;">//</span><span style="color: #008000;"> 主题</span><br><span style="color: #000000;">        subject(message,setSubject);<br>​        </span><span style="color: #008000;">//</span><span style="color: #008000;"> 设置html和附件</span><br>​        Multipart multipart = <span style="color: #0000ff;">new</span><span style="color: #000000;"> MimeMultipart();<br>​        </span><span style="color: #008000;">//</span><span style="color: #008000;"> html内容</span><br><span style="color: #000000;">        Content(content, multipart);<br>​        </span><span style="color: #008000;">//</span><span style="color: #008000;"> 判断是否有附件</span><br>​        <span style="color: #0000ff;">if</span> (<span style="color: #0000ff;">null</span> != files &amp;&amp; files.length &gt; 0<span style="color: #000000;">) {<br>​            </span><span style="color: #008000;">//</span><span style="color: #008000;"> 上传附件</span><br><span style="color: #000000;">            fileUp(files, multipart);<br>​        }<br>​        settingContext(message, multipart);<br>​        </span><span style="color: #008000;">//</span><span style="color: #008000;"> 发送</span><br><span style="color: #000000;">        send(message);<br>​    }<br><br>    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 8、发送</span><br>    <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> send(Message message) {<br>        </span><span style="color: #0000ff;">try</span><span style="color: #000000;"> {<br>            Transport.send(message);<br>        } </span><span style="color: #0000ff;">catch</span><span style="color: #000000;"> (MessagingException e) {<br>            e.printStackTrace();<br>        }<br>    }<br><br>    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 7、设置上下文</span><br>    <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> settingContext(Message message, Multipart multipart) {<br>        </span><span style="color: #0000ff;">try</span><span style="color: #000000;"> {<br>            message.setContent(multipart);<br>        } </span><span style="color: #0000ff;">catch</span><span style="color: #000000;"> (MessagingException e) {<br>            e.printStackTrace();<br>        }<br>    }<br><br>    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 6、设置主题</span><br>    <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> subject(Message message,String setSubject) {<br>        </span><span style="color: #0000ff;">try</span><span style="color: #000000;"> {<br>            message.setSubject(setSubject);<br>        } </span><span style="color: #0000ff;">catch</span><span style="color: #000000;"> (MessagingException e) {<br>            e.printStackTrace();<br>        }<br>    }<br><br>    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 5、上传附件</span><br>    <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> fileUp(String[] files, Multipart multipart) {<br>        </span><span style="color: #0000ff;">try</span><span style="color: #000000;"> {<br>            </span><span style="color: #0000ff;">for</span><span style="color: #000000;"> (String filePath : files) {<br>                BodyPart file </span>= <span style="color: #0000ff;">new</span><span style="color: #000000;"> MimeBodyPart();<br>                File temp </span>= <span style="color: #0000ff;">new</span><span style="color: #000000;"> File(filePath);<br>                file.setDataHandler(</span><span style="color: #0000ff;">new</span> DataHandler(<span style="color: #0000ff;">new</span> FileDataSource(<span style="color: #0000ff;">new</span><span style="color: #000000;"> File(filePath))));<br>                file.setFileName(MimeUtility.encodeText(temp.getName()));<br>                multipart.addBodyPart(file);<br>            }<br>        } </span><span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Exception e) {<br>            e.printStackTrace();<br>        }<br>    }<br><br>    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 4、设置html内容</span><br>    <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> Content(String content, Multipart multipart) {<br>        </span><span style="color: #0000ff;">try</span><span style="color: #000000;"> {<br>            BodyPart html </span>= <span style="color: #0000ff;">new</span><span style="color: #000000;"> MimeBodyPart();<br>            html.setContent(content, </span>“text/html;charset=utf-8”<span style="color: #000000;">);<br>            multipart.addBodyPart(html);<br>        } </span><span style="color: #0000ff;">catch</span><span style="color: #000000;"> (MessagingException e) {<br>            e.printStackTrace();<br>        }<br>    }<br><br>    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 3、设置收件人</span><br>    <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> recipients(String[] receivers, Message message) {<br>        </span><span style="color: #0000ff;">try</span><span style="color: #000000;"> {<br>            Address[] addresses </span>= <span style="color: #0000ff;">new</span><span style="color: #000000;"> InternetAddress[receivers.length];<br>            </span><span style="color: #0000ff;">for</span> (<span style="color: #0000ff;">int</span> i = 0; i &lt; addresses.length; i++<span style="color: #000000;">) {<br>                addresses[i] </span>= <span style="color: #0000ff;">new</span><span style="color: #000000;"> InternetAddress(receivers[i]);<br>            }<br>            message.setRecipients(Message.RecipientType.TO, addresses);<br>        } </span><span style="color: #0000ff;">catch</span><span style="color: #000000;"> (MessagingException e) {<br>            e.printStackTrace();<br>        }<br>    }<br><br>    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 2、设置发送人</span><br>    <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> sender(String fromUser, Message message) {<br>        </span><span style="color: #0000ff;">try</span><span style="color: #000000;"> {<br>            Address from </span>= <span style="color: #0000ff;">new</span><span style="color: #000000;"> InternetAddress(fromUser);<br>            message.setFrom(from);<br>        } </span><span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Exception e) {<br>            e.printStackTrace();<br>        }<br>    }<br><br>    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 1、初始化</span><br>    <span style="color: #0000ff;">private</span><span style="color: #000000;"> Session init(String fromUser) {<br>        Properties properties </span>= <span style="color: #0000ff;">new</span><span style="color: #000000;"> Properties();<br>        </span><span style="color: #008000;">//</span><span style="color: #008000;"> 邮箱服务器主机</span><br>        properties.put(“mail.smtp.host”, “smtp.163.com”<span style="color: #000000;">);<br>        properties.put(</span>“mail.smtp.auth”, “true”<span style="color: #000000;">);<br>        properties.put(</span>“mail.smtp.port”, 25<span style="color: #000000;">);<br><br>        Session session </span>= Session.getDefaultInstance(properties, <span style="color: #0000ff;">new</span><span style="color: #000000;"> Authenticator() {<br>            @Override<br>            </span><span style="color: #0000ff;">protected</span><span style="color: #000000;"> PasswordAuthentication getPasswordAuthentication() {<br>                </span><span style="color: #0000ff;">return</span> <span style="color: #0000ff;">new</span> PasswordAuthentication(“<a href="mailto:15657262398@163.com" target="_blank" rel="noopener">15657262398@163.com</a>“, “d140120”<span style="color: #000000;">);<br>            }<br>        });<br>        </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> session;<br>    }<br><br>    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 0、判断参数是否为空</span><br>    <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">boolean</span><span style="color: #000000;"> judgment(String fromUser, String[] receivers, String setSubject, String content) {<br>        </span><span style="color: #0000ff;">boolean</span> flag = <span style="color: #0000ff;">true</span><span style="color: #000000;">;<br>        </span><span style="color: #0000ff;">if</span> (StringUtils.isBlank(fromUser) || StringUtils.isAnyBlank(receivers) || StringUtils.isBlank(setSubject) ||<span style="color: #000000;"> StringUtils.isBlank(content)) {<br>            flag </span>= <span style="color: #0000ff;">false</span><span style="color: #000000;">;<br>        }<br>        </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> flag;<br>    }<br><br>}</span></pre><br></div><p>&nbsp;</p><p>　　2、spring环境下发送邮件</p><p>　　　　XML配置</p><div class="cnblogs_code"><br><pre><span style="color: #0000ff;">&lt;?</span><span style="color: #ff00ff;">xml version=”1.0” encoding=”UTF-8”</span><span style="color: #0000ff;">?&gt;</span><br><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">beans </span><span style="color: #ff0000;">xmlns</span><span style="color: #0000ff;">=”<a href="http://www.springframework.org/schema/beans&quot;" target="_blank" rel="noopener">http://www.springframework.org/schema/beans&quot;</a></span><span style="color: #ff0000;"><br>       xmlns:xsi</span><span style="color: #0000ff;">=”<a href="http://www.w3.org/2001/XMLSchema-instance&quot;" target="_blank" rel="noopener">http://www.w3.org/2001/XMLSchema-instance&quot;</a></span><span style="color: #ff0000;"><br>       xmlns:context</span><span style="color: #0000ff;">=”<a href="http://www.springframework.org/schema/context&quot;" target="_blank" rel="noopener">http://www.springframework.org/schema/context&quot;</a></span><span style="color: #ff0000;"><br>       xsi:schemaLocation</span><span style="color: #0000ff;">=”<a href="http://www.springframework.org/schema/beans" target="_blank" rel="noopener">http://www.springframework.org/schema/beans</a><br>        <a href="http://www.springframework.org/schema/beans/spring-beans.xsd" target="_blank" rel="noopener">http://www.springframework.org/schema/beans/spring-beans.xsd</a><br>       <a href="http://www.springframework.org/schema/context" target="_blank" rel="noopener">http://www.springframework.org/schema/context</a><br>        <a href="http://www.springframework.org/schema/context/spring-context.xsd&quot;" target="_blank" rel="noopener">http://www.springframework.org/schema/context/spring-context.xsd&quot;</a></span><span style="color: #0000ff;">&gt;</span><br><br>    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">context:component-scan </span><span style="color: #ff0000;">base-package</span><span style="color: #0000ff;">=”com.mail”</span><span style="color: #0000ff;">/&gt;</span><br><br>    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">bean </span><span style="color: #ff0000;">id</span><span style="color: #0000ff;">=”mailSender”</span><span style="color: #ff0000;"> class</span><span style="color: #0000ff;">=”org.springframework.mail.javamail.JavaMailSenderImpl”</span><span style="color: #0000ff;">&gt;</span><br>        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">property </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">=”host”</span><span style="color: #ff0000;"> value</span><span style="color: #0000ff;">=”smtp.163.com”</span><span style="color: #0000ff;">/&gt;</span><span style="color: #008000;">&lt;!–</span><span style="color: #008000;">发送email的邮件服务器主机名</span><span style="color: #008000;">–&gt;</span><br>        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">property </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">=”username”</span><span style="color: #ff0000;"> value</span><span style="color: #0000ff;">=”<a href="mailto:test@163.com" target="_blank" rel="noopener">test@163.com</a>“</span><span style="color: #0000ff;">/&gt;</span><span style="color: #008000;">&lt;!–</span><span style="color: #008000;">用户名</span><span style="color: #008000;">–&gt;</span><br>        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">property </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">=”password”</span><span style="color: #ff0000;"> value</span><span style="color: #0000ff;">=”test”</span><span style="color: #0000ff;">/&gt;</span><span style="color: #008000;">&lt;!–</span><span style="color: #008000;">授权码</span><span style="color: #008000;">–&gt;</span><br>    <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">bean</span><span style="color: #0000ff;">&gt;</span><br>    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">bean </span><span style="color: #ff0000;">id</span><span style="color: #0000ff;">=”simpleMailMessage”</span><span style="color: #ff0000;"> class</span><span style="color: #0000ff;">=”org.springframework.mail.SimpleMailMessage”</span><span style="color: #0000ff;">&gt;</span><br>        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">property </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">=”subject”</span><span style="color: #ff0000;"> value</span><span style="color: #0000ff;">=”hello mail”</span><span style="color: #0000ff;">/&gt;</span><br>        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">property </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">=”from”</span><span style="color: #ff0000;"> value</span><span style="color: #0000ff;">=”<a href="mailto:15657262398@163.com" target="_blank" rel="noopener">15657262398@163.com</a>“</span><span style="color: #0000ff;">/&gt;</span><br>    <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">bean</span><span style="color: #0000ff;">&gt;</span><br><span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">beans</span><span style="color: #0000ff;">&gt;</span></pre><br></div><p>　　　　装配和使用邮件发送器</p><div class="cnblogs_code"><br><pre><span style="color: #0000ff;">package</span><span style="color: #000000;"> com.mail;<br><br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> org.springframework.mail.MailSender;<br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> org.springframework.mail.SimpleMailMessage;<br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> org.springframework.stereotype.Service;<br><br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> javax.annotation.Resource;<br>@Service<br></span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> OrderManagerImpl <span style="color: #0000ff;">implements</span><span style="color: #000000;"> OrderManager {<br><br>    @Resource<br>    </span><span style="color: #0000ff;">private</span><span style="color: #000000;"> MailSender mailSender;<br>    @Resource<br>    </span><span style="color: #0000ff;">private</span><span style="color: #000000;"> SimpleMailMessage simpleMailMessage;<br><br>    @Override<br>    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> placeOrder() {<br>        SimpleMailMessage msg</span>=<span style="color: #0000ff;">new</span> SimpleMailMessage(<span style="color: #0000ff;">this</span><span style="color: #000000;">.simpleMailMessage);<br>        msg.setTo(</span>“<a href="mailto:test@163.com" target="_blank" rel="noopener">test@163.com</a>“<span style="color: #000000;">);<br>        msg.setText(</span>“hello”<span style="color: #000000;">);<br>        </span><span style="color: #0000ff;">this</span><span style="color: #000000;">.mailSender.send(msg);<br>    }<br>}</span></pre><br></div><p>&nbsp;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;一、定时器的实现（task）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　1、在XML配置文件中引入约束&lt;/p&gt;
&lt;p&gt;　　　　xmlns:task=”&lt;a href=&quot;http://www.springframework.org/schema/task&amp;quot;
      
    
    </summary>
    
      <category term="Spring" scheme="http://www.dlhblog.online/categories/Spring/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring-整合JDBC-事务-远程方法调用RMI</title>
    <link href="http://www.dlhblog.online/2018/10/04/Spring-%E6%95%B4%E5%90%88JDBC-%E4%BA%8B%E5%8A%A1-%E8%BF%9C%E7%A8%8B%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8RMI/"/>
    <id>http://www.dlhblog.online/2018/10/04/Spring-整合JDBC-事务-远程方法调用RMI/</id>
    <published>2018-10-04T10:30:44.000Z</published>
    <updated>2018-10-05T10:04:35.752Z</updated>
    
    <content type="html"><![CDATA[<p><strong>一、spring整合JDBC</strong></p><p>　　spring整合jdbc使用了<strong>模版方法设计模式</strong></p><p>　　　　<strong>定义一套规范，固定流程不变，传入可变内容</strong></p><p>　　1、Maven项目添加依赖</p><p>　　　　spring-context坐标依赖</p><p>　　　　mysql驱动包</p><p>　　　　c3p0连接池</p><p>　　　　spring jdbc</p><p>　　2、准备数据库的配置文件</p><p>　　3、xml配置</p><div class="cnblogs_code"><br><pre><span style="color: #0000ff;">&lt;?</span><span style="color: #ff00ff;">xml version=”1.0” encoding=”UTF-8”</span><span style="color: #0000ff;">?&gt;</span><br><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">beans </span><span style="color: #ff0000;">xmlns</span><span style="color: #0000ff;">=”<a href="http://www.springframework.org/schema/beans&quot;" target="_blank" rel="noopener">http://www.springframework.org/schema/beans&quot;</a></span><span style="color: #ff0000;"><br>       xmlns:xsi</span><span style="color: #0000ff;">=”<a href="http://www.w3.org/2001/XMLSchema-instance&quot;" target="_blank" rel="noopener">http://www.w3.org/2001/XMLSchema-instance&quot;</a></span><span style="color: #ff0000;"><br>       xmlns:context</span><span style="color: #0000ff;">=”<a href="http://www.springframework.org/schema/context&quot;" target="_blank" rel="noopener">http://www.springframework.org/schema/context&quot;</a></span><span style="color: #ff0000;"><br>       xsi:schemaLocation</span><span style="color: #0000ff;">=”<a href="http://www.springframework.org/schema/beans" target="_blank" rel="noopener">http://www.springframework.org/schema/beans</a><br>        <a href="http://www.springframework.org/schema/beans/spring-beans.xsd" target="_blank" rel="noopener">http://www.springframework.org/schema/beans/spring-beans.xsd</a><br>        <a href="http://www.springframework.org/schema/context" target="_blank" rel="noopener">http://www.springframework.org/schema/context</a><br>        <a href="http://www.springframework.org/schema/context/spring-context.xsd&quot;" target="_blank" rel="noopener">http://www.springframework.org/schema/context/spring-context.xsd&quot;</a></span><span style="color: #0000ff;">&gt;</span><br><br>    <span style="color: #008000;">&lt;!–</span><span style="color: #008000;">配置扫描器</span><span style="color: #008000;">–&gt;</span><br>    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">context:component-scan </span><span style="color: #ff0000;">base-package</span><span style="color: #0000ff;">=”com.shsxt”</span><span style="color: #0000ff;">/&gt;</span><br>    <span style="color: #008000;">&lt;!–</span><span style="color: #008000;">加载properties</span><span style="color: #008000;">–&gt;</span><br>    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">context:property-placeholder </span><span style="color: #ff0000;">location</span><span style="color: #0000ff;">=”classpath:jdbc.properties”</span><span style="color: #0000ff;">/&gt;</span><br>    <span style="color: #008000;">&lt;!–</span><span style="color: #008000;">配置数据源c3p0</span><span style="color: #008000;">–&gt;</span><br>    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">bean </span><span style="color: #ff0000;">id</span><span style="color: #0000ff;">=”dataSource”</span><span style="color: #ff0000;"> class</span><span style="color: #0000ff;">=”com.mchange.v2.c3p0.ComboPooledDataSource”</span><span style="color: #0000ff;">&gt;</span><br>        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">property </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">=”driverClass”</span><span style="color: #ff0000;"> value</span><span style="color: #0000ff;">=”${jdbc.driver}”</span><span style="color: #0000ff;">/&gt;</span><br>        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">property </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">=”jdbcUrl”</span><span style="color: #ff0000;"> value</span><span style="color: #0000ff;">=”${jdbc.url}”</span><span style="color: #0000ff;">/&gt;</span><br>        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">property </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">=”user”</span><span style="color: #ff0000;"> value</span><span style="color: #0000ff;">=”${jdbc.user}”</span><span style="color: #0000ff;">/&gt;</span><br>        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">property </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">=”password”</span><span style="color: #ff0000;"> value</span><span style="color: #0000ff;">=”${jdbc.password}”</span><span style="color: #0000ff;">/&gt;</span><br>    <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">bean</span><span style="color: #0000ff;">&gt;</span><br>    <span style="color: #008000;">&lt;!–</span><span style="color: #008000;">配置JdbcTemplate</span><span style="color: #008000;">–&gt;</span><br>    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">bean </span><span style="color: #ff0000;">id</span><span style="color: #0000ff;">=”jdbcTemplate”</span><span style="color: #ff0000;"> class</span><span style="color: #0000ff;">=”org.springframework.jdbc.core.JdbcTemplate”</span><span style="color: #0000ff;">&gt;</span><br>        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">property </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">=”dataSource”</span><span style="color: #ff0000;"> ref</span><span style="color: #0000ff;">=”dataSource”</span><span style="color: #0000ff;">/&gt;</span><br>    <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">bean</span><span style="color: #0000ff;">&gt;</span><br><br><span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">beans</span><span style="color: #0000ff;">&gt;</span></pre><br></div><p>　　这里使用了c3p0数据源</p><p>　　　　<strong>C3P0有自动回收空闲连接功能；</strong></p><p><strong>　　　　dbcp没有自动回收空闲连接功能；</strong></p><p>　　4、使用spring jdbc完成crud操作</p><div class="cnblogs_code" onclick="cnblogs_code_show('5a342c44-3265-4d3b-916d-8c5eeb7f0136')"><img src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt=""><img src="http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt=""><br><div id="cnblogs_code_open_5a342c44-3265-4d3b-916d-8c5eeb7f0136" class="cnblogs_code_hide"><br><pre><span style="color: #0000ff;">package</span><span style="color: #000000;"> com.shsxt;<br><br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> com.shsxt.po.Account;<br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> com.sun.xml.internal.bind.v2.model.core.ID;<br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> org.apache.commons.lang3.StringUtils;<br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> org.springframework.jdbc.core.BatchPreparedStatementSetter;<br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> org.springframework.jdbc.core.JdbcTemplate;<br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> org.springframework.jdbc.core.PreparedStatementCreator;<br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> org.springframework.jdbc.core.RowMapper;<br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> org.springframework.jdbc.support.GeneratedKeyHolder;<br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> org.springframework.jdbc.support.KeyHolder;<br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> org.springframework.stereotype.Component;<br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> org.springframework.stereotype.Repository;<br><br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> javax.annotation.Resource;<br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> javax.lang.model.element.Name;<br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> java.math.BigDecimal;<br></span><span style="color: #0000ff;">import</span> java.sql.<em><span style="color: #000000;">;<br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> java.util.ArrayList;<br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> java.util.List;<br>@Repository<br></span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> AccountDaoImpl <span style="color: #0000ff;">implements</span><span style="color: #000000;"> AccountDao {<br>​    @Resource<br>​    </span><span style="color: #0000ff;">private</span><span style="color: #000000;"> JdbcTemplate jdbcTemplate;<br><br>    </span><span style="color: #008000;">/**</span><span style="color: #008000;">     </span></em> 添加记录返回受影响行数<br>     <em> <span style="color: #808080;">@param</span><span style="color: #008000;"> account     </span></em> <span style="color: #808080;">@return</span><br>     <span style="color: #008000;"><em>/</em></span><span style="color: #000000;"><br>    @Override<br>    </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> Integer saveAccount(Account account) {<br>        String sql</span>=”insert into account (name,type,money,remark,create_time,update_time,userId) values(?,?,?,?,?,?,?)”<span style="color: #000000;">;<br>        </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> jdbcTemplate.update(sql,account.getName(),account.getType(),account.getMoney(),account.getRemark(),account.getCreate_time(),account.getUpdate_time(),account.getUserId());<br>    }<br><br>    </span><span style="color: #008000;">/**</span><span style="color: #008000;">      添加记录返回主键<br>     <em> </em></span><span style="color: #808080;">@param</span><span style="color: #008000;"> account      </span><span style="color: #808080;">@return</span><br>     <span style="color: #008000;"><em>/</em></span><span style="color: #000000;"><br>    @Override<br>    </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> Integer saveAccountHasPrimaryKey(Account account) {<br>        String sql</span>=”insert into account (name,type,money,remark,create_time,update_time,userId) values(?,?,?,?,?,?,?)”<span style="color: #000000;">;<br>        KeyHolder keyHolder</span>=<span style="color: #0000ff;">new</span><span style="color: #000000;"> GeneratedKeyHolder();<br>        jdbcTemplate.update(</span><span style="color: #0000ff;">new</span><span style="color: #000000;"> PreparedStatementCreator() {<br>            @Override<br>            </span><span style="color: #0000ff;">public</span> PreparedStatement createPreparedStatement(Connection con) <span style="color: #0000ff;">throws</span><span style="color: #000000;"> SQLException {<br>                PreparedStatement ps</span>=<span style="color: #000000;">con.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);<br>                ps.setString(</span>1<span style="color: #000000;">,account.getName());<br>                ps.setString(</span>2<span style="color: #000000;">,account.getType());<br>                ps.setBigDecimal(</span>3<span style="color: #000000;">,account.getMoney());<br>                ps.setString(</span>4<span style="color: #000000;">,account.getRemark());<br>                ps.setObject(</span>5<span style="color: #000000;">,account.getCreate_time());<br>                ps.setObject(</span>6<span style="color: #000000;">,account.getUpdate_time());<br>                ps.setInt(</span>7<span style="color: #000000;">,account.getUserId());<br>                </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> ps;<br>            }<br>        },keyHolder);<br>        </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> keyHolder.getKey().intValue();<br>    }<br><br>    </span><span style="color: #008000;">/**</span><span style="color: #008000;">      批量添加记录<br>     <em> </em></span><span style="color: #808080;">@param</span><span style="color: #008000;"> accounts      </span><span style="color: #808080;">@return</span><br>     <span style="color: #008000;"><em>/</em></span><span style="color: #000000;"><br>    @Override<br>    </span><span style="color: #0000ff;">public</span> Integer saveAccountsBatch(List&lt;Account&gt;<span style="color: #000000;"> accounts) {<br>        String sql</span>=”insert into account (name,type,money,remark,create_time,update_time,userId) values(?,?,?,?,?,?,?)”<span style="color: #000000;">;<br>        </span><span style="color: #0000ff;">return</span> jdbcTemplate.batchUpdate(sql, <span style="color: #0000ff;">new</span><span style="color: #000000;"> BatchPreparedStatementSetter() {<br>            @Override<br>            </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> setValues(PreparedStatement ps, <span style="color: #0000ff;">int</span> i) <span style="color: #0000ff;">throws</span><span style="color: #000000;"> SQLException {<br>                ps.setString(</span>1<span style="color: #000000;">,accounts.get(i).getName());<br>                ps.setString(</span>2<span style="color: #000000;">,accounts.get(i).getType());<br>                ps.setBigDecimal(</span>3<span style="color: #000000;">,accounts.get(i).getMoney());<br>                ps.setString(</span>4<span style="color: #000000;">,accounts.get(i).getRemark());<br>                ps.setObject(</span>5<span style="color: #000000;">,accounts.get(i).getCreate_time());<br>                ps.setObject(</span>6<span style="color: #000000;">,accounts.get(i).getUpdate_time());<br>                ps.setInt(</span>7<span style="color: #000000;">,accounts.get(i).getUserId());<br>            }<br><br>            @Override<br>            </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> getBatchSize() {<br>                </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> accounts.size();<br>            }<br>        }).length;<br>    }<br><br>    </span><span style="color: #008000;">/**</span><span style="color: #008000;">      统计账户记录-聚合查询<br>     <em> </em></span><span style="color: #808080;">@param</span><span style="color: #008000;"> userId      </span><span style="color: #808080;">@return</span><br>     <span style="color: #008000;"><em>/</em></span><span style="color: #000000;"><br>    @Override<br>    </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> Integer countAccountsByUserId(Integer userId) {<br>        String sql</span>=”select count(1) from account where userId=?”<span style="color: #000000;">;<br>        </span><span style="color: #0000ff;">return</span> jdbcTemplate.queryForObject(sql,Integer.<span style="color: #0000ff;">class</span><span style="color: #000000;">,userId);<br>    }<br><br>    </span><span style="color: #008000;">/**</span><span style="color: #008000;">      根据id查询记录详情<br>     <em> </em></span><span style="color: #808080;">@param</span><span style="color: #008000;"> Id      </span><span style="color: #808080;">@return</span><br>     <span style="color: #008000;"><em>/</em></span><span style="color: #000000;"><br>    @Override<br>    </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> Account queryAccountById(Integer Id) {<br>        String sql</span>=”select id,userId,name,type,money,remark,update_time,create_time from account where id=?”<span style="color: #000000;">;<br>         </span><span style="color: #0000ff;">return</span> (Account) jdbcTemplate.queryForObject(sql,<span style="color: #0000ff;">new</span> Object[]{Id}, <span style="color: #0000ff;">new</span> RowMapper&lt;Account&gt;<span style="color: #000000;">() {<br>            @Override<br>            </span><span style="color: #0000ff;">public</span> Account mapRow(ResultSet rs, <span style="color: #0000ff;">int</span> rowNum) <span style="color: #0000ff;">throws</span><span style="color: #000000;"> SQLException {<br>                Account account</span>=<span style="color: #0000ff;">new</span><span style="color: #000000;"> Account();<br>                account.setUpdate_time(rs.getDate(</span>“update_time”<span style="color: #000000;">));<br>                account.setRemark(rs.getString(</span>“remark”<span style="color: #000000;">));<br>                account.setType(rs.getString(</span>“type”<span style="color: #000000;">));<br>                account.setMoney(rs.getBigDecimal(</span>“money”<span style="color: #000000;">));<br>                account.setCreate_time(rs.getDate(</span>“create_time”<span style="color: #000000;">));<br>                account.setId(rs.getInt(</span>“id”<span style="color: #000000;">));<br>                account.setName(rs.getString(</span>“name”<span style="color: #000000;">));<br>                account.setUserId(rs.getInt(</span>“userId”<span style="color: #000000;">));<br>                </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> account;<br>            }<br>        });<br>    }<br><br>    </span><span style="color: #008000;">/**</span><span style="color: #008000;">      多条件查询<br>     <em> </em></span><span style="color: #808080;">@param</span><span style="color: #008000;"> userId      </span><span style="color: #808080;">@param</span><span style="color: #008000;"> type<br>     <em> </em></span><span style="color: #808080;">@param</span><span style="color: #008000;"> createTime      </span><span style="color: #808080;">@param</span><span style="color: #008000;"> aname<br>     <em> </em></span><span style="color: #808080;">@return</span><br>     <span style="color: #008000;">/</span><span style="color: #000000;"><br>    @Override<br>    </span><span style="color: #0000ff;">public</span> List&lt;Account&gt;<span style="color: #000000;"> queryAccountsByParams(Integer userId, String type, String createTime, String aname) {<br>        StringBuffer sql</span>=<span style="color: #0000ff;">new</span> StringBuffer(“select id,userId,name,type,money,remark,update_time,create_time from account where 1=1”<span style="color: #000000;">);<br>        List</span>&lt;Object&gt; params=<span style="color: #0000ff;">new</span> ArrayList&lt;&gt;<span style="color: #000000;">();<br>        </span><span style="color: #0000ff;">if</span> (<span style="color: #0000ff;">null</span>!=<span style="color: #000000;">userId){<br>            sql.append(</span>“ and userId=?”<span style="color: #000000;">);<br>            params.add(userId);<br>        }<br>        </span><span style="color: #0000ff;">if</span><span style="color: #000000;"> (StringUtils.isNotBlank(type)){<br>            sql.append(</span>“ and type=? “<span style="color: #000000;">);<br>            params.add(type);<br>        }<br>        </span><span style="color: #0000ff;">if</span><span style="color: #000000;"> (StringUtils.isNotBlank(createTime)){<br>            sql.append(</span>“ and createTime=?”<span style="color: #000000;">);<br>            params.add(createTime);<br>        }<br>        </span><span style="color: #0000ff;">if</span><span style="color: #000000;"> (StringUtils.isNotBlank(aname)){<br>            sql.append(</span>“ and name=?”<span style="color: #000000;">);<br>            params.add(aname);<br>        }<br>        </span><span style="color: #0000ff;">return</span>  jdbcTemplate.query(sql.toString(), params.toArray(), <span style="color: #0000ff;">new</span> RowMapper&lt;Account&gt;<span style="color: #000000;">() {<br><br>            @Override<br>            </span><span style="color: #0000ff;">public</span> Account mapRow(ResultSet rs, <span style="color: #0000ff;">int</span> rowNum) <span style="color: #0000ff;">throws</span><span style="color: #000000;"> SQLException {<br>                Account account</span>=<span style="color: #0000ff;">new</span><span style="color: #000000;"> Account();<br>                account.setId(rs.getInt(</span>“id”<span style="color: #000000;">));<br>                account.setUserId(rs.getInt(</span>“userId”<span style="color: #000000;">));<br>                account.setName(rs.getString(</span>“name”<span style="color: #000000;">));<br>                account.setCreate_time(rs.getDate(</span>“create_time”<span style="color: #000000;">));<br>                account.setMoney(rs.getBigDecimal(</span>“money”<span style="color: #000000;">));<br>                account.setType(rs.getString(</span>“type”<span style="color: #000000;">));<br>                account.setRemark(rs.getString(</span>“remark”<span style="color: #000000;">));<br>                account.setUpdate_time(rs.getDate(</span>“update_time”<span style="color: #000000;">));<br>                </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> account;<br>            }<br>        });<br><br>    }<br><br>    @Override<br>    </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> Integer updateAccount(Account account) {<br>        String sql</span>=”update account set name=?,type=?,money=? where id=?”<span style="color: #000000;">;<br>        </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> jdbcTemplate.update(sql,account.getName(),account.getType(),account.getMoney(),account.getId());<br>    }<br><br>    </span><span style="color: #008000;">/<strong></strong></span><span style="color: #008000;"><br>     <em> 批量更新     </em> </span><span style="color: #808080;">@param</span><span style="color: #008000;"> accounts<br>     <em> </em></span><span style="color: #808080;">@return</span><br>     <span style="color: #008000;">/</span><span style="color: #000000;"><br>    @Override<br>    </span><span style="color: #0000ff;">public</span> Integer updateAccountsBatch(List&lt;Account&gt;<span style="color: #000000;"> accounts) {<br>        String sql</span>=”update account set name=?,type=?,money=? where id=?”<span style="color: #000000;">;<br>        </span><span style="color: #0000ff;">return</span> jdbcTemplate.batchUpdate(sql, <span style="color: #0000ff;">new</span><span style="color: #000000;"> BatchPreparedStatementSetter() {<br>            @Override<br>            </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> setValues(PreparedStatement ps, <span style="color: #0000ff;">int</span> i) <span style="color: #0000ff;">throws</span><span style="color: #000000;"> SQLException {<br>                ps.setString(</span>1<span style="color: #000000;">,accounts.get(i).getName());<br>                ps.setString(</span>2<span style="color: #000000;">,accounts.get(i).getType());<br>                ps.setBigDecimal(</span>3<span style="color: #000000;">,accounts.get(i).getMoney());<br>                ps.setInt(</span>4<span style="color: #000000;">,accounts.get(i).getId());<br>            }<br><br>            @Override<br>            </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> getBatchSize() {<br>                </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> accounts.size();<br>            }<br>        }).length;<br>    }<br><br>    </span><span style="color: #008000;">/</span><span style="color: #008000;"><br>     <em> 根据id删除记录     </em> </span><span style="color: #808080;">@param</span><span style="color: #008000;"> id<br>     <em> </em></span><span style="color: #808080;">@return</span><br>     <span style="color: #008000;">/</span><span style="color: #000000;"><br>    @Override<br>    </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> Integer deleteAccountById(Integer id) {<br>        String sql</span>=”delete from account where id=?”<span style="color: #000000;">;<br>        </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> jdbcTemplate.update(sql,id);<br>    }<br><br>    </span><span style="color: #008000;">/*<em></em></span><span style="color: #008000;">      批量删除<br>     <em> </em></span><span style="color: #808080;">@param</span><span style="color: #008000;"> ids      </span><span style="color: #808080;">@return</span><br>     <span style="color: #008000;">*/</span><span style="color: #000000;"><br>    @Override<br>    </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> Integer deleteAccountsBatch(Integer[] ids) {<br>        String sql</span>=”delete from account where id=?”<span style="color: #000000;">;<br>        </span><span style="color: #0000ff;">return</span> jdbcTemplate.batchUpdate(sql, <span style="color: #0000ff;">new</span><span style="color: #000000;"> BatchPreparedStatementSetter() {<br>            @Override<br>            </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> setValues(PreparedStatement ps, <span style="color: #0000ff;">int</span> i) <span style="color: #0000ff;">throws</span><span style="color: #000000;"> SQLException {<br>                ps.setInt(</span>1<span style="color: #000000;">,ids[i]);<br>            }<br><br>            @Override<br>            </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> getBatchSize() {<br>                </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> ids.length;<br>            }<br>        }).length;<br>    }<br><br>    @Override<br>    </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> Integer inMoney(Integer sourceId, BigDecimal money) {<br>        String sql</span>=”update account set money=money-? where id=?”<span style="color: #000000;">;<br>        </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> jdbcTemplate.update(sql,money,sourceId);<br>    }<br><br>    @Override<br>    </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> Integer outMoney(Integer targetId, BigDecimal money) {<br>        String sql</span>=”update account set money=money+? where id=?”<span style="color: #000000;">;<br>        </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> jdbcTemplate.update(sql,money,targetId);<br>    }<br>}</span></pre><br></div><br><span class="cnblogs_code_collapse">crud</span></div><p>&nbsp;</p><p><strong>二、spring事务</strong></p><p><strong>　　1、事务的四大特性（ACID）</strong></p><p>　　　　原子性(Atomicity)：共生死，要么全部成功，要么全部失败</p><p>　　　　一致性(Consistency)：事务在执行前后，数据库中数据要保持一致性状态</p><p>　　　　隔离性(Lsolation)：事务与事务之间的执行应当是相互隔离互不影响的</p><p>　　　　持久性(Durability)：事务提交完毕后，数据库中的数据的改变是永久的</p><p>&nbsp;</p><p>　　<strong>2、事务配置</strong></p><p><strong>　　　　</strong>1)、添加坐标依赖</p><p>　　　　　　aop、spring事务</p><p>　　　　2)、XML配置</p><p>　　　　　　修改xml命名空间</p><p>　　　　　　　　xmlns:tx=”<a href="http://www.springframework.org/schema/tx&quot;" target="_blank" rel="noopener">http://www.springframework.org/schema/tx&quot;</a></p><p>　　　　　　　　<a href="http://www.springframework.org/schema/tx" target="_blank" rel="noopener">http://www.springframework.org/schema/tx</a></p><p>　　　　　　　　<a href="http://www.springframework.org/schema/tx/spring-tx.xsd" target="_blank" rel="noopener">http://www.springframework.org/schema/tx/spring-tx.xsd</a></p><div class="cnblogs_code"><br><pre> <span style="color: #008000;">&lt;!–</span><span style="color: #008000;">aop代理</span><span style="color: #008000;">–&gt;</span><br>    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">aop:aspectj-autoproxy</span><span style="color: #0000ff;">/&gt;</span><br>    <span style="color: #008000;">&lt;!–</span><span style="color: #008000;">事务配置</span><span style="color: #008000;">–&gt;</span><br>    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">bean </span><span style="color: #ff0000;">id</span><span style="color: #0000ff;">=”txManager”</span><span style="color: #ff0000;"> class</span><span style="color: #0000ff;">=”org.springframework.jdbc.datasource.DataSourceTransactionManager”</span><span style="color: #0000ff;">&gt;</span><br>        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">property </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">=”dataSource”</span><span style="color: #ff0000;"> ref</span><span style="color: #0000ff;">=”dataSource”</span><span style="color: #0000ff;">/&gt;</span><br>    <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">bean</span><span style="color: #0000ff;">&gt;</span><br><br>    <span style="color: #008000;">&lt;!–</span><span style="color: #008000;">事务通知配置</span><span style="color: #008000;">–&gt;</span><br>    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">tx:advice </span><span style="color: #ff0000;">id</span><span style="color: #0000ff;">=”txAdvice”</span><span style="color: #ff0000;"> transaction-manager</span><span style="color: #0000ff;">=”txManager”</span><span style="color: #0000ff;">&gt;</span><br>        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">tx:attributes</span><span style="color: #0000ff;">&gt;</span><br>            <span style="color: #008000;">&lt;!–</span><span style="color: #008000;">配置事务要拦截的方法</span><span style="color: #008000;">–&gt;</span><br>            <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">tx:method </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">=”save<em>“</em></span><span style="color: #ff0000;"> propagation</span><span style="color: #0000ff;">=”REQUIRED”</span><span style="color: #0000ff;">/&gt;</span><br>            <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">tx:method </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">=”update“</span><span style="color: #ff0000;"> propagation</span><span style="color: #0000ff;">=”REQUIRED”</span><span style="color: #0000ff;">/&gt;</span><br>            <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">tx:method </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">=”del<em>“</em></span><span style="color: #ff0000;"> propagation</span><span style="color: #0000ff;">=”REQUIRED”</span><span style="color: #0000ff;">/&gt;</span><br>        <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">tx:attributes</span><span style="color: #0000ff;">&gt;</span><br>    <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">tx:advice</span><span style="color: #0000ff;">&gt;</span><br>　　&lt;!–aop切面定义–&gt;<br>​    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">aop:config</span><span style="color: #0000ff;">&gt;</span><br>​        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">aop:pointcut </span><span style="color: #ff0000;">id</span><span style="color: #0000ff;">=”cut”</span><span style="color: #ff0000;"> expression</span><span style="color: #0000ff;">=”execution( com.shsxt.service..<em>.</em>(..))”</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">aop:pointcut</span><span style="color: #0000ff;">&gt;</span><br>​        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">aop:advisor </span><span style="color: #ff0000;">advice-ref</span><span style="color: #0000ff;">=”txAdvice”</span><span style="color: #ff0000;"> pointcut-ref</span><span style="color: #0000ff;">=”cut”</span><span style="color: #0000ff;">/&gt;</span><br>​    <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">aop:config</span><span style="color: #0000ff;">&gt;</span><br><br>    <span style="color: #008000;">&lt;!–</span><span style="color: #008000;">注解方式配置事务，可以和xml配置共同使用</span><span style="color: #008000;">–&gt;</span><br>    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">tx:annotation-driven </span><span style="color: #ff0000;">transaction-manager</span><span style="color: #0000ff;">=”txManager”</span><span style="color: #0000ff;">/&gt;</span></pre><br></div><p>&nbsp;</p><p>　　　　3)、注解使用事务，xml配置后在方法上添加注解</p><p>　　　　　　<img src="https://img2018.cnblogs.com/blog/1467494/201809/1467494-20180929232353040-1209337282.png" alt=""></p><p>　　　　4)、事务传播行为</p><p>　　　　　<img src="https://img2018.cnblogs.com/blog/1467494/201809/1467494-20180929232452414-1122981140.png" alt=""></p><p>&nbsp;</p><p>三、远程方法调用RMI</p><p>　　Java RMI 指的是远程方法调用 (Remote Method Invocation)。它是一种机制，能够让在某个 Java 虚拟机上的对象调用另一个 Java 虚拟机中的对象上的方法。 JVM 可以位于相同或不同计算机上，在多个 JVM 中，一个 JVM 可以调用存储在其它 JVM 的对象的方法。</p><p>　　具体实现先不写了，我还没弄清楚。待修改</p><blockquote><p></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;一、spring整合JDBC&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　spring整合jdbc使用了&lt;strong&gt;模版方法设计模式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　&lt;strong&gt;定义一套规范，固定流程不变，传入可变内容&lt;/strong&gt;&lt;/p&gt;
&lt;p
      
    
    </summary>
    
      <category term="Spring" scheme="http://www.dlhblog.online/categories/Spring/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux基本命令和项目发布</title>
    <link href="http://www.dlhblog.online/2018/10/04/Linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E5%92%8C%E9%A1%B9%E7%9B%AE%E5%8F%91%E5%B8%83/"/>
    <id>http://www.dlhblog.online/2018/10/04/Linux基本命令和项目发布/</id>
    <published>2018-10-04T10:28:02.000Z</published>
    <updated>2018-10-04T10:29:39.768Z</updated>
    
    <content type="html"><![CDATA[<p>一、基本命令</p><p>　　date：查看当前日期</p><p>　　pwd：查看当前位置</p><p>　　cd：目录切换</p><p>　　ls|ll：查看当前目录文件与文件夹</p><p>　　mkdir+目录名：创建文件夹（可创建多个）</p><p>　　rm -rf +目录：删除文件夹（可删除多个）</p><p>　　mv 原始目录&nbsp; 修改后目录&nbsp; 文件移动/重命名</p><p>　　vim 文件名：创建或打开文件</p><p>　　　　i，编辑状态；esc退出编辑状态</p><p>　　　&nbsp; &nbsp;：wq&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;写入并退出，：q&nbsp; &nbsp; 退出</p><p>　　cp 源文件地址&nbsp; 目标文件目录：文件copy</p><p>　　cp -r 源文件夹目录&nbsp; 目标文件夹目录：文件夹copy</p><p>&nbsp;</p><p><strong>二、项目发布到Linux配置</strong></p><p>　　1、静态ip配置步骤</p><p>　　　　1.选择桥接模式</p><p>　　　　2.启动后修改网卡文件</p><p>　　　　　　vi&nbsp; /etc/sysconfig/network-scripts/ifcfg-eth0&nbsp; 修改ip地址</p><p>　　　　　　<img src="https://img2018.cnblogs.com/blog/1467494/201810/1467494-20181002120729944-1483516378.png" alt=""></p><p>　　　　　　执行测试</p><p>　　　　　　　　ping 192.168.1.1</p><p>　　　　　　　　ping 192.168.1.188</p><p>　　　　　　　　ping ***.com</p><p>&nbsp;</p><p>　　2、连接终端(我使用了xshell)</p><p>&nbsp;</p><p>　　3、安装jdk</p><p>　　　　yum list|grep jdk&nbsp; &nbsp;查找jdk相关软件</p><p>　　　　yum install jdk.xxx&nbsp; &nbsp; 安装指定版本jdk</p><p>　　4、安装tomcat</p><p>　　　　wget+tomcat下载地址</p><p>　　　　./startup.sh&nbsp; &nbsp;在bin目录下执行启动脚本</p><p>　　　　关闭tomcat：</p><p>　　　　　　./shutdown.sh&nbsp; 执行脚本关闭</p><p>　　　　　　ps -ef|grep tomcat 查找tomcat相关进程</p><p>　　　　　　kill -9&nbsp; 进程号&nbsp; 关闭相关进程</p><p>　　5、防火墙设置</p><p>　　　　service iptables status&nbsp; &nbsp;查看防火墙状态</p><p>　　　　service iptables stop&nbsp; &nbsp;关闭防火墙</p><p>&nbsp;　　　　测试..外部输入ip访问tomcat主页</p><p>&nbsp;</p><p>　　6、mysql安装和配置</p><p>　　　　查看mysql安装历史　　rpm -qa | grep mysql</p><p>　　　　卸载mysql　　yum -y remove <strong><em>mysql</em></strong></p><p>　　　　安装mysql</p><p>　　　　　　yum -y install mysql-server mysql mysql-devel</p><p>&nbsp;</p><p>　　　　启动服务</p><p>　　　　　　service mysqld start　　启动</p><p>　　　　　　service mysqld stop　　停止</p><p>　　　　　　service mysqld restart　　重启</p><p>&nbsp;</p><p>　　　　创建管理员</p><p>　　　　　　mysqladmin&nbsp; -u&nbsp; root&nbsp; &nbsp;password&nbsp; ***</p><p>　　　　执行登录</p><p>　　　　　　mysql&nbsp; -uroot&nbsp; &nbsp;-p***</p><p>　　　　授权</p><p>　　　　　　grant all privileges on <em>.</em> to ‘用户名‘@’%’ identified by ‘密码串’ with grant option;</p><p>　　　　　　FLUSH&nbsp; &nbsp;PRIVILEGES;</p><p>&nbsp;</p><p>&nbsp;　　　　使用sqlyog | navicat 进行连接</p><p>&nbsp;</p><p>　　7、将打包好的war包放到tomcat/webapp目录下，启动tomcat（项目名为站点名）</p><p>&nbsp;</p><p><strong>三、idea Maven项目打包</strong></p><p>　　本地环境&nbsp; dev</p><p>　　测试环境&nbsp; test</p><p>　　生产环境&nbsp; product</p><p>&nbsp;</p><p>　　配置打包标签</p><div class="cnblogs_code"><br><pre><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">profiles</span><span style="color: #0000ff;">&gt;</span><br>        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">profile</span><span style="color: #0000ff;">&gt;</span><br>            <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">id</span><span style="color: #0000ff;">&gt;</span>dev<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">id</span><span style="color: #0000ff;">&gt;</span><br>            <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">properties</span><span style="color: #0000ff;">&gt;</span><br>                <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">env</span><span style="color: #0000ff;">&gt;</span>dev<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">env</span><span style="color: #0000ff;">&gt;</span><br>            <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">properties</span><span style="color: #0000ff;">&gt;</span><br>            <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">activation</span><span style="color: #0000ff;">&gt;</span><br>                <span style="color: #008000;">&lt;!–</span><span style="color: #008000;"><br>                   默认运行开发环境<br>                </span><span style="color: #008000;">–&gt;</span><br>                <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">activeByDefault</span><span style="color: #0000ff;">&gt;</span>true<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">activeByDefault</span><span style="color: #0000ff;">&gt;</span><br>            <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">activation</span><span style="color: #0000ff;">&gt;</span><br>        <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">profile</span><span style="color: #0000ff;">&gt;</span><br>        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">profile</span><span style="color: #0000ff;">&gt;</span><br>            <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">id</span><span style="color: #0000ff;">&gt;</span>test<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">id</span><span style="color: #0000ff;">&gt;</span><br>            <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">properties</span><span style="color: #0000ff;">&gt;</span><br>                <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">env</span><span style="color: #0000ff;">&gt;</span>test<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">env</span><span style="color: #0000ff;">&gt;</span><br>            <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">properties</span><span style="color: #0000ff;">&gt;</span><br>        <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">profile</span><span style="color: #0000ff;">&gt;</span><br>        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">profile</span><span style="color: #0000ff;">&gt;</span><br>            <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">id</span><span style="color: #0000ff;">&gt;</span>product<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">id</span><span style="color: #0000ff;">&gt;</span><br>            <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">properties</span><span style="color: #0000ff;">&gt;</span><br>                <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">env</span><span style="color: #0000ff;">&gt;</span>product<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">env</span><span style="color: #0000ff;">&gt;</span><br>            <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">properties</span><span style="color: #0000ff;">&gt;</span><br>        <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">profile</span><span style="color: #0000ff;">&gt;</span><br>    <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">profiles</span><span style="color: #0000ff;">&gt;</span></pre><br></div><p>　　指定资源文件</p><div class="cnblogs_code"><br><pre><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">resources</span><span style="color: #0000ff;">&gt;</span><br>            <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">resource</span><span style="color: #0000ff;">&gt;</span><br>                <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">directory</span><span style="color: #0000ff;">&gt;</span>src/main/resources/${env}<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">directory</span><span style="color: #0000ff;">&gt;</span><br>            <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">resource</span><span style="color: #0000ff;">&gt;</span><br>            <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">resource</span><span style="color: #0000ff;">&gt;</span><br>                <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">directory</span><span style="color: #0000ff;">&gt;</span>src/main/java<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">directory</span><span style="color: #0000ff;">&gt;</span><br>                <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">includes</span><span style="color: #0000ff;">&gt;</span><br>                    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">include</span><span style="color: #0000ff;">&gt;</span><strong>/*.xml<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">include</span><span style="color: #0000ff;">&gt;</span><br>                    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">include</span><span style="color: #0000ff;">&gt;</span></strong>/<em>.properties<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">include</span><span style="color: #0000ff;">&gt;</span><br>                    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">include</span><span style="color: #0000ff;">&gt;</span>**/</em>.tld<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">include</span><span style="color: #0000ff;">&gt;</span><br>                <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">includes</span><span style="color: #0000ff;">&gt;</span><br>                <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">filtering</span><span style="color: #0000ff;">&gt;</span>false<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">filtering</span><span style="color: #0000ff;">&gt;</span><br>            <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">resource</span><span style="color: #0000ff;">&gt;</span><br>        <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">resources</span><span style="color: #0000ff;">&gt;</span></pre><br></div><p>　　打包命令配置</p><p>　　clean&nbsp; compile package -Dmaven.test.skip=true -Ptest|dev|product</p><p>　　清理编译文件，打包跳过测试文件　test/dev/product 包</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一、基本命令&lt;/p&gt;
&lt;p&gt;　　date：查看当前日期&lt;/p&gt;
&lt;p&gt;　　pwd：查看当前位置&lt;/p&gt;
&lt;p&gt;　　cd：目录切换&lt;/p&gt;
&lt;p&gt;　　ls|ll：查看当前目录文件与文件夹&lt;/p&gt;
&lt;p&gt;　　mkdir+目录名：创建文件夹（可创建多个）&lt;/p&gt;
&lt;p&gt;　　rm 
      
    
    </summary>
    
      <category term="Linux" scheme="http://www.dlhblog.online/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>使用poi读取Excel和写出Excel</title>
    <link href="http://www.dlhblog.online/2018/10/04/%E4%BD%BF%E7%94%A8poi%E8%AF%BB%E5%8F%96Excel%E5%92%8C%E5%86%99%E5%87%BAExcel/"/>
    <id>http://www.dlhblog.online/2018/10/04/使用poi读取Excel和写出Excel/</id>
    <published>2018-10-04T05:23:47.000Z</published>
    <updated>2018-10-04T05:27:41.463Z</updated>
    
    <content type="html"><![CDATA[<item><title>使用poi读取Excel和写出Excel</title><br><br>本次使用到的jar包<br><br>　　　<img src="https://img2018.cnblogs.com/blog/1467494/201810/1467494-20181003113303750-1452640323.png" alt=""><br><br>　　<img src="https://img2018.cnblogs.com/blog/1467494/201810/1467494-20181003113216920-1383675369.png" alt=""><br><br>　　&nbsp;<img src="https://img2018.cnblogs.com/blog/1467494/201810/1467494-20181003113236382-1307387438.png" alt=""><br><br>&nbsp;<br><br><strong>1、从数据库读取数据写出到Excel</strong><br><br><div class="cnblogs_code"><br><pre><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> CreateExcel01 {<br><br>    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 数据库查询</span><br>    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> List&lt;Account&gt;<span style="color: #000000;"> query() {<br>        String sql </span>= “select <em> from tb_account”<span style="color: #000000;">;<br>        List</span>&lt;Account&gt; list = BaseDao.findRows(sql, <span style="color: #0000ff;">null</span>, Account.<span style="color: #0000ff;">class</span><span style="color: #000000;">);<br>        </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> list;<br>    }<br><br>    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 创建Excel</span><br>    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> createExcel(){<br>        </span><span style="color: #0000ff;">try</span><span style="color: #000000;"> {<br>            </span><span style="color: #008000;">//</span><span style="color: #008000;"> 获取桌面路径</span><br>            FileSystemView fsv =<span style="color: #000000;"> FileSystemView.getFileSystemView();<br>            String desktop </span>=<span style="color: #000000;"> fsv.getHomeDirectory().getPath();<br>            String filePath </span>= desktop + “/account.xls”<span style="color: #000000;">;<br><br>            File file </span>= <span style="color: #0000ff;">new</span><span style="color: #000000;"> File(filePath);<br>            OutputStream outputStream </span>= <span style="color: #0000ff;">new</span><span style="color: #000000;"> FileOutputStream(file);<br>            HSSFWorkbook workbook </span>= <span style="color: #0000ff;">new</span><span style="color: #000000;"> HSSFWorkbook();<br>            </span><span style="color: #008000;">//</span><span style="color: #008000;"> 创建一个工作表</span><br>            HSSFSheet sheet = workbook.createSheet(“Sheet1”<span style="color: #000000;">);<br>            </span><span style="color: #008000;">//</span><span style="color: #008000;"> 创建首行/头（第0行开始）</span><br>            HSSFRow head = sheet.createRow(0<span style="color: #000000;">);<br>            String[] header </span>= <span style="color: #0000ff;">new</span> String[]{“账户id”,”账户名称”,”账户类型”,”账户金额”,”账户备注”,”创建时间”,”用户id”,”更新时间”<span style="color: #000000;">};<br>            </span><span style="color: #0000ff;">for</span> (<span style="color: #0000ff;">int</span> i=0;i&lt;header.length;i++<span style="color: #000000;">){<br>                </span><span style="color: #008000;">//</span><span style="color: #008000;"> 设置首行信息</span><br><span style="color: #000000;">                head.createCell(i).setCellValue(header[i]);<br>​            }<br>​            head.setHeightInPoints(</span>20); <span style="color: #008000;">//</span><span style="color: #008000;"> 设置行的高度<br><br>            </span><span style="color: #008000;">//</span><span style="color: #008000;"> 从数据查询返回的集合</span><br>            List&lt;Account&gt; accounts=<span style="color: #000000;">query();<br><br>            </span><span style="color: #008000;">//</span><span style="color: #008000;"> 日期格式化</span><br>            HSSFCellStyle cellStyle2 =<span style="color: #000000;"> workbook.createCellStyle();<br>            HSSFCreationHelper creationHelper </span>=<span style="color: #000000;"> workbook.getCreationHelper();<br>            </span><span style="color: #008000;">//</span><span style="color: #008000;"> 设置日期格式</span><br>            cellStyle2.setDataFormat(creationHelper.createDataFormat().getFormat(“yyyy-MM-dd HH:mm:ss”<span style="color: #000000;">));<br>            sheet.setColumnWidth(</span>3, 15 </em> 256<span style="color: #000000;">);<br>            sheet.setColumnWidth(</span>5, 20 <em> 256<span style="color: #000000;">);<br>            sheet.setColumnWidth(</span>7, 20 </em> 256);<span style="color: #008000;">//</span><span style="color: #008000;"> 设置列的宽度<br><br>            </span><span style="color: #008000;">//</span><span style="color: #008000;"> 保留两位小数</span><br>            HSSFCellStyle cellStyle3 =<span style="color: #000000;"> workbook.createCellStyle();<br>            cellStyle3.setDataFormat(HSSFDataFormat.getBuiltinFormat(</span>“0.00”<span style="color: #000000;">));<br><br>            </span><span style="color: #0000ff;">for</span>(<span style="color: #0000ff;">int</span> i=0;i&lt;accounts.size();i++<span style="color: #000000;">) {<br>                </span><span style="color: #008000;">//</span><span style="color: #008000;"> 创建行（从第一行开始）</span><br>                HSSFRow row1 = sheet.createRow(i + 1<span style="color: #000000;">);<br>                </span><span style="color: #008000;">//</span><span style="color: #008000;"> id</span><br>                row1.createCell(0<span style="color: #000000;">).setCellValue(accounts.get(i).getId());<br>                </span><span style="color: #008000;">//</span><span style="color: #008000;"> 账户名称</span><br>                row1.createCell(1<span style="color: #000000;">).setCellValue(accounts.get(i).getAccountName());<br>                </span><span style="color: #008000;">//</span><span style="color: #008000;"> 账户类型</span><br>                row1.createCell(2<span style="color: #000000;">).setCellValue(accounts.get(i).getAccountType());<br><br>                </span><span style="color: #008000;">//</span><span style="color: #008000;"> 账户金额（保留两位小数）</span><br>                HSSFCell money = row1.createCell(3<span style="color: #000000;">);<br>                money.setCellStyle(cellStyle3);<br>                money.setCellValue(accounts.get(i).getMoney());<br><br>                </span><span style="color: #008000;">//</span><span style="color: #008000;"> 账户备注</span><br>                row1.createCell(4<span style="color: #000000;">).setCellValue(accounts.get(i).getRemark());<br><br>                </span><span style="color: #008000;">//</span><span style="color: #008000;"> 创建时间（格式化时间）</span><br>                HSSFCell date1 = row1.createCell(5<span style="color: #000000;">);<br>                date1.setCellStyle(cellStyle2);<br>                date1.setCellValue(accounts.get(i).getCreateTime());<br><br>                </span><span style="color: #008000;">//</span><span style="color: #008000;"> 用户id</span><br>                row1.createCell(6<span style="color: #000000;">).setCellValue(accounts.get(i).getUid());<br><br>                </span><span style="color: #008000;">//</span><span style="color: #008000;"> 更新时间</span><br>                HSSFCell date2 = row1.createCell(7<span style="color: #000000;">);<br>                date2.setCellStyle(cellStyle2);<br>                date2.setCellValue(accounts.get(i).getUpdateTime());<br>            }<br>            workbook.setActiveSheet(</span>0<span style="color: #000000;">);<br>            workbook.write(outputStream);<br>            outputStream.close();<br>        } </span><span style="color: #0000ff;">catch</span><span style="color: #000000;"> (IOException e1) {<br>            e1.printStackTrace();<br>        }<br>    }<br>}</span></pre><br></div><br><br>&nbsp;<br><br>&nbsp;<br><br><strong>2、从Excel读取写入到数据库</strong><br><br><div class="cnblogs_code"><br><pre><span style="color: #0000ff;">package</span><span style="color: #000000;"> com.shsxt;<br><br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> org.apache.commons.lang3.time.DateFormatUtils;<br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> org.apache.poi.hssf.usermodel.HSSFCell;<br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> org.apache.poi.hssf.usermodel.HSSFDataFormat;<br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> org.apache.poi.hssf.usermodel.HSSFDateUtil;<br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> org.apache.poi.hssf.usermodel.HSSFWorkbook;<br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> org.apache.poi.ss.formula.functions.Rows;<br></span><span style="color: #0000ff;">import</span> org.apache.poi.ss.usermodel.<em><span style="color: #000000;">;<br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> org.apache.poi.xssf.usermodel.XSSFWorkbook;<br><br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> java.io.File;<br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> java.io.FileInputStream;<br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> java.io.IOException;<br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> java.text.DateFormat;<br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> java.text.SimpleDateFormat;<br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> java.util.ArrayList;<br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> java.util.Date;<br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> java.util.Iterator;<br></span><span style="color: #0000ff;">import</span><span style="color: #000000;"> java.util.List;<br><br></span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> ReadExcelToDB {<br><br>    </span><span style="color: #0000ff;">public</span> List&lt;List&lt;Object&gt;&gt;<span style="color: #000000;"> importExcel(File file) {<br>        List</span>&lt;List&lt;Object&gt;&gt; dataList = <span style="color: #0000ff;">null</span><span style="color: #000000;">;<br>        </span><span style="color: #0000ff;">try</span><span style="color: #000000;"> {<br>            dataList </span>= <span style="color: #0000ff;">new</span> ArrayList&lt;List&lt;Object&gt;&gt;<span style="color: #000000;">();<br>            </span><span style="color: #008000;">//</span><span style="color: #008000;"> Excel对象</span><br>            Workbook workbook = <span style="color: #0000ff;">null</span><span style="color: #000000;">;<br>            </span><span style="color: #008000;">//</span><span style="color: #008000;"> 获取文件名</span><br>            String fileName =<span style="color: #000000;"> file.getName().toLowerCase();<br><br>            </span><span style="color: #008000;">//</span><span style="color: #008000;"> 判断后缀</span><br>            <span style="color: #0000ff;">if</span> (fileName.endsWith(“xls”<span style="color: #000000;">)) {<br>                workbook </span>= <span style="color: #0000ff;">new</span> HSSFWorkbook(<span style="color: #0000ff;">new</span><span style="color: #000000;"> FileInputStream(file));<br>            } </span><span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span> (fileName.endsWith(“xlsx”<span style="color: #000000;">)) {<br>                workbook </span>= <span style="color: #0000ff;">new</span> XSSFWorkbook(<span style="color: #0000ff;">new</span><span style="color: #000000;"> FileInputStream(file));<br>            } </span><span style="color: #0000ff;">else</span><span style="color: #000000;"> {<br>                </span><span style="color: #0000ff;">throw</span> <span style="color: #0000ff;">new</span> RuntimeException(“该文件不是Excel文件”<span style="color: #000000;">);<br>            }<br><br>            </span><span style="color: #008000;">//</span><span style="color: #008000;"> 获取Excel中的第一个表格</span><br>            Sheet sheet = workbook.getSheet(“Sheet1”<span style="color: #000000;">);<br>            </span><span style="color: #008000;">//</span><span style="color: #008000;"> 得到表格中的数据的行数，最后一行</span><br>            <span style="color: #0000ff;">int</span> rows =<span style="color: #000000;"> sheet.getLastRowNum();<br>            </span><span style="color: #0000ff;">if</span> (rows == 0<span style="color: #000000;">) {<br>                </span><span style="color: #0000ff;">throw</span> <span style="color: #0000ff;">new</span> RuntimeException(“表格中没有数据”<span style="color: #000000;">);<br>            }<br><br>            Row row </span>= <span style="color: #0000ff;">null</span>; <span style="color: #008000;">//</span><span style="color: #008000;">行对象</span><br>            Iterator&lt;Cell&gt; cols = <span style="color: #0000ff;">null</span>; <span style="color: #008000;">//</span><span style="color: #008000;"> 列对象的迭代器</span><br>            List&lt;Object&gt; list = <span style="color: #0000ff;">null</span><span style="color: #000000;">;<br><br>            </span><span style="color: #0000ff;">for</span> (<span style="color: #0000ff;">int</span> i = 1; i &lt;= rows; i++<span style="color: #000000;">) {<br>                row </span>= sheet.getRow(i); <span style="color: #008000;">//</span><span style="color: #008000;"> 获取第i行</span><br>                <span style="color: #0000ff;">if</span> (row != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {<br>                    cols </span>= row.cellIterator(); <span style="color: #008000;">//</span><span style="color: #008000;"> 获取该行的迭代器</span><br>                    list = <span style="color: #0000ff;">new</span> ArrayList&lt;Object&gt;<span style="color: #000000;">();<br>                    </span><span style="color: #0000ff;">while</span><span style="color: #000000;"> (cols.hasNext()) {<br>                        </span><span style="color: #008000;">//</span><span style="color: #008000;"> 循环获取每一列数据存到list中</span><br><span style="color: #000000;">                        list.add(getCellObj(cols.next()));<br>​                    }<br>​                    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 将这行数据存到集合dataList中</span><br><span style="color: #000000;">                    dataList.add(list);<br>​                }<br>​            }<br>​        } </span><span style="color: #0000ff;">catch</span><span style="color: #000000;"> (IOException e) {<br>​            e.printStackTrace();<br>​        }<br>​        </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> dataList;<br>​    }<br><br>    </span><span style="color: #0000ff;">private</span><span style="color: #000000;"> Object getCellObj(Cell cell) {<br>        </span><span style="color: #0000ff;">if</span> (cell == <span style="color: #0000ff;">null</span><span style="color: #000000;">) {<br>            </span><span style="color: #0000ff;">return</span> “”<span style="color: #000000;">;<br>        }<br>        Object cellObj;<br><br>        </span><span style="color: #0000ff;">switch</span><span style="color: #000000;"> (cell.getCellType()) {<br>            </span><span style="color: #0000ff;">case</span> HSSFCell.CELL_TYPE_STRING: <span style="color: #008000;">//</span><span style="color: #008000;">字符串</span><br>                cellObj =<span style="color: #000000;"> cell.getStringCellValue();<br>                </span><span style="color: #0000ff;">break</span><span style="color: #000000;">;<br>            </span><span style="color: #0000ff;">case</span> HSSFCell.CELL_TYPE_NUMERIC: <span style="color: #008000;">//</span><span style="color: #008000;">数字<br>                </span><span style="color: #008000;">//</span><span style="color: #008000;"> poi把日期类型也归为数字类型</span><br>                <span style="color: #0000ff;">if</span><span style="color: #000000;"> (HSSFDateUtil.isCellDateFormatted(cell)){<br>                    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 获取日期对象并格式化</span><br>                    Date date=<span style="color: #000000;">cell.getDateCellValue();<br>                    cellObj</span>= DateFormatUtils.format(date,”yyyy-MM-dd”<span style="color: #000000;">);<br>                } </span><span style="color: #0000ff;">else</span><span style="color: #000000;">{<br>                    </span><span style="color: #008000;">/</span></em><span style="color: #008000;">CellStyle cellStyle=cell.getCellStyle();<br>                    cellStyle.setDataFormat(HSSFDataFormat.getBuiltinFormat(“0”));</span><span style="color: #008000;">*/</span><span style="color: #000000;"><br>                    cellObj </span>=<span style="color: #000000;"> cell.getNumericCellValue();<br>                }<br>                </span><span style="color: #0000ff;">break</span><span style="color: #000000;">;<br>            </span><span style="color: #0000ff;">case</span> HSSFCell.CELL_TYPE_BOOLEAN: <span style="color: #008000;">//</span><span style="color: #008000;">boolean</span><br>                cellObj =<span style="color: #000000;"> cell.getBooleanCellValue();<br>                </span><span style="color: #0000ff;">break</span><span style="color: #000000;">;<br>            </span><span style="color: #0000ff;">case</span> HSSFCell.CELL_TYPE_FORMULA: <span style="color: #008000;">//</span><span style="color: #008000;">公式</span><br>                cellObj =<span style="color: #000000;"> cell.getCellFormula();<br>                </span><span style="color: #0000ff;">break</span><span style="color: #000000;">;<br>            </span><span style="color: #0000ff;">case</span> HSSFCell.CELL_TYPE_BLANK: <span style="color: #008000;">//</span><span style="color: #008000;">空</span><br>                cellObj = “”<span style="color: #000000;">;<br>                </span><span style="color: #0000ff;">break</span><span style="color: #000000;">;<br>            </span><span style="color: #0000ff;">case</span> HSSFCell.CELL_TYPE_ERROR: <span style="color: #008000;">//</span><span style="color: #008000;">错误</span><br>                cellObj = “”<span style="color: #000000;">;<br>                </span><span style="color: #0000ff;">break</span><span style="color: #000000;">;<br>            </span><span style="color: #0000ff;">default</span><span style="color: #000000;">:<br>                cellObj</span>=””<span style="color: #000000;">;<br>                </span><span style="color: #0000ff;">break</span><span style="color: #000000;">;<br>        }<br>        </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> cellObj;<br>    }<br>}<br><br></span><span style="color: #0000ff;">class</span><span style="color: #000000;"> Test {<br>​    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> main(String[] args) {<br>​        File file </span>= <span style="color: #0000ff;">new</span> File(“C:\Users\Administrator\Desktop\no1.xls”<span style="color: #000000;">);<br>​        ReadExcelToDB readExcelToDB </span>= <span style="color: #0000ff;">new</span><span style="color: #000000;"> ReadExcelToDB();<br>​        List</span>&lt;List&lt;Object&gt;&gt; lists=<span style="color: #000000;">readExcelToDB.importExcel(file);<br>​        </span><span style="color: #0000ff;">for</span> (List&lt;Object&gt;<span style="color: #000000;"> ObjList:lists){<br>​            </span><span style="color: #0000ff;">for</span><span style="color: #000000;"> (Object object:ObjList){<br>​                System.out.println(object);<br>​            }<br>　　　　　　 System.out.println(“<strong><strong>__</strong></strong>“);　　<br>​        }<br>​    }<br>}</span></pre><br></div><br><br>&nbsp;<br><br>读取的结果是：<br><br><img src="https://img2018.cnblogs.com/blog/1467494/201810/1467494-20181003114043342-762137111.png" alt=""><br><br>&nbsp;<br><br>调用数据库插入就可以往插入到数据库了<br></item>]]></content>
    
    <summary type="html">
    
      
      
        &lt;item&gt;&lt;title&gt;使用poi读取Excel和写出Excel&lt;/title&gt;&lt;br&gt;&lt;br&gt;本次使用到的jar包&lt;br&gt;&lt;br&gt;　　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1467494/201810/1467494-2018
      
    
    </summary>
    
      <category term="poi" scheme="http://www.dlhblog.online/categories/poi/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello Hexo</title>
    <link href="http://www.dlhblog.online/2018/10/03/hello-hexo/"/>
    <id>http://www.dlhblog.online/2018/10/03/hello-hexo/</id>
    <published>2018-10-03T06:25:42.806Z</published>
    <updated>2018-10-05T10:00:51.670Z</updated>
    
    <content type="html"><![CDATA[<p>​    花了一天半时间终于把这个博客建好了，中间遇到了很多坑，网上搜了大量资源，略有不足，以后想到了再改改漂亮吧。</p><p>​    我转了几篇之前在博客园的博客到这里，都是一篇篇从html转为markdown转换来的，但是发现好多文章的图片无法正常显示，暂时也没有更好的办法，作罢，不过以后我都会在这里更新。</p><p>​    贴一下我看的各位博主写的教程链接，方便以后出现问题可以解决。</p><p>​    1、这是我看的第一篇，初次接触给我帮助很大</p><p>​    <a href="https://blog.csdn.net/dgut_guangdian/article/details/79326107" target="_blank" rel="noopener">https://blog.csdn.net/dgut_guangdian/article/details/79326107</a></p><p>​    2、这几篇修改了next主题样式，添加了些好玩的东西</p><p>​    <a href="https://blog.csdn.net/zhy421202048/article/details/77877580" target="_blank" rel="noopener">https://blog.csdn.net/zhy421202048/article/details/77877580</a></p><p>​    <a href="https://blog.csdn.net/w_ngzeqi/article/details/73863543" target="_blank" rel="noopener">https://blog.csdn.net/w_ngzeqi/article/details/73863543</a></p><p>​    <a href="https://blog.csdn.net/csdnSR/article/details/78300820" target="_blank" rel="noopener">https://blog.csdn.net/csdnSR/article/details/78300820</a></p><p>​    <a href="https://www.jianshu.com/p/3a05351a37dc" target="_blank" rel="noopener">https://www.jianshu.com/p/3a05351a37dc</a></p><p>​    </p><p>​    3、在添加gitment评论时对我有帮助的（但我好像至今无法使用…）</p><p>​    <a href="https://www.cnblogs.com/pangguoming/p/8094815.html" target="_blank" rel="noopener">https://www.cnblogs.com/pangguoming/p/8094815.html</a></p><p>​    <a href="https://www.jianshu.com/p/57afa4844aaa" target="_blank" rel="noopener">https://www.jianshu.com/p/57afa4844aaa</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    花了一天半时间终于把这个博客建好了，中间遇到了很多坑，网上搜了大量资源，略有不足，以后想到了再改改漂亮吧。&lt;/p&gt;
&lt;p&gt;​    我转了几篇之前在博客园的博客到这里，都是一篇篇从html转为markdown转换来的，但是发现好多文章的图片无法正常显示，暂时也没有
      
    
    </summary>
    
    
  </entry>
  
</feed>
