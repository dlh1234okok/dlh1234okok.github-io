<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>这夜景</title>
  
  <subtitle>blog</subtitle>
  <link href="/dlh1234okok.github.io/atom.xml" rel="self"/>
  
  <link href="http://www.dlhblog.online/"/>
  <updated>2018-10-30T08:56:00.347Z</updated>
  <id>http://www.dlhblog.online/</id>
  
  <author>
    <name>li-hong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux常用命令</title>
    <link href="http://www.dlhblog.online/2018/10/29/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://www.dlhblog.online/2018/10/29/Linux常用命令/</id>
    <published>2018-10-29T11:18:14.000Z</published>
    <updated>2018-10-30T08:56:00.347Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux目录结构"><a href="#Linux目录结构" class="headerlink" title="Linux目录结构"></a>Linux目录结构</h1><p><img src="http://pg0l2q23d.bkt.clouddn.com/l1.jpg" alt=""></p><ul><li>bin  存放二进制可执行文件(ls,cat,mkdir等)                                                           </li><li>boot  存放用于系统引导时使用的各种文件</li><li>dev 用于存放设备文件</li><li>etc  存放系统配置文件</li><li>home 存放所有用户文件的根目录</li><li>lib  存放跟文件系统中的程序运行所需要的共享库及内核模块</li><li>mnt  系统管理员安装临时文件系统的安装点</li><li>opt  额外安装的可选应用程序包所放置的位置</li><li>proc  虚拟文件系统，存放当前内存的映射</li><li>root  超级用户目录</li><li>sbin  存放二进制可执行文件，只有root才能访问</li><li>tmp  用于存放各种临时文件</li><li>usr  用于存放系统应用程序，比较重要的目录/usr/local 本地管理员软件安装目录</li><li>var  用于存放运行时需要改变数据的文件</li></ul><h1 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h1><p>切换目录：cd + 目录路径</p><p>查看当前目录完整路径： pwd</p><p>返回父目录：    cd ..</p><p>新建目录：    <strong>mkdir</strong>+目录名</p><hr><p>查看当前目录下拥有的子目录和文件： <strong>ls</strong></p><p>查看当前目录下拥有的子目录和文件的详情信息：ls -l 或 <strong>ll</strong></p><p>拷贝目录：    <strong>cp</strong>  source  dest -r（递归）</p><hr><p>删除目录：    <strong>rmdir</strong> directory（只能删除空目录）</p><p>删除非空目录或文件：    <strong>rm</strong>    -rf    dir</p><hr><p>移动文件或目录：<strong>mv</strong> + 目录/文件名字 + 其他路径</p><p>更改文件或目录的名字：<strong>mv</strong> + 旧目录名字 + 新目录名字</p><h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><p>创建一个空文件：    <strong>touch</strong>   文件名</p><p>复制文件：    <strong>cp</strong>     文件名    复制的文件名</p><p>复制目录：    复制文件，加个-r 参数，代表遍历复制</p><hr><p>删除文件：    <strong>rm</strong>   文件名（加 –f参数，直接删除，无需确认）</p><p>删除目录：    删除文件加上-r参数，遍历删除</p><hr><p>查看目录：ls/ll    ls -l == ll</p><p>查看目录下所有东西（包括隐藏文件）：    ls  -al  （ll -a）</p><hr><p>查看文件内容：<strong>cat</strong>  filename（一次显示文件所有内容），当文件较大时，可以使用<strong>more</strong>  或  <strong>less</strong></p><p>​    <strong>more</strong> filename 该命令一次显示一屏文本，满屏后停下来，并且在屏幕的底部出现一个提示信息，给出至今己显示的该文件的百分比。</p><ol><li>按Space键，显示文本的下一屏内容。</li><li>按Enier键，只显示文本的下一行内容。</li><li>按B键，显示上一屏内容。</li><li>按Q键，退出。</li></ol><p>​    <strong>less</strong>命令 与 more命令 非常类似        <strong>less</strong> filename:</p><ol><li>h 显示帮助界面 </li><li>Q 退出less 命令 </li><li>u 向后滚动半页 </li><li>d 向前翻半页 </li><li>空格键 滚动一页 </li><li>b 向后翻一页 </li><li>回车键 滚动一行</li><li>[pagedown]： 向下翻动一页 </li><li>[pageup]： 向上翻动一页</li><li>上下键，向上一行，向下一行</li></ol><hr><p>从头打印文件内容：    <strong>head</strong>  -10 filename     打印文件1到10行</p><p>从尾部打印文件内容：    <strong>tail</strong> -10 filename         打印文件最后10行</p><p><strong>注意</strong>：tail 还经常可以拿来查看文件的内容变化    加-f参数，<strong>tail</strong> –f filename</p><p>查找文件或目录：    <strong>find</strong>  pathname –name filename（可以按正则表达式来查找）</p><h1 id="文本编辑"><a href="#文本编辑" class="headerlink" title="文本编辑"></a>文本编辑</h1><p><strong>编辑模式</strong></p><ul><li>vi  filename :打开或新建文件，并将光标置于第一行首 </li><li>vi +n filename ：打开文件，并将光标置于第n行首 </li><li>vi + filename ：打开文件，并将光标置于最后一行首 </li><li>vi +/pattern filename：打开文件，并将光标置于第一个与 pattern匹配的串处 </li></ul><p><strong>命令行模式</strong></p><ul><li>w保存 </li><li>q退出 </li><li>q!：不保存文件并退出vi </li><li>在VI的命令模式下输入“:set nu”，就有行号了。 </li><li>在VI的命令模式下输入“:set nonu”，取消行号。 </li></ul><p><strong>一般模式</strong></p><ul><li>yy 复制光标所在行(常用) </li><li>nyy 复制光标所在行的向下n行，例如， 20yy则是复制20行(常用) </li><li>p,P   p为复制的数据粘贴在光标下一行， P则为粘贴在光标上一行(常用)</li><li>G:光标移至第最后一行</li><li>nG：光标移动至第N行行首</li><li>n+：光标下移n行 </li><li>n-：光标上移n行 </li><li>H ：光标移至屏幕顶行 </li><li>M ：光标移至屏幕中间行 </li><li>L ：光标移至屏幕最后行 </li><li>dd：删除 行 </li><li>x或X：删除一个字符，x删除光标后的，而X删除光标前的 </li><li>u 恢复前一个动作(常用)</li><li>删除第N行到第M行 :  N,Md</li></ul><h1 id="文件传输"><a href="#文件传输" class="headerlink" title="文件传输"></a>文件传输</h1><p><strong>将本地文件复制到远程机器</strong></p><p><strong>scp</strong> local_file    remote_username@remote_ip:remote_folder </p><p><strong>将本地目录复制到远程机器</strong></p><p><strong>scp</strong> -r local_folder remote_username@remote_ip:remote_folder</p><p>例：scp  -r  user  <a href="mailto:root@192.168.32.100" target="_blank" rel="noopener">root@192.168.32.100</a>:/opt/</p><h1 id="网络指令"><a href="#网络指令" class="headerlink" title="网络指令"></a>网络指令</h1><p>查看网络配置信息：<strong>ifconfig</strong></p><p>测试与目标主机的连通性：<strong>ping</strong> remote_ip</p><p><strong>显示各种网络相关信息</strong></p><p>命令：<strong>netstat</strong> </p><ul><li>-<strong>a</strong> (all)显示所有选项，默认不显示LISTEN相关</li><li>-<strong>t</strong> (tcp)仅显示tcp相关选项</li><li>-u (udp)仅显示udp相关选项</li><li>-<strong>n</strong> 拒绝显示别名，能显示数字的全部转化成数字。</li><li><p>-l 仅列出有在 Listen (监听) 的服務状态</p></li><li><p>-<strong>p</strong> 显示建立相关链接的程序名</p></li><li>-r 显示路由信息，路由表</li><li> -e 显示扩展信息，例如uid等</li><li>-s 按各个协议进行统计</li><li> -c 每隔一个固定时间，执行该netstat命令。</li></ul><h1 id="系统配置"><a href="#系统配置" class="headerlink" title="系统配置"></a>系统配置</h1><p><strong>修改主机名</strong></p><p>​    vim /etc/sysconfig/network    重启机器后才能生效</p><p>​    <img src="http://pg0l2q23d.bkt.clouddn.com/hosts.jpg" alt=""></p><p><strong>DNS配置</strong></p><p>​    hosts文件的作用相当于DNS，提供IP地址hostname的对应,可在这个文件里添加映射。域名解析</p><p>​    vi /etc/hosts<img src="http://pg0l2q23d.bkt.clouddn.com/hosts2.jpg" alt=""></p><p><strong>DNS服务器地址文件</strong>：/etc/resolv.conf</p><h1 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h1><p>Linux系统的环境变量是在<strong>/etc/profile</strong>文件里配置。</p><p>​    首先考虑一个问题，问什么我们先前敲的yum, service,date,useradd等等，可以直接使用，系统怎么知道这些命令对应的程序是放在哪里的呢？</p><p>​    这是由于无论是windows系统还是linux系统，都有一个叫做path的系统环境变量，当我们在敲命令时，系统会到path对应的目录下寻找，找到的话就会执行，找不到就会报没有这个命令。如下图：</p><p><img src="http://pg0l2q23d.bkt.clouddn.com/%E7%8E%AF%E5%A2%831.png" alt=""></p><p>我们可以查看一下，系统一共在哪些目录里寻找命令对应的程序。</p><p>命令：echo $path</p><p><img src="http://pg0l2q23d.bkt.clouddn.com/%E7%8E%AF%E5%A2%832.png" alt=""></p><p>​    </p><h1 id="服务操作"><a href="#服务操作" class="headerlink" title="服务操作"></a>服务操作</h1><p><strong>列出所有服务</strong>：chkconfig</p><p><img src="http://pg0l2q23d.bkt.clouddn.com/%E6%9C%8D%E5%8A%A11.png" alt=""></p><p>各数字代表的系统初始化级别含义：</p><p>​        0：停机状态</p><p>　　1：单用户模式，root账户进行操作</p><p>　　2：多用户，不能使用net file system，一般很少用</p><p>　　3：完全多用户，一部分启动，一部分不启动，命令行界面</p><p>　　4：未使用、未定义的保留模式</p><p>　　5：图形化，3级别中启动的进程都启动，并且会启动一部分图形界面进程。</p><p>　　6：停止所有进程，卸载文件系统，重新启动(reboot)</p><p>　　这些级别中1、2、4很少用，相对而言0、3、5、6用的会较多。3级别和5级别除了桌面相关的进程外没有什么区别。为了减少资源占用，推荐都用3级别</p><p>注意 ：linux默认级别为3，不要把initdefault 设置为0 和 6 </p><h1 id="服务操作-1"><a href="#服务操作-1" class="headerlink" title="服务操作"></a>服务操作</h1><p><strong>service</strong> 服务名 start/stop/status/restart</p><p><strong>关闭防火墙</strong> ：service iptables start/stop/status</p><p><strong>服务初执行等级更改</strong>：    chkconfig –level 2345 name  off|on</p><p>​    若不加级别，默认是2345级别</p><p>​    命令：chkconfig name on|off</p><h1 id="进程操作"><a href="#进程操作" class="headerlink" title="进程操作"></a>进程操作</h1><p>查看所有进程：    <strong>ps</strong>  -aux</p><p>​    -a 列出所有</p><p>​       -u 列出用户</p><p>​       -x 详细列出，如cpu、内存等</p><p>​    - e </p><p>​     -f</p><p>命令： <strong>ps</strong>  - ef  |  <strong>grep</strong> ssh</p><p> 查看所有进程里CMD是ssh 的进程信息</p><p>杀死进程： <strong>kill</strong> pid </p><p><strong>-9</strong>：强制杀死</p><p>ps 命令先查出对应程序的PID或PPID ，然后杀死掉进程</p><h1 id="其他常用命令"><a href="#其他常用命令" class="headerlink" title="其他常用命令"></a>其他常用命令</h1><p>wget用法:wget [option] 网址  -O  指定下载保存的路径</p><p><strong>tar</strong> </p><p>​       -z    gzip进行解压或压缩，带.gz需要加，压缩出来.gz也需要加</p><p>​       -x    解压</p><p>​       -c    压缩</p><p>​       -f    目标文件，压缩文件新命名或解压文件名</p><p>​       -v   解压缩过程信息打印</p><p><strong>解压命令</strong>：tar  -zvxf  xxxx.tar.gz</p><p><strong>压缩命令</strong>：tar -zcf 压缩包命名 压缩目标</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Linux目录结构&quot;&gt;&lt;a href=&quot;#Linux目录结构&quot; class=&quot;headerlink&quot; title=&quot;Linux目录结构&quot;&gt;&lt;/a&gt;Linux目录结构&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://pg0l2q23d.bkt.clouddn.com
      
    
    </summary>
    
      <category term="Linux" scheme="http://www.dlhblog.online/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>JDK8-Lambda</title>
    <link href="http://www.dlhblog.online/2018/10/27/JDK8-Lambda/"/>
    <id>http://www.dlhblog.online/2018/10/27/JDK8-Lambda/</id>
    <published>2018-10-27T12:42:25.000Z</published>
    <updated>2018-10-27T13:02:32.029Z</updated>
    
    <content type="html"><![CDATA[<p>​    Lambda 表达式是一个匿名函数， 我们可以把 Lambda 表达式理解为是一段可以传递的代码（将代码像数据一样进行传递）。 可以写出更简洁、 更灵活的代码。 作为一种更紧凑的代码风格， 使得 Java 语言表达能力得到了提升。Java8 中引入了一个新的操作符”-&gt;”该操作符称为箭头操作符或 Lambda 操作符， 箭头操作符将 Lambda表达式拆分为两部分：<br>​    左侧： Lambda 表达式的参数列表。 对应接口中抽象方法的参数列表。<br>​    右侧： Lambda 表达式中所需要执行的功能， 即 Lambda 体。 对应接口中抽象方法的实现 。</p><h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><h2 id="无参数无返回值"><a href="#无参数无返回值" class="headerlink" title="无参数无返回值"></a>无参数无返回值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 以前的写法</span></span><br><span class="line">    Runnable r1 = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"线程1在奔跑"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    r1.run();</span><br><span class="line">    System.out.println(<span class="string">"-----------------"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参数，无返回值// 括号相当于new Runnable()；-&gt; 相当于run方法；后面是方法体</span></span><br><span class="line">    Runnable r2 = () -&gt; System.out.println(<span class="string">"线程2在奔跑"</span>);</span><br><span class="line">    r2.run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的lambda表达式中，括号相当于new Runnable()；-&gt; 相当于run方法；后面是方法体</p><h2 id="有一个参数，无返回值"><a href="#有一个参数，无返回值" class="headerlink" title="有一个参数，无返回值"></a>有一个参数，无返回值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 有一个参数，无返回值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Consumer&lt;String&gt; consumer = (s) -&gt; System.out.println(s);</span><br><span class="line">    consumer.accept(<span class="string">"hello"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 只有一个参数时，括号可以不写，方法体中只有一行语句时，花括号可以不写</span></span><br><span class="line">Consumer&lt;String&gt; consumer = s -&gt; System.out.println(s);</span><br></pre></td></tr></table></figure><h2 id="有两个参数，方法体中有多条语句"><a href="#有两个参数，方法体中有多条语句" class="headerlink" title="有两个参数，方法体中有多条语句"></a>有两个参数，方法体中有多条语句</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 有两个参数，方法体中有多条语句</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Comparator&lt;Integer&gt; comparator = (x, y) -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">        <span class="keyword">return</span> Integer.compare(x, y);</span><br><span class="line">    &#125;;</span><br><span class="line">    System.out.println(comparator.compare(<span class="number">4</span>, <span class="number">3</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Lambda表达式需要“函数式接口”的支持"><a href="#Lambda表达式需要“函数式接口”的支持" class="headerlink" title="Lambda表达式需要“函数式接口”的支持"></a>Lambda表达式需要“函数式接口”的支持</h1><p>​    接口中只有一个抽象方法的接口，称为函数式接口，其中静态方法和默认方法不算。</p><p>​    内置的函数式接口都有注解<code>@FunctionalInterface</code>修饰，可以使用该注解检查是否是函数式接口。</p><h2 id="自定义函数式接口"><a href="#自定义函数式接口" class="headerlink" title="自定义函数式接口"></a>自定义函数式接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义函数式接口</span></span><br><span class="line"><span class="comment"> * （只有一个抽象方法的接口，可以使用注解<span class="doctag">@FunctionalInterface</span>修饰检查）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test05</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用lamad表达式之前的形式</span></span><br><span class="line">    Integer res = operation(<span class="number">200</span>, <span class="keyword">new</span> MyFunction&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">getValue</span><span class="params">(Integer o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> o * o;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    System.out.println(res);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用lamad表达式之后的形式</span></span><br><span class="line">    Integer result = operation(<span class="number">100</span>, x -&gt; x * x);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Integer <span class="title">operation</span><span class="params">(Integer num, MyFunction&lt;Integer&gt; mf)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mf.getValue(num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyFunction</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getValue</span><span class="params">(T o)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四大内置核心函数式接口"><a href="#四大内置核心函数式接口" class="headerlink" title="四大内置核心函数式接口"></a>四大内置核心函数式接口</h1><p>消费性接口：需要给它一个参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Consumer&lt;T&gt;消费型接口</span></span><br><span class="line"><span class="comment"> * void accept(T t);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test06</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Consumer&lt;Integer&gt; consumer = <span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">            System.out.println(integer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    consumer.accept(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    Consumer&lt;Integer&gt; consumer1 = (x) -&gt; System.out.println(x &lt; <span class="number">2</span>);</span><br><span class="line">    consumer1.accept(<span class="number">6</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>供给型接口：自己给你数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Supplier&lt;T&gt;供给型接口</span></span><br><span class="line"><span class="comment"> * T get();</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test07</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Supplier&lt;Integer&gt; supplier = <span class="keyword">new</span> Supplier&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">int</span>) (Math.random() * <span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    System.out.println(supplier.get());</span><br><span class="line"></span><br><span class="line">    Supplier&lt;Double&gt; sup = () -&gt; (Double) (Math.random() * <span class="number">100</span>);</span><br><span class="line">    System.out.println(sup.get());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 向集合中添加十个随机数并遍历</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test08</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Supplier&lt;Integer&gt; supplier = () -&gt; (<span class="keyword">int</span>) (Math.random() * <span class="number">10</span>);</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            list.add(supplier.get());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Integer integer : list)&#123;</span><br><span class="line">            System.out.print(integer+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>函数型接口：给它一个数据，返回一个数据，泛型中的类型要和传入返回的类型一致</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Function&lt;T,R&gt;函数型接口</span></span><br><span class="line"><span class="comment"> *      R apply(T t);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test09</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String str = <span class="string">"123456"</span>;</span><br><span class="line">    Function&lt;String,Integer&gt; function = (s) -&gt; Integer.valueOf(s);</span><br><span class="line">    System.out.println(function.apply(str));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>断言型接口：和其他断言一样，返回判断结果boolean类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Predicate&lt;T&gt;断言型接口</span></span><br><span class="line"><span class="comment"> *      boolean test(T t)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test10</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Predicate&lt;String&gt; predicate = (s)-&gt; s.contains(<span class="string">"a"</span>);</span><br><span class="line">    System.out.println(predicate.test(<span class="string">"test"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    Lambda 表达式是一个匿名函数， 我们可以把 Lambda 表达式理解为是一段可以传递的代码（将代码像数据一样进行传递）。 可以写出更简洁、 更灵活的代码。 作为一种更紧凑的代码风格， 使得 Java 语言表达能力得到了提升。Java8 中引入了一个新的操作符
      
    
    </summary>
    
      <category term="java" scheme="http://www.dlhblog.online/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring-Data-Redis操作redis服务器</title>
    <link href="http://www.dlhblog.online/2018/10/27/Spring-Data-Redis%E6%93%8D%E4%BD%9Credis%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://www.dlhblog.online/2018/10/27/Spring-Data-Redis操作redis服务器/</id>
    <published>2018-10-27T08:15:44.000Z</published>
    <updated>2018-10-27T08:22:32.469Z</updated>
    
    <content type="html"><![CDATA[<p>进行spring操作前，需要将redis配置中的所有127.0.0.1改为本机ip</p><h1 id="加入坐标依赖"><a href="#加入坐标依赖" class="headerlink" title="加入坐标依赖"></a>加入坐标依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="添加application-xml配置文件"><a href="#添加application-xml配置文件" class="headerlink" title="添加application.xml配置文件"></a>添加application.xml配置文件</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 连接池配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisPoolConfig"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"redis.clients.jedis.JedisPoolConfig"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 最大连接数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxTotal"</span> <span class="attr">value</span>=<span class="string">"1024"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 最大 空闲连接数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"200"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 获取连接时最大等待毫秒数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWaitMillis"</span> <span class="attr">value</span>=<span class="string">"10000"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在获取连接时检查有效性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnBorrow"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 客户端连接工厂 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisConnFactory"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.connection.jedis.JedisConnectionFactory"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">p:use-pool</span>=<span class="string">"true"</span> <span class="attr">p:host-name</span>=<span class="string">"192.168.1.38"</span> <span class="attr">p:port</span>=<span class="string">"6380"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">p:password</span>=<span class="string">"123456"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 连接池引用 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"poolConfig"</span> <span class="attr">ref</span>=<span class="string">"jedisPoolConfig"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- redisTemplate 配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"redisTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.core.RedisTemplate"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">p:connection-factory-ref</span>=<span class="string">"jedisConnFactory"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置序列化操作 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"keySerializer"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.serializer.StringRedisSerializer"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"valueSerializer"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.serializer.StringRedisSerializer"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSpringDataRedis</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    RedisTemplate&lt;String,Object&gt; redisTemplate;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ValueOperations valueOperations = redisTemplate.opsForValue();</span><br><span class="line">        valueOperations.set(<span class="string">"redis02"</span>, <span class="string">"hello redis"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">// 过期秒数实现</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        BoundValueOperations&lt;String, Object&gt; Operations = redisTemplate.boundValueOps(<span class="string">"18236741290:12 3456"</span>);</span><br><span class="line">        Operations.append(<span class="string">"123456"</span>);</span><br><span class="line">        System.out.println(<span class="string">"验证码:"</span> + Operations.get());</span><br><span class="line">        <span class="comment">// 设置过期时间 60 秒后过期</span></span><br><span class="line">        Operations.expire(<span class="number">60</span>, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Spring环境下读写分离配置"><a href="#Spring环境下读写分离配置" class="headerlink" title="Spring环境下读写分离配置"></a>Spring环境下读写分离配置</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 连接池配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisPoolConfig"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"redis.clients.jedis.JedisPoolConfig"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 最大连接数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxTotal"</span> <span class="attr">value</span>=<span class="string">"1024"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 最大 空闲连接数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"200"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 获取连接时最大等待毫秒数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWaitMillis"</span> <span class="attr">value</span>=<span class="string">"10000"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在获取连接时检查有效性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnBorrow"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"redisSentinelConfiguration"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.connection.RedisSentinelConfiguration"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"master"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.connection.RedisNode"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"mymaster"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sentinels"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.connection.RedisNode"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"192.168.1.38"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"6380"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.connection.RedisNode"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"192.168.1.38"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"6379"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 客户端连接工厂 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisConnFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.connection.jedis.JedisConnectionFactory"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 连接池引用 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"poolConfig"</span> <span class="attr">ref</span>=<span class="string">"jedisPoolConfig"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"sentinelConfig"</span> <span class="attr">ref</span>=<span class="string">"redisSentinelConfiguration"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- redisTemplate 配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"redisTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.core.RedisTemplate"</span> <span class="attr">p:connection-factory-ref</span>=<span class="string">"jedisConnFactory"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置序列化操作 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"keySerializer"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.serializer.StringRedisSerializer"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"valueSerializer"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashKeySerializer"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.serializer.StringRedisSerializer"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashValueSerializer"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"redisUtils"</span> <span class="attr">class</span>=<span class="string">"com.shsxt.utils.RedisUtils"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"redisTemplate"</span> <span class="attr">ref</span>=<span class="string">"redisTemplate"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;进行spring操作前，需要将redis配置中的所有127.0.0.1改为本机ip&lt;/p&gt;
&lt;h1 id=&quot;加入坐标依赖&quot;&gt;&lt;a href=&quot;#加入坐标依赖&quot; class=&quot;headerlink&quot; title=&quot;加入坐标依赖&quot;&gt;&lt;/a&gt;加入坐标依赖&lt;/h1&gt;&lt;figure 
      
    
    </summary>
    
      <category term="redis" scheme="http://www.dlhblog.online/categories/redis/"/>
    
    
  </entry>
  
  <entry>
    <title>Redis-JAVA客户端</title>
    <link href="http://www.dlhblog.online/2018/10/27/Redis%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    <id>http://www.dlhblog.online/2018/10/27/Redis客户端/</id>
    <published>2018-10-27T08:06:06.000Z</published>
    <updated>2018-10-27T08:15:15.699Z</updated>
    
    <content type="html"><![CDATA[<p>​    在前面我们添加的服务器访问密码和bind的设置就是为了连接客户端准备的。</p><h1 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="通过junit简单测试"><a href="#通过junit简单测试" class="headerlink" title="通过junit简单测试"></a>通过junit简单测试</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建redis客户端连接对象</span></span><br><span class="line">    Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"192.168.1.38"</span>, <span class="number">6380</span>);</span><br><span class="line">    <span class="comment">// 设置认证密码</span></span><br><span class="line">    jedis.auth(<span class="string">"123456"</span>);</span><br><span class="line">    <span class="comment">// 批量添加string类型数据</span></span><br><span class="line">    jedis.mset(<span class="string">"name"</span>, <span class="string">"zs"</span>, <span class="string">"age"</span>, <span class="string">"20"</span>, <span class="string">"address"</span>, <span class="string">"shanghai"</span>);</span><br><span class="line">    <span class="comment">// 获取缓存数据并输出</span></span><br><span class="line">    System.out.println(jedis.get(<span class="string">"name"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="通过redis连接池获取连接对象并操作服务器"><a href="#通过redis连接池获取连接对象并操作服务器" class="headerlink" title="通过redis连接池获取连接对象并操作服务器"></a>通过redis连接池获取连接对象并操作服务器</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 初始化redis客户端连接池</span></span><br><span class="line">    JedisPool jedisPool = <span class="keyword">new</span> JedisPool(<span class="keyword">new</span> JedisPoolConfig(), <span class="string">"192.168.1.38"</span>, <span class="number">6380</span>, <span class="number">10000</span>, <span class="string">"123456"</span>);</span><br><span class="line">    <span class="comment">// 从连接池获取连接</span></span><br><span class="line">    Jedis jedis = jedisPool.getResource();</span><br><span class="line">    jedis.set(<span class="string">"name"</span>,<span class="string">"ls"</span>);</span><br><span class="line">    System.out.println(jedis.get(<span class="string">"name"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="封装RedisUtil对外提供连接对象获取方法"><a href="#封装RedisUtil对外提供连接对象获取方法" class="headerlink" title="封装RedisUtil对外提供连接对象获取方法"></a>封装RedisUtil对外提供连接对象获取方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// redis服务器ip</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String IP = <span class="string">"192.168.1.38"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// redis端口号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> PORT = <span class="number">6380</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// redis服务器访问密码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String AUTH = <span class="string">"123456"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可用连接实例的最大数目，默认值为8</span></span><br><span class="line"><span class="comment">     * 如果赋值为-1，则表示不限制；如果pool已经分配了maxActive个jedis实例，</span></span><br><span class="line"><span class="comment">     * 则此时pool的状态为exhausted(耗尽)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> MAX_ACTIVE = <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 控制一个pool最多有多少个状态为idle(空闲)的jedis实例，默认值为8</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> MAX_IDLE = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 等待可用连接的最大时间，单位毫秒，默认值为-1（永不超时）,如果超过等待时间</span></span><br><span class="line"><span class="comment">     * 则直接抛出JedisConnectionException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> MAX_WAIT = <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> TIMEOUT = <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在borrow一个jedis实例时，是否提前进行validate操作；如果为true，</span></span><br><span class="line"><span class="comment">     * 则得到的jedis实例均是可用的</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> TEST_ON_BORROW = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JedisPool jedisPool = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化redis连接池</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        JedisPoolConfig config = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">        config.setMaxTotal(MAX_ACTIVE);</span><br><span class="line">        config.setMaxIdle(MAX_IDLE);</span><br><span class="line">        config.setMaxWaitMillis(MAX_WAIT);</span><br><span class="line">        config.setTestOnBorrow(TEST_ON_BORROW);</span><br><span class="line">        jedisPool = <span class="keyword">new</span> JedisPool(config, IP, PORT, TIMEOUT, AUTH);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisUtils</span><span class="params">(RedisTemplate redisTemplate)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Jedis实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> Jedis <span class="title">getJedis</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != jedisPool) &#123;</span><br><span class="line">            Jedis resource = jedisPool.getResource();</span><br><span class="line">            <span class="keyword">return</span> resource;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放jedis资源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">returnResource</span><span class="params">(<span class="keyword">final</span> Jedis jedis)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != jedis)</span><br><span class="line">            jedisPool.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Jedis客户端操作redis服务器"><a href="#Jedis客户端操作redis服务器" class="headerlink" title="Jedis客户端操作redis服务器"></a>Jedis客户端操作redis服务器</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJeditPool</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Jedis jedis;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        jedis = RedisUtils.getJedis();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * string操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        jedis.set(<span class="string">"one"</span>, <span class="string">"hello"</span>);</span><br><span class="line">        jedis.append(<span class="string">"one"</span>, <span class="string">"world"</span>);</span><br><span class="line">        System.out.println(jedis.get(<span class="string">"one"</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"---------------"</span>);</span><br><span class="line">        jedis.mset(<span class="string">"name"</span>, <span class="string">"zs"</span>, <span class="string">"age"</span>, <span class="string">"20"</span>, <span class="string">"id"</span>, <span class="string">"123456"</span>);</span><br><span class="line">        List&lt;String&gt; list = jedis.mget(<span class="string">"name"</span>, <span class="string">"age"</span>, <span class="string">"id"</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != list &amp;&amp; list.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String str : list) System.out.println(str + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"---------------"</span>);</span><br><span class="line">        jedis.incr(<span class="string">"age"</span>);</span><br><span class="line">        System.out.println(jedis.get(<span class="string">"age"</span>));</span><br><span class="line">        jedis.incrBy(<span class="string">"age"</span>, <span class="number">10</span>);</span><br><span class="line">        System.out.println(jedis.get(<span class="string">"age"</span>));</span><br><span class="line"></span><br><span class="line">        RedisUtils.returnResource(jedis);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"id"</span>, <span class="string">"1"</span>);</span><br><span class="line">        map.put(<span class="string">"name"</span>, <span class="string">"zs"</span>);</span><br><span class="line">        map.put(<span class="string">"age"</span>, <span class="string">"20"</span>);</span><br><span class="line">        jedis.hmset(<span class="string">"user"</span>, map);</span><br><span class="line"></span><br><span class="line">        System.out.println(jedis.hmget(<span class="string">"user"</span>, <span class="string">"id"</span>, <span class="string">"name"</span>, <span class="string">"age"</span>));</span><br><span class="line"></span><br><span class="line">        jedis.hdel(<span class="string">"user"</span>, <span class="string">"age"</span>);</span><br><span class="line">        System.out.println(jedis.hexists(<span class="string">"user"</span>, <span class="string">"age"</span>));</span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; keys = jedis.hkeys(<span class="string">"user"</span>);</span><br><span class="line">        <span class="keyword">for</span> (String str : keys)</span><br><span class="line">            System.out.println(str + <span class="string">"-"</span> + jedis.hget(<span class="string">"user"</span>, str));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * list操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        jedis.lpush(<span class="string">"test"</span>, <span class="string">"h1"</span>);</span><br><span class="line">        jedis.lpush(<span class="string">"test"</span>, <span class="string">"h2"</span>);</span><br><span class="line">        jedis.lpush(<span class="string">"test"</span>, <span class="string">"h3"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(jedis.lrange(<span class="string">"test"</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(jedis.lpop(<span class="string">"test"</span>));</span><br><span class="line">        System.out.println(jedis.lrange(<span class="string">"test"</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        jedis.lrem(<span class="string">"test"</span>, <span class="number">0</span>, <span class="string">"h1"</span>);</span><br><span class="line">        jedis.lrem(<span class="string">"test"</span>, <span class="number">1</span>, <span class="string">"h2"</span>);</span><br><span class="line">        jedis.lrem(<span class="string">"test"</span>, <span class="number">2</span>, <span class="string">"h3"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * set操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        jedis.sadd(<span class="string">"users"</span>, <span class="string">"zs"</span>);</span><br><span class="line">        jedis.sadd(<span class="string">"users"</span>, <span class="string">"ls"</span>);</span><br><span class="line">        jedis.sadd(<span class="string">"users"</span>, <span class="string">"ww"</span>);</span><br><span class="line">        System.out.println(jedis.smembers(<span class="string">"users"</span>));</span><br><span class="line">        System.out.println(jedis.sismember(<span class="string">"users"</span>, <span class="string">"zss"</span>));</span><br><span class="line">        System.out.println(jedis.srandmember(<span class="string">"users"</span>));</span><br><span class="line">        System.out.println(jedis.spop(<span class="string">"users"</span>));</span><br><span class="line">        System.out.println(jedis.scard(<span class="string">"users"</span>));</span><br><span class="line">        RedisUtils.returnResource(jedis);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * sort set</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test05</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        jedis.zadd(<span class="string">"stu"</span>, <span class="number">100</span>, <span class="string">"zs"</span>);</span><br><span class="line">        jedis.zadd(<span class="string">"stu"</span>, <span class="number">30</span>, <span class="string">"ls"</span>);</span><br><span class="line">        jedis.zadd(<span class="string">"stu"</span>, <span class="number">60</span>, <span class="string">"ww"</span>);</span><br><span class="line">        System.out.println(jedis.zrange(<span class="string">"stu"</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">        System.out.println(jedis.zrevrange(<span class="string">"stu"</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">        System.out.println(jedis.zrangeByScore(<span class="string">"stu"</span>, <span class="number">50</span>, <span class="number">60</span>));</span><br><span class="line">        RedisUtils.returnResource(jedis);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    在前面我们添加的服务器访问密码和bind的设置就是为了连接客户端准备的。&lt;/p&gt;
&lt;h1 id=&quot;添加依赖&quot;&gt;&lt;a href=&quot;#添加依赖&quot; class=&quot;headerlink&quot; title=&quot;添加依赖&quot;&gt;&lt;/a&gt;添加依赖&lt;/h1&gt;&lt;figure class=&quot;h
      
    
    </summary>
    
      <category term="redis" scheme="http://www.dlhblog.online/categories/redis/"/>
    
    
  </entry>
  
  <entry>
    <title>Redis持久化</title>
    <link href="http://www.dlhblog.online/2018/10/27/Redis%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    <id>http://www.dlhblog.online/2018/10/27/Redis持久化/</id>
    <published>2018-10-27T07:39:12.000Z</published>
    <updated>2018-10-27T08:05:24.366Z</updated>
    
    <content type="html"><![CDATA[<p>对于 Redis,其提供了不同级别的持久化操作:<br>​    1、RDB 持久化可以在指定的时间间隔内生成数据集的时间点快照<br>​    2、AOF 持久化记录服务器执行的所有写操作命令， 并在服务器启动时， 通过重新执行这些命令来还原数据集。 AOF 文件中的命令全部以 Redis 协议的格式来保存， 新命令会被追加到文件的末尾。 Redis 还可以在后台对 AOF 文件进行重写（rewrite）， 使得 AOF文件的体积不会超出保存数据集状态所需的实际大小。</p><p>​    3、Redis 还可以同时使用 AOF 持久化和 RDB 持久化。在这种情况下， 当 Redis 重<br>启时,它会优先使用 AOF 文件来还原数据集,因为 AOF 文件保存的数据集通常比 RDB<br>文件所保存的数据集更完整。<br>​    4、持久化功能当然也可以进行关闭操作， 让数据仅在服务器运行时存在</p><h1 id="RDB-持久化操作（快照-SnapShot-方式）"><a href="#RDB-持久化操作（快照-SnapShot-方式）" class="headerlink" title="RDB 持久化操作（快照 SnapShot 方式）"></a>RDB 持久化操作（快照 SnapShot 方式）</h1><p>​    在默认情况下， Redis 将数据库快照保存在名字为 dump.rdb 的二进制文件中。当然， 这里可以通过修改redis.conf 配置文件来对数据存储条件进行定义， 规定在“ N 秒内数据集至少有 M 个改动”这一条件被满足时,自动保存一次数据集。 也可以通过调用 save 或 bgsave ,手动让 Redis 进行数据集保存操作 </p><p><img src="http://pg0l2q23d.bkt.clouddn.com/redis%E6%8C%81%E4%B9%85%E5%8C%961.jpg" alt=""></p><h2 id="Save-Bgsave-手动方式保存数据"><a href="#Save-Bgsave-手动方式保存数据" class="headerlink" title="Save |Bgsave 手动方式保存数据"></a>Save |Bgsave 手动方式保存数据</h2><p>通过 save 操作 ， 当前 io 操作被阻塞， 当 save 保存执行完毕才会进行后续 io 操作 </p><p><img src="http://pg0l2q23d.bkt.clouddn.com/redis%E6%8C%81%E4%B9%85%E5%8C%962.jpg" alt=""></p><p>save 操作执行成功后可以看到 dump.rdb 文件(在 root/usr/redis-4.0.9-master/src 目录下) </p><p><img src="http://pg0l2q23d.bkt.clouddn.com/redis%E6%8C%81%E4%B9%85%E5%8C%963.jpg" alt=""></p><h2 id="快照运行方式"><a href="#快照运行方式" class="headerlink" title="快照运行方式"></a>快照运行方式</h2><p>当 Redis 需要保存 dump.rdb 文件时， 服务器执行以下操作：</p><ol><li>Redis 调用 fork() ， 同时拥有父进程和子进程。</li><li>子进程将数据集写入到一个临时 RDB 文件中。</li><li>当子进程完成对新 RDB 文件的写入时， Redis 用新 RDB 文件替换原来的 RDB 文件， 并删除<br>旧的 RDB 文件。<br>RDB 优缺点</li></ol><p><em>优点</em>:</p><ol><li>RDB 是一个非常紧凑（compact） 的文件， 它保存了 Redis 在某个时间点上的数据集。 该文件<br>适合用于进行备份 。 比如说， 可以在最近的 24 小时内， 每小时备份一次 RDB 文件， 并且在每<br>个月的每一天， 也备份一个 RDB 文件。 这样的话， 即使遇上问题， 也可以随时将数据集还原到<br>不同的版本。</li><li>RDB 非常适用于灾难恢复（disaster recovery） ： 它只有一个文件， 并且内容都非常紧凑，<br>可以（在加密后） 将它传送到别的数据中心</li><li>RDB 可以最大化 Redis 的性能： 父进程在保存 RDB 文件时唯一要做的就是 fork 出一个子进<br>程， 然后这个子进程就会处理接下来的所有保存工作， 父进程无须执行任何磁盘 I/O 操作。</li><li>RDB 在恢复大数据集时的速度比 AOF 的恢复速度要快</li></ol><p><em>缺点</em>:</p><ol><li>如果想要做到数据实时备份级别， 此时使用 rdb 快照进行备份可能会出现数据无法备份完整情况，<br>比如在数据备份完毕下次备份操作发起前， 服务器由于某种原因意外宕机， 此时采用 rdb 就无法<br>对当前情况做的实时响应处理</li><li>RDB 需要经常 fork 子进程来保存数据集到硬盘上,当数据集比较大的时候,fork 的过程是非常<br>耗时的,可能会导致Redis在一些毫秒级内不能响应客户端的请求.如果数据集巨大并且CPU性能<br>不是很好的情况下,这种情况会持续 1 秒,AOF 也需要 fork,但是你可以调节重写日志文件的频率<br>来提高数据集的耐久度. </li></ol><h1 id="AOF-只追加操作的文件"><a href="#AOF-只追加操作的文件" class="headerlink" title="AOF 只追加操作的文件"></a>AOF 只追加操作的文件</h1><p>​    RDB 需要经常 fork 子进程来保存数据集到硬盘上,当数据集比较大的时候,fork 的过程是非常耗时的,可能会导致 Redis 在一些毫秒级内不能响应客户端的请求.如果数据集巨大并且 CPU 性能不是很好的情况下,这种情况会持续 1 秒,AOF 也需要 fork,但是你可以调节重写日志文件的频率来提高数据集的耐久度.</p><p><code>appendonly yes</code></p><p>​    从现在开始， 每当 Redis 执行一个改变数据集的命令时（比如 SET） ， 这个命令就会被追加到 AOF 文件的末尾。 这样的话， 当 Redis 重新启时， 程序就可以通过重新执行AOF 文件中的命令来达到重建数据集的目的。</p><p><em>日志重写</em></p><p>​    因为 AOF 的运作方式是不断地将命令追加到文件的末尾， 所以随着写入命令的不断增加，AOF 文件的体积也会变得越来越大。 举个例子， 如果你对一个计数器调用了 100 次INCR ， 那么仅仅是为了保存这个计数器的当前值， AOF 文件就需要使用 100 条记录（entry） 。 然而在实际上， 只使用一条 SET 命令已经足以保存计数器的当前值了， 其余 99 条记录实际上都是多余的。</p><p>​    为了处理这种情况， Redis 支持一种有趣的特性： 可以在不打断服务客户端的情况下， 对AOF 文件进行重建（rebuild） 。 执行 BGREWRITEAOF 命令， Redis 将生成一个新的AOF 文件， 这个文件包含重建当前数据集所需的最少命令。 Redis 2.2 需要自己手动执行 BGREWRITEAOF 命令； Redis 2.4 则可以自动触发 AOF 重写。 参考:<br><a href="http://www.redis.cn/topics/persistence.html" target="_blank" rel="noopener">http://www.redis.cn/topics/persistence.html</a> </p><p>AOF重写文件配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 是否开启 AOF， 默认关闭（no）</span><br><span class="line">appendonly yes</span><br><span class="line"></span><br><span class="line"># 指定 AOF 文件名</span><br><span class="line">appendfilename appendonly.aof</span><br><span class="line"></span><br><span class="line"># Redis 支持三种不同的刷写模式：</span><br><span class="line"># appendfsync always #每次收到写命令就立即强制写入磁盘， 是最有保证的完全的持久化， 但速度也是最慢的， 一般不推荐使用。</span><br><span class="line">appendfsync everysec #每秒钟强制写入磁盘一次， 在性能和持久化方面做了很好的折中， 是受推荐的方式。</span><br><span class="line"># appendfsync no #完全依赖 OS 的写入， 一般为 30 秒左右一次， 性能最好但是持久化最没有保证， 不被推荐。</span><br><span class="line">#在日志重写时， 不进行命令追加操作， 而只是将其放在缓冲区里， 避免与命令的追加造成</span><br><span class="line">DISK IO 上的冲突。</span><br><span class="line">#设置为 yes 表示 rewrite 期间对新写操作不 fsync,暂时存在内存中,等 rewrite 完成后再写入， 默认为no</span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line"></span><br><span class="line">#当前 AOF 文件大小是上次日志重写得到 AOF 文件大小的二倍时， 自动启动新的日志重写过程。</span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line"></span><br><span class="line">#当前 AOF 文件启动新的日志重写过程的最小值， 避免刚刚启动 Reids 时由于文件尺寸较小导致频繁的重写。</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对于 Redis,其提供了不同级别的持久化操作:&lt;br&gt;​    1、RDB 持久化可以在指定的时间间隔内生成数据集的时间点快照&lt;br&gt;​    2、AOF 持久化记录服务器执行的所有写操作命令， 并在服务器启动时， 通过重新执行这些命令来还原数据集。 AOF 文件中的命令
      
    
    </summary>
    
      <category term="redis" scheme="http://www.dlhblog.online/categories/redis/"/>
    
    
  </entry>
  
  <entry>
    <title>Redis哨兵机制(主备切换)</title>
    <link href="http://www.dlhblog.online/2018/10/27/Redis%E5%93%A8%E5%85%B5%E6%9C%BA%E5%88%B6/"/>
    <id>http://www.dlhblog.online/2018/10/27/Redis哨兵机制/</id>
    <published>2018-10-27T04:42:34.000Z</published>
    <updated>2018-10-27T07:37:29.180Z</updated>
    
    <content type="html"><![CDATA[<p>​    访问网站时为了提高响应速度，从内存中获取热点数据比从数据库中获取要快很多，Redis是一个很好的Cache工具，大型网站的热点数据往往巨大，此时一台Redis服务器内存无法满足，需要集合多台Redis，但只有一台主机，其他都是从服务器，实现读写分离。</p><p>​    但是，万一主机宕机或中断了怎么办。</p><p>​    Redis哨兵机制，对服务器进行监视，当主机‘挂’了的时候，它会从其他服务器中重新拥立一个新的主机，赋予可执行功能。当‘挂’掉的主机再重新启动后，就不再是主机了。</p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>这里是单台服务器不同端口模拟3台服务器（1主2从）</p><h2 id="节点准备"><a href="#节点准备" class="headerlink" title="节点准备"></a>节点准备</h2><p>127.0.0.1  6379（master-主节点）</p><p>127.0.0.1  6380（slave-从节点1）</p><p>127.0.0.1  6381（slave-从节点2）</p><h2 id="主节点redis-conf配置"><a href="#主节点redis-conf配置" class="headerlink" title="主节点redis.conf配置"></a>主节点redis.conf配置</h2><p>设置端口 ， daemonize,密码， 连接主节点密码， requirepass 禁用 bind 等 基本配置 </p><p><img src="http://pg0l2q23d.bkt.clouddn.com/%E4%B8%BB%E5%A4%87%E5%88%87%E6%8D%A2%E4%B8%BB1.jpg" alt=""></p><p><img src="http://pg0l2q23d.bkt.clouddn.com/%E4%B8%BB%E5%A4%87%E5%88%87%E6%8D%A2%E4%B8%BB2.jpg" alt=""></p><p><img src="http://pg0l2q23d.bkt.clouddn.com/%E4%B8%BB%E5%A4%87%E5%88%87%E6%8D%A2%E4%B8%BB3.jpg" alt=""></p><p><img src="http://pg0l2q23d.bkt.clouddn.com/%E4%B8%BB%E5%A4%87%E5%88%87%E6%8D%A2%E4%B8%BB4.jpg" alt=""></p><p><img src="http://pg0l2q23d.bkt.clouddn.com/%E4%B8%BB%E5%A4%87%E5%88%87%E6%8D%A2%E4%B8%BB5.jpg" alt=""></p><h2 id="从节点redis-conf配置"><a href="#从节点redis-conf配置" class="headerlink" title="从节点redis.conf配置"></a>从节点redis.conf配置</h2><p>从节点配置和主节点基本类似，相比多一个配置</p><p><img src="http://pg0l2q23d.bkt.clouddn.com/%E4%BB%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE%E5%93%A8%E5%85%B51.jpg" alt=""></p><h2 id="sentinel-conf哨兵文件配置"><a href="#sentinel-conf哨兵文件配置" class="headerlink" title="sentinel.conf哨兵文件配置"></a>sentinel.conf哨兵文件配置</h2><p><img src="http://pg0l2q23d.bkt.clouddn.com/%E5%93%A8%E5%85%B5%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE1.jpg" alt=""></p><p><img src="http://pg0l2q23d.bkt.clouddn.com/%E5%93%A8%E5%85%B5%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE2.jpg" alt=""></p><p><img src="http://pg0l2q23d.bkt.clouddn.com/%E4%BB%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE%E5%93%A8%E5%85%B51.jpg" alt=""></p><p>​                所有哨兵起先监视主机端口</p><p>​                为了方便快速看到效果，设置哨兵执行时效</p><p><img src="http://pg0l2q23d.bkt.clouddn.com/%E5%93%A8%E5%85%B5%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE3.jpg" alt=""></p><p><img src="http://pg0l2q23d.bkt.clouddn.com/%E5%93%A8%E5%85%B5%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE4.jpg" alt=""></p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>开启所有三个服务和所有哨兵</p><p><img src="http://pg0l2q23d.bkt.clouddn.com/%E5%93%A8%E5%85%B5%E5%90%AF%E5%8A%A8.jpg" alt=""></p><p>将主服务kill掉</p><p>结果发现端口号为6381的从服务成功谋朝篡位为主服务</p><p><img src="http://pg0l2q23d.bkt.clouddn.com/6381%E6%88%90%E4%B8%BAmaster.jpg" alt=""></p><p>再次启动原本为主服务的6379</p><p><img src="http://pg0l2q23d.bkt.clouddn.com/master-slave.jpg" alt=""></p><p>只能乖乖当6381的奴隶了吧~</p><p>这里的一切均为本机127.0.0.1测试，如果需要连接局域网，可以改为本机ip地址</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    访问网站时为了提高响应速度，从内存中获取热点数据比从数据库中获取要快很多，Redis是一个很好的Cache工具，大型网站的热点数据往往巨大，此时一台Redis服务器内存无法满足，需要集合多台Redis，但只有一台主机，其他都是从服务器，实现读写分离。&lt;/p&gt;
&lt;p
      
    
    </summary>
    
      <category term="redis" scheme="http://www.dlhblog.online/categories/redis/"/>
    
    
  </entry>
  
  <entry>
    <title>Redis搭建主从复用-读写分离</title>
    <link href="http://www.dlhblog.online/2018/10/27/Redis%E6%90%AD%E5%BB%BA%E4%B8%BB%E4%BB%8E%E5%A4%8D%E7%94%A8-%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/"/>
    <id>http://www.dlhblog.online/2018/10/27/Redis搭建主从复用-读写分离/</id>
    <published>2018-10-27T01:41:12.000Z</published>
    <updated>2018-10-27T04:40:59.086Z</updated>
    
    <content type="html"><![CDATA[<p>​    Redis 支持主从复用。 数据可以从主服务器向任意数量的从服务器上同步， 同步使用的是发布/订阅机制。 Mater Slave 的模式， 从 Slave 向 Master 发起 SYNC 命令。可以是 1 Master 多 Slave， 可以分层， Slave 下可以再接 Slave， 可扩展成树状结构。因为没有两台电脑， 所以只能在一台机器上搭建两个 Redis 服务端。这里使用单机来模拟 redis 主从服务器 ， 实现读写分离配置 。</p><p>​    由于之前redis5.0版本配置文件有些不同，选择了降低版本使用了4.0.9版本</p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>将编译后的redis主文件夹复制两份，一份为master（主），一份slave（从），复制的命令为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -rf redis-4.0.9 redis-4.0.9-slave</span><br></pre></td></tr></table></figure><p><img src="http://pg0l2q23d.bkt.clouddn.com/%E4%B8%BB%E4%BB%8E%E5%88%86%E7%A6%BB%E6%96%87%E4%BB%B6%E5%A4%B9.jpg" alt=""></p><p>​        我们主要操作master和slave</p><h1 id="修改主服务器配置"><a href="#修改主服务器配置" class="headerlink" title="修改主服务器配置"></a>修改主服务器配置</h1><p>进入master目录，vim 编辑 redis.conf文件</p><p><img src="http://pg0l2q23d.bkt.clouddn.com/%E4%B8%BB%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE.jpg" alt=""></p><p>修改完成后：wq保存并退出</p><h1 id="修改从服务器配置"><a href="#修改从服务器配置" class="headerlink" title="修改从服务器配置"></a>修改从服务器配置</h1><p><img src="http://pg0l2q23d.bkt.clouddn.com/%E4%BB%8E%E6%9C%8D%E5%8A%A1%E5%99%A82.jpg" alt=""></p><p>添加设置作为谁的从服务器<img src="http://pg0l2q23d.bkt.clouddn.com/%E4%BB%8E%E6%9C%8D%E5%8A%A1%E5%99%A81.jpg" alt=""></p><h1 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h1><p>先启动主服务master，到src目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-server ../redis.conf &amp;  ---以配置文件启动 ‘&amp;’---在后台运行</span><br></pre></td></tr></table></figure><p>然后启动从服务slave</p><h1 id="启动客户端"><a href="#启动客户端" class="headerlink" title="启动客户端"></a>启动客户端</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-cli</span><br></pre></td></tr></table></figure><p>从服务器需要以指定端口启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-cli -p 6380</span><br></pre></td></tr></table></figure><p>启动后输入<code>info replication</code>查看当前服务器状态</p><p>主服务器</p><p><img src="http://pg0l2q23d.bkt.clouddn.com/%E4%B8%BBreplication.jpg" alt=""></p><p>从服务器</p><p><img src="http://pg0l2q23d.bkt.clouddn.com/%E4%BB%8Ereplication.jpg" alt=""></p><p>​                看到这些信息基本配置好了，接下来进行测试</p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>主服务器 可读可写 ，我们添加一条数据，测试从服务器是否能读到</p><p><img src="http://pg0l2q23d.bkt.clouddn.com/%E4%B8%BB%E6%B5%8B%E8%AF%95.jpg" alt=""></p><p>从服务器只有可读权限，关注它能否读取到主服务刚才写入的数据</p><p><img src="http://pg0l2q23d.bkt.clouddn.com/%E4%BB%8E%E6%B5%8B%E8%AF%95.jpg" alt=""></p><p>测试发现无法写入，可以读取主服务写入的数据 ，成功。</p><p>下一章是配置哨兵机制~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    Redis 支持主从复用。 数据可以从主服务器向任意数量的从服务器上同步， 同步使用的是发布/订阅机制。 Mater Slave 的模式， 从 Slave 向 Master 发起 SYNC 命令。可以是 1 Master 多 Slave， 可以分层， Slave 
      
    
    </summary>
    
      <category term="redis" scheme="http://www.dlhblog.online/categories/redis/"/>
    
    
  </entry>
  
  <entry>
    <title>Redis-五种数据类型</title>
    <link href="http://www.dlhblog.online/2018/10/27/redis-2/"/>
    <id>http://www.dlhblog.online/2018/10/27/redis-2/</id>
    <published>2018-10-27T00:46:41.000Z</published>
    <updated>2018-10-27T08:27:05.198Z</updated>
    
    <content type="html"><![CDATA[<h1 id="key-相关指令"><a href="#key-相关指令" class="headerlink" title="key 相关指令"></a>key 相关指令</h1><p>​    <strong>exists</strong> key 检测指定 key 是否存在， 返回 1 表示存在， 0 不存在<br>​    <strong>del</strong> key1 key2 …… keyN 删除给定 key,返回删除 key 的数目， 0 表示给定 key 都不存在<br>​    <strong>type</strong> key 返回给定 key 值的类型。 返回 none 表示 key 不存在,string 字符类型， list 链表类型 set 无序集合类型……<br>​    <strong>keys</strong> pattern 返回匹配指定模式的所有 key<br>​    <strong>randomkey</strong> 返回从当前数据库中随机选择的一个 key,如果当前数据库是空的， 返回空串<br>​    <strong>rename</strong> oldkey newkey 重命名一个 key,如果 newkey 存在， 将会被覆盖， 返回1 表示成功，0 失败。 可能是 oldkey 不存在或者和 newkey 相同。<br>​    <strong>renamenx</strong> oldkey newkey 同上， 但是如果 newkey 存在返回失败。<br>​    <strong>expire</strong> key seconds 为 key 指定过期时间， 单位是秒。 返回 1 成功， 0 表示key 已经设置超过过期时间或者不存在。<br>​    <strong>ttl</strong> key 返回设置过过期时间 key 的剩余过期秒数。 -1 表示 key 不存在或者未设置过期时间。<br>​    <strong>select</strong> db-index 通过索引选择数据库， 默认连接的数据库是 0,默认数据库数是16 个。 返回 1表示成功， 0 失败。<br>​    <strong>move</strong> key db-index 将 key 从当前数据库移动到指定数据库。 返回 1 表示成功。0 表示 key不存在或者已经在指定数据库中。 </p><h1 id="五种基本数据类型"><a href="#五种基本数据类型" class="headerlink" title="五种基本数据类型"></a>五种基本数据类型</h1><p>redis 提供五种数据类型： string,hash,list,set 及sorted set</p><h2 id="String-类型"><a href="#String-类型" class="headerlink" title="String 类型"></a>String 类型</h2><p>string 是最基本的类型， 而且 string 类型是二进制安全的。 意思是 redis 的<br>string 可以包含任何数据。 比如 jpg 图片或者序列化的对象。 从内部实现来看其实<br>string 可以看作 byte 组， 最大上限是 1G 字节。 1G=1024MB</p><h3 id="string-类型数据操作指令简介"><a href="#string-类型数据操作指令简介" class="headerlink" title="string 类型数据操作指令简介"></a>string 类型数据操作指令简介</h3><p>​    <strong>set</strong> key value 设置 key 对应 string 类型的值， 返回 1 表示成功， 0 失败。<br>​    <strong>setnx</strong> key value 如果 key 不存在， 设置 key 对应 string 类型的值。 如果key 已经存在， 返回 0。<br>​    <strong>get</strong> key 获取 key 对应的 string 值,如果 key 不存在返回 nil<br>​    <strong>getset</strong> key value 先获取 key 的值，再设置 key 的值。如果 key 不存在返回 nil。<br>​    <strong>mget</strong> key1 key2 ……keyN 一次获取多个 key 的值， 如果对应 key 不存在，则对应返回 nil。<br>​    <strong>mset</strong> key1 value1 ……keyN valueN 一次设置多个 key 的值， 成功返回 1表示所有的值都设置了， 失败返回0 表示没有任何值被设置。<br>​    <strong>msetnx</strong> key1 value1 ……keyN valueN 一次设置多个 key 的值， 但是不会覆盖已经存在的 key</p><p>​    <strong>incr</strong> key 对 key 的值做++操作， 并返回新的值。 注意 incr 一个不是 int 的value 会返回错误， incr 一个不存在的 key， 则设置 key 值为 1。<br>​    <strong>decr</strong> key 对 key 的值做–操作， decr 一个不存在 key， 则设置 key 值为-1。<strong>**<br>​    </strong>incrby<strong> key integer 对 key 加上指定值 ， key 不存在时候会设置 key， 并认为原来的 value 是 0。<br>​    </strong>decrby** key integer 对 key 减去指定值。 decrby 完全是为了可读性， 我们完全可以通过 incrby 一个负值来实现同样效果， 反之一样</p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>​    String 是最常用的一种数据类型， 普通的 key/value 存储都可以归为此类， value 其实不仅是 String,也可以是数字： 比如想知道什么时候封锁一个 IP 地址(访问超过几次)。<strong>INCRBY</strong> 命令让这些变得很容易， 通过原子递增保持计数。 </p><h2 id="Hash-类型"><a href="#Hash-类型" class="headerlink" title="Hash 类型"></a>Hash 类型</h2><h3 id="Hash-类型数据操作指令"><a href="#Hash-类型数据操作指令" class="headerlink" title="Hash 类型数据操作指令"></a>Hash 类型数据操作指令</h3><p>​    <strong>hset</strong> key field value 设置 hash field 为指定值， 如果 key 不存在， 则创建<br>​    <strong>hget</strong> key field 获取指定的 hash field。<br>​    <strong>hmget</strong> key filed1….fieldN 获取全部指定的 hash filed。<br>​    <strong>hmset</strong> key filed1 value1 ……filedN valueN 同时设置hash的多个 field。<br>​    <strong>hincrby</strong> key field integer 将指定的 hash filed 加上指定值。 成功返回 hash filed 变更后的值。<br>​    <strong>hexists</strong> key field 检测指定 field 是否存在。<br>​    <strong>hdel</strong> key field 删除指定的 hash field。<br>​    <strong>hlen</strong> key 返回指定 hash 的 field 数量<br>​    <strong>hkeys</strong> key 返回 hash 的所有 field。<br>​    <strong>hvals</strong> key 返回 hash 的所有 value。<br>​    <strong>hgetall</strong> key 返回 hash 的所有 filed 和 value。</p><h3 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h3><p>​    我们简单举个实例来描述下 Hash 的应用场景， 比如我们要存储一个用户信息对象数据， 包含以下信息：用户 ID， 为查找的 key，存储的 value 用户对象包含姓名 name， 年龄 age， 生日 birthday 等信息，如果用普通的 key/value 结构来存储， 主要有以下 2 种存储方式：<br>​    <strong>第一种方式</strong>将用户ID作为查找key,把其他信息封装成一个对象以序列化的方式存储，如： set u001 “李三,18,20010101” 这种方式的缺点是， 增加了序列化/反序列化的开销， 并且在需要修改其中一项信息时， 需要把整个对象取回， 并且修改操作需要对并发进行保护， 引入 CAS 等复杂问题。<br>​    <strong>第二种方法</strong>是这个用户信息对象有多少成员就存成多少个 key-value 对儿， 用用户 ID+对应属性的名称作为唯一标识来取得对应属性的值，如： mset user:001:name “李三” user:001:age 18 user:001:birthday “20010101”虽然省去了序列化开销和并发问题， 但是用户 ID 为重复存储， 如果存在大量这样的数据， 内存浪费还是非常可观的。那么 Redis 提供的 Hash 很好的解决了这个问题， Redis 的 Hash 实际是内部存储的Value 为一个 HashMap，并提供了直接存取这个 Map 成员的接口，如： hmset user:001 name “李三” age 18 birthday “20010101” 也就是说， Key 仍然是用户 ID,value 是一个 Map， 这个 Map 的 key 是成员的属性名， value 是属性值，这样对数据的修改和存取都可以直接通过其内部 Map 的 Key(Redis 里称内部 Map 的 key 为 field), 也就是通过key(用户 ID) + field(属性标签) 操作对应属性数据了， 既不需要重复存储数据， 也不会带来序列化和并发修改控制的问题。 很好的解决了问题。这里同时需要注意， Redis 提供了接口(hgetall)可以直接取到全部的属性数据,但是如果内部 Map 的成员很多， 那么涉及到遍历整个内部 Map 的操作， 由于 Redis 单线程模型的缘故， 这个遍历操作可能会比较耗时， 而另其它客户端的请求完全不响应， 这点需要格外注意。</p><p><strong>实现方式</strong>：<br>​    上面已经说到 Redis Hash 对应 Value 内部实际就是一个 HashMap， 实际这里会有2 种不同实现， 这个 Hash的成员比较少时 Redis 为了节省内存会采用类似一维数组的方式来紧凑存储， 而不会采用真正的 HashMap 结构， 对应的 value redisObject 的encoding 为 zipmap,当成员数量增大时会自动转成真正的 HashMap。 </p><h2 id="List-类型"><a href="#List-类型" class="headerlink" title="List 类型"></a>List 类型</h2><h3 id="List-类型数据操作指令简介"><a href="#List-类型数据操作指令简介" class="headerlink" title="List 类型数据操作指令简介"></a>List 类型数据操作指令简介</h3><p>​    <strong>lpush</strong> key string 在 key 对应 list 的头部添加字符串元素， 返回 1 表示成功， 0表示 key 存在且不是 list 类型。<br>​    <strong>rpush</strong> key string 在 key 对应 list 的尾部添加字符串元素。<br>​    <strong>llen</strong> key 返回 key 对应 list 的长度， 如果 key 不存在返回 0， 如果 key 对应类型不是 list 返回错误。<br>​    <strong>lrange</strong> key start end 返回指定区间内的元素， 下标从 0 开始， 负值表示从后面计算， -1 表示倒数第一个元素 ， key 不存在返回空列表。<br>​    <strong>ltrim</strong> key start end 截取 list 指定区间内元素， 成功返回 1， key 不存在返回错误。<br>​    <strong>lset</strong> key indexvalue 设置 list 中指定下标的元素值， 成功返回 1， key 或者下标不存在返回错误。<br>​    <strong>lrem</strong> key count value 从 List 的头部 （ count 正数） 或尾部 （ count 负数）删除一定数量 （ count） 匹配 value 的元素， 返回删除的元素数量。 count 为 0时候删除全部。<br>​    <strong>lpop</strong> key 从 list 的头部删除并返回删除元素。 如果 key 对应 list 不存在或者是空返回 nil， 如果 key 对应值不是 list 返回错误。<br>​    <strong>rpop</strong> key 从 list 的尾部删除并返回删除元素。<br>​    <strong>blpop</strong> key1 ……keyN timeout 从左到右扫描， 返回对第一个非空 list 进行lpop 操作并返回， 比如 blpop list1 list2 list3 0 ,如果 list 不存在list2,list3 都是非空则对 list2 做 lpop 并返回从 list2 中删除的元素。 如果所有的 list 都是空或不存在， 则会阻塞 timeout 秒， timeout 为 0 表示一直阻塞。当阻塞时， 如果有 client 对 key1…keyN 中的任意 key 进行 push 操作， 则第一在这个 key 上被阻塞的 client 会立即返回。 如果超时发生， 则返回 nil。 有点像unix 的 select 或者 poll。</p><p>​    <strong>brpop</strong> 同 blpop， 一个是从头部删除一个是从尾部删除</p><h3 id="应用场景-2"><a href="#应用场景-2" class="headerlink" title="应用场景"></a>应用场景</h3><p>​    Redis list 的应用场景非常多， 也是 Redis 最重要的数据结构之一。<br>​    我们可以轻松地实现最新消息排行等功能。<br>​    Lists 的另一个应用就是队列， 可以利用 Lists 的 PUSH 操作， 将任务存在 List 中，然后工作线程再用 POP 操作将任务取出进行执行。</p><p><strong>实现方式</strong>：<br>​    Redis list 的实现为一个双向链表， 即可以支持反向查找和遍历， 更方便操作， 不过带来了部分额外的内存开销， Redis 内部的很多实现， 包括发送缓冲队列等也都是用的这个数据结构。 </p><h2 id="Set-类型"><a href="#Set-类型" class="headerlink" title="Set 类型"></a>Set 类型</h2><p>​    是无序集合， 最大可以包含(2 的 32 次方-1)个元素。 set 的是通过 hashtable 实现的， 所以添加， 删除， 查找的复杂度都是 O(1)。 hash table 会随着添加或者删除自动的调整大小。 需要注意的是调整 hashtable 大小时候需要同步（获取写锁）会阻塞其他读写操作。 可能不久后就会改用跳表（ skip list） 来实现。 跳表已经在 sortedsets 中使用了。 关于 set 集合类型除了基本的添加删除操作， 其它有用的操作还包含集合的取并集(union)， 交集(intersection)， 差集(difference)。通过这些操作可以很容易的实现 SNS 中的好友推荐和 blog 的 tag 功能</p><h3 id="set-类型数据操作指令简介"><a href="#set-类型数据操作指令简介" class="headerlink" title="set 类型数据操作指令简介"></a>set 类型数据操作指令简介</h3><p>​    <strong>sadd</strong> key member 添加一个 string 元素到 key 对应 set 集合中， 成功返回 1,如果元素以及在集合中则返回 0， key 对应的 set 不存在则返回错误。<br>​    <strong>srem</strong> key member 从 key 对应 set 中移除指定元素， 成功返回 1， 如果 member在集合中不存在或者 key 不存在返回 0， 如果 key 对应的不是 set 类型的值返回错误。<br>​    <strong>spop</strong> key 删除并返回 key 对应 set 中随机的一个元素,如果 set 是空或者 key不存在返回 nil。<br>​    <strong>srandmember</strong> key 同 spop， 随机取 set 中的一个元素， 但是不删除元素。<br>​    <strong>smove</strong> srckey dstkey member 从 srckey 对应 set 中移除 member 并添加到dstkey 对应 set 中， 整个操作是原子的。 成功返回 1,如果 member 在 srckey 中不存在返回 0， 如果 key 不是 set 类型返回错误。<br>​    <strong>Scard</strong> key 返回 set 的元素个数， 如果 set 是空或者 key 不存在返回 0。<br>​    <strong>sismember</strong> key member 判断 member 是否在 set 中， 存在返回 1， 0 表示不存在或者 key 不存在。<br>​    <strong>sinter</strong> key1 key2 …… keyN 返回所有给定 key 的交集。<br>​    <strong>sinterstore</strong> dstkey key1 ……. keyN 返回所有给定 key 的交集， 并保存交集存到 dstkey 下。<br>​    <strong>sunion</strong> key1 key2 …… keyN 返回所有给定 key 的并集。<br>​    <strong>sunionstore</strong> dstkey key1 ……keyN 返回所有给定 key 的并集， 并保存并集到 dstkey 下。<br>​    <strong>sdiff</strong> key1 key2 ……keyN 返回所有给定 key 的差集。<br>​    <strong>sdiffstore</strong> dstkey key1 ……keyN 返回所有给定 key 的差集， 并保存差集到 dstkey 下。<br>​    <strong>smembers</strong> key 返回 key 对应 set 的所有元素， 结果是无序的。</p><h3 id="应用场景-3"><a href="#应用场景-3" class="headerlink" title="应用场景"></a>应用场景</h3><p>​    Redis set 对外提供的功能与 list 类似是一个列表的功能， 特殊之处在于 set 是可以自动排重的， 当你需要存储一个列表数据， 又不希望出现重复数据时， set 是一个很好的选择， 并且 set 提供了判断某个成员是否在一个 set 集合内的重要接口， 这个也是 list所不能提供的。<br>​    比如在微博应用中， 每个人的好友存在一个集合（set） 中， 这样求两个人的共同好友的操作， 可能就只需要用求交集命令即可。 （新浪微博关注共同好友）</p><p>​    Redis 还为集合提供了求交集、 并集、 差集等操作。<br><strong>实现方式：</strong><br>​    set 的内部实现是一个 value 永远为 null 的 HashMap， 实际就是通过计算 hash的方式来快速排重的， 这也是 set 能提供判断一个成员是否在集合内的原因。 </p><h2 id="Sorted-Set-类型"><a href="#Sorted-Set-类型" class="headerlink" title="Sorted Set 类型"></a>Sorted Set 类型</h2><p>​    Sorted Set 是有序集合， 它在 set 的基础上增加了一个顺序属性， 这一属性在添加修改元素的时候可以指定， 每次指定后， 会自动重新按新的值调整顺序。 可以理解了有两列的 mysql 表， 一列存 value， 一列存顺序。 操作中 key 理解为sorted set 的名字， 最多包含 2&gt;32-1 个元素 。</p><h3 id="Sorted-Set-类型数据操作指令简介"><a href="#Sorted-Set-类型数据操作指令简介" class="headerlink" title="Sorted Set 类型数据操作指令简介"></a>Sorted Set 类型数据操作指令简介</h3><p>​    <strong>zadd</strong> key score member 添加元素到集合， 元素在集合中存在则更新对应 score。<br>​    <strong>zrem</strong> key member 删除指定元素， 1 表示成功， 如果元素不存在返回 0。<br>​    <strong>zincrby</strong> key incrmember 增加对应 member 的 score 值， 然后移动元素并保持 skip list 保持有序。 返回更新后的 score 值。<br>​    <strong>zrank</strong> key member 返回指定元素在集合中的排名（下标）， 集合中元素是按 score从小到大排序的。<br>​    <strong>zrevrankkey</strong> member 同上,但是集合中元素是按 score 从大到小排序。<br>​    <strong>zrange</strong> key start end 类似 lrange 操作从集合中去指定区间的元素。 返回的是有序结果<br>​    <strong>zrevrange</strong> key start end 同上， 返回结果是按 score 逆序的。<br>​    <strong>zrangebyscore</strong> key min max 返回集合中 score 在给定区间的元素。<br>​    <strong>zcount</strong> key min max 返回集合中 score 在给定区间的数量。<br>​    <strong>zcard</strong> key 返回集合中元素个数。<br>​    <strong>zscore</strong> key element 返回给定元素对应的 score</p><h3 id="应用场景-4"><a href="#应用场景-4" class="headerlink" title="应用场景"></a>应用场景</h3><p>​    以某个条件为权重， 比如按顶的次数排序.<strong>ZREVRANGE</strong> 命令可以用来按照得分来获取前 100 名的用户， <strong>ZRANK</strong> 可以用来获取用户排名， 非常直接而且操作容易。<br>​    <strong>Redis sorted set</strong> 的使用场景与 set 类似， 区别是 set 不是自动有序的， 而 sorted set 可以通过用户额外提供一个<strong>优先级(score)</strong>的参数来为成员排序， 并且是插入有序的，即自动排序。<br>​    比如:twitter 的 public timeline 可以以发表时间作为 <strong>score</strong> 来存储， 这样获取时就是自动按时间排好序的。<br>​    比如:全班同学成绩的 <strong>SortedSets</strong>， <strong>value</strong> 可以是同学的学号， 而 <strong>score</strong> 就可以是其考试得分， 这样数据插入集合的， 就已经进行了天然的排序。<br>​    比如网易云音乐排行榜实现；<br>​    另外还可以用 <strong>Sorted Sets</strong> 来做带权重的队列， 比如普通消息的 <strong>score</strong> 为 1， 重要消息的 <strong>score</strong> 为 2， 然后工作线程可以选择按 <strong>score</strong> 的倒序来获取工作任务。 让重要的任务优先执行。<br>需要精准设定过期时间的应用<br>​    比如你可以把上面说到的 <strong>sorted set</strong> 的 <strong>score</strong> 值设置成过期时间的时间戳， 那么就可以简单地通过过期时间排序， 定时清除过期数据了， 不仅是清除 Redis 中的过期数据，你完全可以把 Redis 里这个过期时间当成是对数据库中数据的索引， 用 Redis 来找出哪些数据需要过期删除， 然后再精准地从数据库中删除相应的记录。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;key-相关指令&quot;&gt;&lt;a href=&quot;#key-相关指令&quot; class=&quot;headerlink&quot; title=&quot;key 相关指令&quot;&gt;&lt;/a&gt;key 相关指令&lt;/h1&gt;&lt;p&gt;​    &lt;strong&gt;exists&lt;/strong&gt; key 检测指定 key 是否存在
      
    
    </summary>
    
      <category term="redis" scheme="http://www.dlhblog.online/categories/redis/"/>
    
    
  </entry>
  
  <entry>
    <title>Redis简介和安装</title>
    <link href="http://www.dlhblog.online/2018/10/25/redis-1/"/>
    <id>http://www.dlhblog.online/2018/10/25/redis-1/</id>
    <published>2018-10-25T11:35:16.000Z</published>
    <updated>2018-10-27T08:26:53.681Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>​    Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。 它支持多种类型的数据结构，如 字符串（strings）， 散列（hashes）， 列表（lists）， 集合（sets）， 有序集合（sorted sets） 与范围查询， bitmaps， hyperloglogs 和 地理空间（geospatial） 索引半径查询。 Redis 内置了 复制（replication），LUA脚本（Lua scripting）， LRU驱动事件（LRU eviction），事务（transactions） 和不同级别的 磁盘持久化（persistence）， 并通过 Redis哨兵（Sentinel）和自动 分区（Cluster）提供高可用性（high availability）。    ——<a href="http://www.redis.cn/" target="_blank" rel="noopener">http://www.redis.cn/</a></p><h2 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h2><ol><li><p>Redis 是把数据存放在内存当中， 所以它的运行速度会非常快</p></li><li><p>Redis 具有多种数据存储结构</p></li><li><p>Redis 具有持久化的功能</p></li><li><p>Redis 上的数据可以设置过期</p></li><li><p>Redis 支持集群， 而且可以自动切换</p></li><li><p>跨平台 支持多种语言客户端 </p></li></ol><p>   Redis 用途：<br>   ​    缓存（StackOverFlow）， 数据库(微博)， 消息中间件（队列， 微博） </p><h1 id="Redis安装"><a href="#Redis安装" class="headerlink" title="Redis安装"></a>Redis安装</h1><p>环境：centerOS 6.7 虚拟机</p><p>redis版本：5.0</p><p> 1、通过xshell建立连接，使用wget命令下载对应的节点资源</p><pre><code>wget http://download.redis.io/releases/redis-5.0.0.tar.gz</code></pre><p>​    或者去官网下载，使用xftp导入</p><p>2、安装gcc环境</p><p>​    yum install gcc</p><p>3、解压redis压缩文件</p><p>​    tar zxf redis-5.0.0.tar.gz </p><p>4、进入解压后的文件夹</p><p>​    make -编译</p><p>​    完成~</p><h1 id="启动redis服务"><a href="#启动redis服务" class="headerlink" title="启动redis服务"></a>启动redis服务</h1><p>进入src目录</p><p>./redis-server &amp;</p><p>在后面加上&amp;在启动服务后可以继续别的操作，否则以当前窗口启动无法进行其他操作。</p><p><img src="http://pg0l2q23d.bkt.clouddn.com/redis01.bmp" alt=""></p><p>出现以上界面表示服务启动成功</p><p>启动客户端</p><p>./redis-cli</p><p><img src="http://pg0l2q23d.bkt.clouddn.com/redis02.bmp" alt=""></p><p>启动成功就可以在里面愉快地敲命令了！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;​    Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。 它支持多种类型的数据结构，
      
    
    </summary>
    
      <category term="redis" scheme="http://www.dlhblog.online/categories/redis/"/>
    
    
  </entry>
  
  <entry>
    <title>Crm项目-权限模块</title>
    <link href="http://www.dlhblog.online/2018/10/22/Crm%E9%A1%B9%E7%9B%AE%E6%9D%83%E9%99%90%E6%A8%A1%E5%9D%97/"/>
    <id>http://www.dlhblog.online/2018/10/22/Crm项目权限模块/</id>
    <published>2018-10-22T12:29:05.000Z</published>
    <updated>2018-10-22T13:47:04.195Z</updated>
    
    <content type="html"><![CDATA[<p>​    在这个项目中权限管理模块分为用户信息管理、角色管理、资源管理三个方面对不同用户的权限进行管理。</p><p>​    由于每个用户可以有多个角色，每个角色有多个模块权限，处理这些多对多的关系，建立了两张中间表，其中用户和角色之间的中间表，角色和权限的中间表，所以这里权限管理总共有五张表：</p><p>​    用户表：t_user 、 角色表：t_role 、 用户和角色的关系中间表：t_user_role</p><p>​    模块表：t_module 、角色和模块的关系中间表：t_permission</p><hr><p><strong>用户信息管理</strong></p><p>​    这里主要管理用户和用户的角色分配，通过中间表t_user_role中的userId和roleId对另外两张表关联</p><p>​    其中需要将多行数据显示到一行，使用了mysql的group_concat语法</p><p><strong>角色管理</strong></p><p>​    最主要的是关联权限，这里用了zTree插件建立了一棵权限树</p><p>​    <img src="http://pg0l2q23d.bkt.clouddn.com/crm%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86-ztree.jpg" alt=""></p><p>​    通过t_permission中间表中的roleId和moduleId连接t_role和t_module两张表之间的关系</p><p>​    </p><p><strong>资源管理</strong></p><p><img src="http://pg0l2q23d.bkt.clouddn.com/crm%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86-%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86.jpg" alt=""></p><p>​    通过t_permission表和t_module表中的权限码关联</p><p>​    这个项目中权限码的设定是进行权限管理的关键</p><hr><p><strong>权限管理如何进行管理</strong></p><p>​    <strong>前台管理</strong>：freemake-所见即有权限</p><p>​    思路：</p><p>​        1、登录时根据用户id查询两张中间表中角色id相同的权限码（该用户拥有的权限码），并将结果存到session作用域中</p><p>​        2、前台模版引擎判断作用域中权限码是否存在和对应权限码显示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">permissions</span>??&gt;</span> <span class="comment">&lt;!--判断作用域存在的话才展示以下信息--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">#if</span> <span class="attr">permissions</span>?<span class="attr">seq_contains</span>("<span class="attr">10</span>")&gt;</span> <span class="comment">&lt;!--判断作用域中包含才展示以下信息--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">title</span>=<span class="string">"营销管理"</span> <span class="attr">data-options</span>=<span class="string">"selected:true,iconCls:'icon-yxgl'"</span> <span class="attr">style</span>=<span class="string">"padding: 10px"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">#if</span> <span class="attr">permissions</span>?<span class="attr">seq_contains</span>("<span class="attr">1010</span>")&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:openTab('营销机会管理','saleChance/index/1','icon-yxjhgl')"</span> <span class="attr">class</span>=<span class="string">"easyui-linkbutton"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">data-options</span>=<span class="string">"plain:true,iconCls:'icon-yxjhgl'"</span> <span class="attr">style</span>=<span class="string">"width: 150px"</span>&gt;</span>营销机会管理<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">#if</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">#if</span> <span class="attr">permissions</span>?<span class="attr">seq_contains</span>("<span class="attr">1020</span>")&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:openTab('客户开发计划','saleChance/index/2','icon-khkfjh')"</span> <span class="attr">class</span>=<span class="string">"easyui-linkbutton"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">data-options</span>=<span class="string">"plain:true,iconCls:'icon-khkfjh'"</span> <span class="attr">style</span>=<span class="string">"width: 150px"</span>&gt;</span>客户开发计划<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">#if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">#if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">#if</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    </p><p>​    <strong>后台管理</strong>：通过spring-aop+自定义注解进行统一管理</p><p>​    思路：</p><p>​        1、自定义注解</p><p>​        2、配置切面，对标记有该注解的注解中的值和session作用域中的内容进行比较判断，对不包含访问该资源所需权限码的行为进行拦截。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PermissionAdaptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"@annotation(com.shsxt.crm.annotation.RequestPermission)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"cut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">// 得到方法签名</span></span><br><span class="line">        MethodSignature signature = (MethodSignature) pjp.getSignature();</span><br><span class="line">        <span class="comment">// 通过方法签名拿到方法</span></span><br><span class="line">        Method method = signature.getMethod();</span><br><span class="line">        <span class="comment">// 通过方法拿到注解</span></span><br><span class="line">        RequestPermission requestPermission = method.getAnnotation(RequestPermission.class);</span><br><span class="line">        <span class="comment">// 拿到注解中的value</span></span><br><span class="line">        String aclValue = requestPermission.aclValue();</span><br><span class="line">        <span class="comment">// 通过spring线程的上下文获取request对象（也可以直接注入httpsession，我只是做测试）</span></span><br><span class="line">        ServletRequestAttributes requestAttributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">        HttpServletRequest request = requestAttributes.getRequest();</span><br><span class="line">        <span class="comment">// 通过request对象拿到session中的内容</span></span><br><span class="line">        List&lt;String&gt; permission = (List&lt;String&gt;) request.getSession().getAttribute(CrmConstant.USER_PERMISSIONS);</span><br><span class="line">        <span class="comment">// 判断集合中是否包含ACLValue拦截</span></span><br><span class="line">        AssertUtil.isTrue(CollectionUtils.isEmpty(permission) || !permission.contains(aclValue), <span class="string">"没有权限"</span>);</span><br><span class="line">        <span class="keyword">return</span> pjp.proceed();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    在这个项目中权限管理模块分为用户信息管理、角色管理、资源管理三个方面对不同用户的权限进行管理。&lt;/p&gt;
&lt;p&gt;​    由于每个用户可以有多个角色，每个角色有多个模块权限，处理这些多对多的关系，建立了两张中间表，其中用户和角色之间的中间表，角色和权限的中间表，所以
      
    
    </summary>
    
      <category term="项目经验" scheme="http://www.dlhblog.online/categories/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringMVC学习(8)-异常处理</title>
    <link href="http://www.dlhblog.online/2018/10/12/SpringMVC%E5%AD%A6%E4%B9%A0-8/"/>
    <id>http://www.dlhblog.online/2018/10/12/SpringMVC学习-8/</id>
    <published>2018-10-12T03:16:19.000Z</published>
    <updated>2018-10-12T03:48:16.734Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringMVC处理全局异常"><a href="#SpringMVC处理全局异常" class="headerlink" title="SpringMVC处理全局异常"></a>SpringMVC处理全局异常</h1><p>1、使用SpringMVC提供的简单异常处理器SimpleMappingExceptionResolver</p><p>2、实现Spring的异常处理接口HandlerExceptionResolver定义自己的异常处理器</p><p>3、使用@ExceptionHandler 注解实现异常处理</p><h1 id="全局异常处理方式一"><a href="#全局异常处理方式一" class="headerlink" title="全局异常处理方式一"></a>全局异常处理方式一</h1><p>配置SimpleMappingExceptionResolver对象（配置servlet-context配置文件）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultErrorView"</span> <span class="attr">value</span>=<span class="string">"error"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"exceptionAttribute"</span> <span class="attr">value</span>=<span class="string">"ex"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"exceptionMappings"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"com.shsxt.exception.ParamException"</span>&gt;</span>param<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    优点：集成简单，有良好的扩展性，对已有代码没有入侵性等</p><p>​    缺点：该方法仅能获取到异常信息，若在出现异常时，对需要获取除异常以外的数据的情况不适用。</p><h1 id="全局异常处理方式二"><a href="#全局异常处理方式二" class="headerlink" title="全局异常处理方式二"></a>全局异常处理方式二</h1><p>定义自己的异常处理器，实现HandlerExceptionResolver接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">// 在需要使用时只需要加上这个注解交给spring管理即可</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyExceptionHandler</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                                         HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                                         Object handler, Exception ex)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"============================="</span>);</span><br><span class="line">        System.out.println(<span class="string">"======MyExceptionHandler====="</span>);</span><br><span class="line">        System.out.println(<span class="string">"============================="</span>);</span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        <span class="comment">// 当发生参数异常时instanceof--判断左边对象是否是右边类的实例</span></span><br><span class="line">        <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> ParamException)&#123;</span><br><span class="line">            <span class="comment">// 将异常转为参数异常</span></span><br><span class="line">            ParamException paramException = (ParamException) ex;</span><br><span class="line">            <span class="comment">// 设置视图页面</span></span><br><span class="line">            mv.setViewName(<span class="string">"param"</span>);</span><br><span class="line">            <span class="comment">// 设置模型数据</span></span><br><span class="line">            mv.addObject(<span class="string">"ex"</span>,ex);</span><br><span class="line">            <span class="keyword">return</span> mv;</span><br><span class="line">        &#125;</span><br><span class="line">        mv.setViewName(<span class="string">"error"</span>);</span><br><span class="line">        mv.addObject(<span class="string">"ex"</span>,ex);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    相比于配置SimpleMappingExceptionResolver对象方式，实现接口的方式能在异常处理时获取出现异常的对象，能提供更详细的异常处理信息</p><h1 id="全局异常处理方式三"><a href="#全局异常处理方式三" class="headerlink" title="全局异常处理方式三"></a>全局异常处理方式三</h1><p>定义异常处理器，使用@ExceptionHandler注解，页面处理器继承异常处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">ex</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                     Exception e)</span></span>&#123;</span><br><span class="line">        request.setAttribute(<span class="string">"ex"</span>,e);</span><br><span class="line">        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ParamException)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"param"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"error"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"index"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> <span class="keyword">extends</span> <span class="title">ExceptionController</span></span>&#123;</span><br><span class="line">    <span class="comment">/*参数异常*/</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"test01"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span>  <span class="keyword">new</span> ParamException(<span class="string">"参数异常"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    该方法需要修改已有代码，且受限于java单继承的局限性，在获取异常时不能获取除异常之外的数据</p><h1 id="未捕获异常的处理"><a href="#未捕获异常的处理" class="headerlink" title="未捕获异常的处理"></a>未捕获异常的处理</h1><p>​    对于Unchecked Exception而言，由于代码不强制捕获，往往被忽略，如果运行期产生了Unchecked Exception，而代码中又没有进行相应的捕获和处理，则我们可能不得不面对尴尬的404、500……等服务器内部错误提示页面。<br>​    我们需要一个全面而有效的异常处理机制。目前大多数服务器也都支持在Web.xml中通过<error-page>(Websphere/Weblogic)或者<error-code>(Tomcat)节点配置特定异常情况的显示页面。修改 web.xml 文件，增加以下内容：    </error-code></error-page></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 出错页面定义 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exception-type</span>&gt;</span>java.lang.Throwable<span class="tag">&lt;/<span class="name">exception-type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">location</span>&gt;</span>/500.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>500<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">location</span>&gt;</span>/500.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>404<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">location</span>&gt;</span>/404.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SpringMVC处理全局异常&quot;&gt;&lt;a href=&quot;#SpringMVC处理全局异常&quot; class=&quot;headerlink&quot; title=&quot;SpringMVC处理全局异常&quot;&gt;&lt;/a&gt;SpringMVC处理全局异常&lt;/h1&gt;&lt;p&gt;1、使用SpringMVC提供的简单
      
    
    </summary>
    
      <category term="SpringMVC" scheme="http://www.dlhblog.online/categories/SpringMVC/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringMVC学习(7)-SpringMVC实现RestFul服务</title>
    <link href="http://www.dlhblog.online/2018/10/12/SpringMVC%E5%AD%A6%E4%B9%A0-7/"/>
    <id>http://www.dlhblog.online/2018/10/12/SpringMVC学习-7/</id>
    <published>2018-10-12T02:59:05.000Z</published>
    <updated>2018-10-12T03:16:01.965Z</updated>
    
    <content type="html"><![CDATA[<p>​    Restful 风格的 API 是一种软件架构风格， 设计风格而不是标准， 只是提供了一组设计原则和约束条件。 它主要用于客户端和服务器交互类的软件。 基于这个风格设计的软件可以更简洁， 更有层次， 更易于实现缓存等机制。<br>​    在 Restful 风格中， 用户请求的 url 使用同一个 url 而用请求方式： get， post，delete， put…等方式对请求的处理方法进行区分， 这样可以在前后台分离式的开发中使得前端开发人员不会对请求的资源地址产生混淆和大量的检查方法名的麻烦， 形成一个统一的接口。</p><p><strong>在 Restful 风格中， 现有规定如下：</strong><br>​    GET（ SELECT） ： 从服务器查询， 可以在服务器通过请求的参数区分查询的方式。<br>​    POST（ CREATE） ： 在服务器端新建一个资源， 调用 insert 操作。<br>​    PUT（ UPDATE） ： 在服务器端更新资源， 调用 update 操作。<br>​    PATCH（ UPDATE） ： 在服务器端更新资源（ 客户端提供改变的属性） 。 (目前jdk7 未实现， tomcat7 不支持)。<br>​    DELETE（ DELETE） ： 从服务器端删除资源， 调用 delete 语句。</p><h1 id="Spring-Mvc-中对-rest-的支持"><a href="#Spring-Mvc-中对-rest-的支持" class="headerlink" title="Spring Mvc 中对 rest 的支持"></a>Spring Mvc 中对 rest 的支持</h1><p>案例：<br>​    如何在 java 构造没有扩展名的 RESTful url,如 /forms/1</p><h1 id="SpringMvc-Restful-风格-url-配置实现"><a href="#SpringMvc-Restful-风格-url-配置实现" class="headerlink" title="SpringMvc Restful 风格 url 配置实现"></a>SpringMvc Restful 风格 url 配置实现</h1><p>​    springmvc 的 resturl是通过@RequestMapping 及@PathVariable annotation提供的,通过如@RequestMapping(value=”/blog /{id}”,method=RequestMethod.DELETE)即可处理/blog/1 的 delete 请求. </p><h2 id="GET请求配置"><a href="#GET请求配置" class="headerlink" title="GET请求配置"></a>GET请求配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * restful--&gt;get 请求 执行查询操作</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@RequestMapping</span>(value=<span class="string">"queryAccountById02/&#123;id&#125;"</span>,method= RequestMethod.GET,produces= MediaType.APPLICATION_JSON_UTF8_VALUE)</span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> MessageModel <span class="title">queryAccountById</span><span class="params">(@PathVariable Integer id)</span></span>&#123;</span><br><span class="line">       MessageModel messageModel=<span class="keyword">new</span> MessageModel();</span><br><span class="line">       <span class="keyword">if</span>(<span class="keyword">null</span>==id)&#123;</span><br><span class="line">           messageModel.setCode(<span class="number">300</span>);</span><br><span class="line">           messageModel.setMsg(<span class="string">"参数非法!"</span>);</span><br><span class="line">           <span class="keyword">return</span> messageModel;</span><br><span class="line">       &#125;</span><br><span class="line">       messageModel.setResult(accountService.queryById(id));</span><br><span class="line">       <span class="keyword">return</span> messageModel;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="POST请求配置"><a href="#POST请求配置" class="headerlink" title="POST请求配置"></a>POST请求配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* restful--&gt;post 请求执行添加操作</span></span><br><span class="line"><span class="comment"> * @param id</span></span><br><span class="line"><span class="comment"> * @param aname</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"saveAccount"</span>, method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MessageModel <span class="title">queryAccountById04</span><span class="params">(@RequestBody Account account)</span> </span>&#123;</span><br><span class="line">    MessageModel messageModel = <span class="keyword">new</span> MessageModel();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        accountService.saveOrUpdateAccount(account);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ParamsException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        messageModel.setCode(e.getErrorCode());</span><br><span class="line">        messageModel.setMsg(e.getErrorMsg());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        messageModel.setCode(<span class="number">300</span>);</span><br><span class="line">        messageModel.setMsg(<span class="string">"操作失败!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> messageModel;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Put请求配置"><a href="#Put请求配置" class="headerlink" title="Put请求配置"></a>Put请求配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* restful--&gt;put 请求执行更新操作</span></span><br><span class="line"><span class="comment"> * @param id</span></span><br><span class="line"><span class="comment"> * @param account</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"update/&#123;id&#125;"</span>, method = RequestMethod.PUT, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MessageModel <span class="title">queryAccountById04</span><span class="params">(@PathVariable Integer id, @RequestBody Account account)</span> </span>&#123;</span><br><span class="line">    MessageModel messageModel = <span class="keyword">new</span> MessageModel();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        accountService.saveOrUpdateAccount(account);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ParamsException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        messageModel.setCode(e.getErrorCode());</span><br><span class="line">        messageModel.setMsg(e.getErrorMsg());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        messageModel.setCode(<span class="number">300</span>);</span><br><span class="line">        messageModel.setMsg(<span class="string">"操作失败!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> messageModel;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Delete请求配置"><a href="#Delete请求配置" class="headerlink" title="Delete请求配置"></a>Delete请求配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* restful--&gt;delete 请求 执行删除操作</span></span><br><span class="line"><span class="comment"> * @param id</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"deleteAccountById/&#123;id&#125;"</span>, method = RequestMethod</span><br><span class="line">        .DELETE, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MessageModel <span class="title">queryAccountById05</span><span class="params">(@PathVariable Integer id)</span> </span>&#123;</span><br><span class="line">    MessageModel messageModel = <span class="keyword">new</span> MessageModel();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        accountService.deleteAccountById(id);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ParamsException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        messageModel.setCode(e.getErrorCode());</span><br><span class="line">        messageModel.setMsg(e.getErrorMsg());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        messageModel.setCode(<span class="number">300</span>);</span><br><span class="line">        messageModel.setMsg(<span class="string">"操作失败!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> messageModel;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    Restful 风格的 API 是一种软件架构风格， 设计风格而不是标准， 只是提供了一组设计原则和约束条件。 它主要用于客户端和服务器交互类的软件。 基于这个风格设计的软件可以更简洁， 更有层次， 更易于实现缓存等机制。&lt;br&gt;​    在 Restful 风格
      
    
    </summary>
    
      <category term="SpringMVC" scheme="http://www.dlhblog.online/categories/SpringMVC/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringMVC学习(6)-文件上传-SSM整合</title>
    <link href="http://www.dlhblog.online/2018/10/11/SpringMVC%E5%AD%A6%E4%B9%A0-6/"/>
    <id>http://www.dlhblog.online/2018/10/11/SpringMVC学习-6/</id>
    <published>2018-10-11T14:51:29.000Z</published>
    <updated>2018-10-11T15:31:26.277Z</updated>
    
    <content type="html"><![CDATA[<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置servlet-context-xml"><a href="#配置servlet-context-xml" class="headerlink" title="配置servlet-context.xml"></a>配置servlet-context.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>104857600<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxInMemorySize"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>4096<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"file"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fileUp</span><span class="params">(HttpServletRequest request, Model model)</span></span>&#123;</span><br><span class="line">        MultipartHttpServletRequest multRequest = (MultipartHttpServletRequest) request;</span><br><span class="line">        MultipartFile file = multRequest.getFile(<span class="string">"file"</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span>!=file &amp;&amp; !file.isEmpty())&#123;</span><br><span class="line">            String path = request.getSession().getServletContext().getRealPath(<span class="string">"upload"</span>);</span><br><span class="line">            String fileName = file.getOriginalFilename();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                file.transferTo(<span class="keyword">new</span> File(path,fileName));</span><br><span class="line">                model.addAttribute(<span class="string">"msg"</span>,<span class="string">"上传成功"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                model.addAttribute(<span class="string">"msg"</span>,<span class="string">"上传失败"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"fileUp"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">file</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"file"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前台页面代码"><a href="#前台页面代码" class="headerlink" title="前台页面代码"></a>前台页面代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>文件上传<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"file"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>结果<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">操作：$&#123;msg&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>选择一个文件</p><p><img src="http://pg0l2q23d.bkt.clouddn.com/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A01.jpg" alt=""></p><p>提交</p><p><img src="http://pg0l2q23d.bkt.clouddn.com/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A02.jpg" alt=""></p><p>此时上传的文件已经在webapp/upload目录下</p><p><img src="http://pg0l2q23d.bkt.clouddn.com/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A03.jpg" alt=""></p><p>关于SSM整合</p><p>整合完成的项目我已经放在GitHub上</p><p><a href="https://github.com/dlh1234okok/SSM" target="_blank" rel="noopener">https://github.com/dlh1234okok/SSM</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;步骤&quot;&gt;&lt;a href=&quot;#步骤&quot; class=&quot;headerlink&quot; title=&quot;步骤&quot;&gt;&lt;/a&gt;步骤&lt;/h1&gt;&lt;h2 id=&quot;添加依赖&quot;&gt;&lt;a href=&quot;#添加依赖&quot; class=&quot;headerlink&quot; title=&quot;添加依赖&quot;&gt;&lt;/a&gt;添加依赖&lt;/h
      
    
    </summary>
    
      <category term="SpringMVC" scheme="http://www.dlhblog.online/categories/SpringMVC/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringMVC学习(5)-拦截器</title>
    <link href="http://www.dlhblog.online/2018/10/11/SpringMVC%E5%AD%A6%E4%B9%A0-5/"/>
    <id>http://www.dlhblog.online/2018/10/11/SpringMVC学习-5/</id>
    <published>2018-10-11T14:51:18.000Z</published>
    <updated>2018-10-11T15:21:31.392Z</updated>
    
    <content type="html"><![CDATA[<p>​    SpringMVC 中的 Interceptor 拦截器也是相当重要和相当有用的，它的主要作用是拦截用户的请求并进行相应的处理。比如通过它来进行权限验证，或者是来判断用户是否登陆等操作。</p><p>对于 springmvc 拦截器的定义方式有两种方式</p><ol><li><p>实现接口： org.springframework.web.servlet.HandlerInterceptor</p></li><li><p>继承适配器</p><p>org.springframework.web.servlet.handler.HandlerInterceptorAdapter </p></li></ol><h1 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 请求方法执行前执行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"method before..."</span>);</span><br><span class="line">        <span class="comment">// 请求地址</span></span><br><span class="line">        System.out.println(handler);</span><br><span class="line">        <span class="comment">// true代表放行，false拦截</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请求方法执行后执行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"method after..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 视图生成后执行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"view after..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="继承HandlerInterceptorAdapter"><a href="#继承HandlerInterceptorAdapter" class="headerlink" title="继承HandlerInterceptorAdapter"></a>继承HandlerInterceptorAdapter</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor2</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"before preHandle..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"after completion"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="拦截器的配置"><a href="#拦截器的配置" class="headerlink" title="拦截器的配置"></a>拦截器的配置</h1><h2 id="全局拦截"><a href="#全局拦截" class="headerlink" title="全局拦截"></a>全局拦截</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.shsxt.interceptor.MyInterceptor"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="部分拦截（拦截指定请求）"><a href="#部分拦截（拦截指定请求）" class="headerlink" title="部分拦截（拦截指定请求）"></a>部分拦截（拦截指定请求）</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/user/*"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.shsxt.interceptor.MyInterceptor"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="简单的登录拦截"><a href="#简单的登录拦截" class="headerlink" title="简单的登录拦截"></a>简单的登录拦截</h1><h2 id="拦截器类代码"><a href="#拦截器类代码" class="headerlink" title="拦截器类代码"></a>拦截器类代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String uri = request.getRequestURI();</span><br><span class="line">        <span class="keyword">if</span> (uri.indexOf(<span class="string">"login"</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 判断Session是否存在（是否已登录）</span></span><br><span class="line">            User user = (User) request.getSession().getAttribute(<span class="string">"user"</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != user) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                response.sendRedirect(request.getContextPath() + <span class="string">"/login.jsp"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置文件配置"><a href="#配置文件配置" class="headerlink" title="配置文件配置"></a>配置文件配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/*/*"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.shsxt.interceptor.LoginInterceptor"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><p>还有一种方式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/*/*"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/user/login"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.shsxt.interceptor.LoginInterceptor2"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这里已经放行了登录地址，所以拦截器代码不需要再获取请求地址判断。</p><h2 id="登录代码"><a href="#登录代码" class="headerlink" title="登录代码"></a>登录代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"login"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(User user, Model model, HttpSession session)</span></span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String USERNAME=<span class="string">"zs"</span>;</span><br><span class="line">    <span class="keyword">final</span> String USERPWD=<span class="string">"123"</span>;</span><br><span class="line">    System.out.println(user.getUserName()+<span class="string">"+"</span>+user.getUserPwd());</span><br><span class="line">    <span class="keyword">if</span> (USERNAME.equals(user.getUserName()) &amp;&amp; USERPWD.equals(user.getUserPwd()))&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>,<span class="string">"登陆成功"</span>);</span><br><span class="line">        session.setAttribute(<span class="string">"user"</span>,user);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>,<span class="string">"帐号或密码错误"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>初次重启了服务器，Session不存在，输入简易查询的路径</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">http://localhost:8080/springmvc01/user/user01</span></span><br></pre></td></tr></table></figure><p>被拦截重定向到登录界面了<img src="http://pg0l2q23d.bkt.clouddn.com/%E6%8B%A6%E6%88%AA1.jpg" alt=""></p><p>当我们登录后再次进行查询</p><p><img src="http://pg0l2q23d.bkt.clouddn.com/%E6%8B%A6%E6%88%AA2.jpg" alt=""></p><p>简易的登录拦截器就完成了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    SpringMVC 中的 Interceptor 拦截器也是相当重要和相当有用的，它的主要作用是拦截用户的请求并进行相应的处理。比如通过它来进行权限验证，或者是来判断用户是否登陆等操作。&lt;/p&gt;
&lt;p&gt;对于 springmvc 拦截器的定义方式有两种方式&lt;/p&gt;

      
    
    </summary>
    
      <category term="SpringMVC" scheme="http://www.dlhblog.online/categories/SpringMVC/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringMVC学习(4)-requst,response和JSON格式</title>
    <link href="http://www.dlhblog.online/2018/10/11/SpringMVC%E5%AD%A6%E4%B9%A0-4/"/>
    <id>http://www.dlhblog.online/2018/10/11/SpringMVC学习-4/</id>
    <published>2018-10-11T14:51:13.000Z</published>
    <updated>2018-10-11T15:01:45.516Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JSON数据返回"><a href="#JSON数据返回" class="headerlink" title="JSON数据返回"></a>JSON数据返回</h1><p>@ResponseBody<br>​    该注解用于将 Controller 的方法返回的对象，通过适当的 HttpMessageConverter转换为指定格式后，写入到 Response 对象的 body 数据区。<br>​    返回的数据不是 html 标签的页面，而是其他某种格式的数据时（如 json、xml 等）使用（通常用于 ajax 请求）</p><p>@RequestBody<br>​    该注解用于读取 Request 请求的 body 部分数据，使用系统默认配置的HttpMessageConverter 进行解析，然后把相应的数据绑定到要返回的对象上 ,再把HttpMessageConverter 返回的对象数据绑定到 controller 中方法的参数上 </p><p><strong>步骤：</strong></p><p>1、添加json依赖jar包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加 json 依赖 jar 包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、修改servlet-context.xml 添加json转换器配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- json 支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageConverters"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在方法上定义@ResponseBody</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"view01"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">queryUser</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(id);</span><br><span class="line">    user.setUserName(<span class="string">"zs"</span>);</span><br><span class="line">    user.setUserPwd(<span class="string">"123"</span>);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看结果：</p><p><img src="http://pg0l2q23d.bkt.clouddn.com/%E9%87%8D%E5%AE%9A%E5%90%915.jpg" alt=""></p><h1 id="获取request和response对象"><a href="#获取request和response对象" class="headerlink" title="获取request和response对象"></a>获取request和response对象</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"user01"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">user01</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                     HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                     HttpSession session)</span></span>&#123;</span><br><span class="line">    request.getParameter(<span class="string">"request"</span>);</span><br><span class="line">    response.addCookie(<span class="keyword">new</span> Cookie(<span class="string">"cookie"</span>,<span class="string">"a"</span>));</span><br><span class="line">    session.getAttribute(<span class="string">"user"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JSON数据返回&quot;&gt;&lt;a href=&quot;#JSON数据返回&quot; class=&quot;headerlink&quot; title=&quot;JSON数据返回&quot;&gt;&lt;/a&gt;JSON数据返回&lt;/h1&gt;&lt;p&gt;@ResponseBody&lt;br&gt;​    该注解用于将 Controller 的方法返回的
      
    
    </summary>
    
      <category term="SpringMVC" scheme="http://www.dlhblog.online/categories/SpringMVC/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringMVC学习(3)-请求转发和重定向</title>
    <link href="http://www.dlhblog.online/2018/10/11/SpringMVC%E5%AD%A6%E4%B9%A0-3/"/>
    <id>http://www.dlhblog.online/2018/10/11/SpringMVC学习-3/</id>
    <published>2018-10-11T12:43:37.000Z</published>
    <updated>2018-10-11T14:50:58.929Z</updated>
    
    <content type="html"><![CDATA[<h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><p>1、请求转发是在服务端完成的，重定向是在客户端完成的</p><p>2、请求转发是一次请求，重定向是两次请求</p><p>3、请求转发地址栏不会发生变化，重定向地址栏会发生变化</p><p>4、请求转发速度快，重定向速度慢</p><p>5、请求转发只能在同一台服务器下完成，重定向能在不同服务器完成</p><h1 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h1><p>转发到view页面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"index08"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index08</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"index08..."</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>转发到方法上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"index07"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index07</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"index07..."</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"forward:/index08"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h1><p>直接返回redirect+页面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 重定向1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"index04"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index04</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:v1.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回ModelAndView对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">index06</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    mv.setViewName(<span class="string">"redirect:v1.jsp"</span>);</span><br><span class="line">    <span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重定向传递参数"><a href="#重定向传递参数" class="headerlink" title="重定向传递参数"></a>重定向传递参数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"index04"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index04</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:v1.jsp?a=1&amp;b=哈哈"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用这种方法传递中文参数会出现乱码。<img src="http://pg0l2q23d.bkt.clouddn.com/%E9%87%8D%E5%AE%9A%E5%90%911.jpg" alt=""></p><p><strong>解决乱码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 重定向中文乱码问题</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"index05"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index05</span><span class="params">(RedirectAttributes redirect)</span></span>&#123;</span><br><span class="line">    redirect.addAttribute(<span class="string">"a"</span>,<span class="number">1</span>);</span><br><span class="line">    redirect.addAttribute(<span class="string">"b"</span>,<span class="string">"哈哈哈"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:v1.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="http://pg0l2q23d.bkt.clouddn.com/%E9%87%8D%E5%AE%9A%E5%90%912.jpg" alt=""></p><p><strong>重定向方法二传递参数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"index06"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">index06</span><span class="params">(RedirectAttributes attributes)</span></span>&#123;</span><br><span class="line">    ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    attributes.addAttribute(<span class="string">"a"</span>,<span class="string">"哈哈哈"</span>);</span><br><span class="line">    attributes.addAttribute(<span class="string">"b"</span>,<span class="string">"aaa"</span>);</span><br><span class="line">    mv.setViewName(<span class="string">"redirect:v1.jsp"</span>);</span><br><span class="line">    <span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="http://pg0l2q23d.bkt.clouddn.com/%E9%87%8D%E5%AE%9A%E5%90%913.jpg" alt=""></p><p>也成功传递了参数并解决了中文乱码问题</p><h2 id="重定向到controller"><a href="#重定向到controller" class="headerlink" title="重定向到controller"></a>重定向到controller</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"index004"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index004</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/view/view01？id=1"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>view01：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"view"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"view01"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryUser</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(id);</span><br><span class="line">        user.setUserName(<span class="string">"zs"</span>);</span><br><span class="line">        user.setUserPwd(<span class="string">"123"</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="http://pg0l2q23d.bkt.clouddn.com/%E9%87%8D%E5%AE%9A%E5%90%914.jpg" alt=""></p><p>​    我们在重定向时传递了一个id为1的参数，重定向到view01方法上获取到了。</p><p><strong>方法二：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"index006"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">index006</span><span class="params">(RedirectAttributes attributes)</span></span>&#123;</span><br><span class="line">    ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    attributes.addAttribute(<span class="string">"id"</span>,<span class="number">2</span>);</span><br><span class="line">    mv.setViewName(<span class="string">"redirect:/view/view01"</span>);</span><br><span class="line">    <span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="http://pg0l2q23d.bkt.clouddn.com/%E9%87%8D%E5%AE%9A%E5%90%915.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;区别&quot;&gt;&lt;a href=&quot;#区别&quot; class=&quot;headerlink&quot; title=&quot;区别&quot;&gt;&lt;/a&gt;区别&lt;/h1&gt;&lt;p&gt;1、请求转发是在服务端完成的，重定向是在客户端完成的&lt;/p&gt;
&lt;p&gt;2、请求转发是一次请求，重定向是两次请求&lt;/p&gt;
&lt;p&gt;3、请求转发地址
      
    
    </summary>
    
      <category term="SpringMVC" scheme="http://www.dlhblog.online/categories/SpringMVC/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringMVC学习(2)-参数绑定和Session</title>
    <link href="http://www.dlhblog.online/2018/10/11/SpringMVC%E5%AD%A6%E4%B9%A0-2/"/>
    <id>http://www.dlhblog.online/2018/10/11/SpringMVC学习-2/</id>
    <published>2018-10-11T12:43:29.000Z</published>
    <updated>2018-10-11T14:15:10.414Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参数绑定"><a href="#参数绑定" class="headerlink" title="参数绑定"></a>参数绑定</h1><p>​    SpringMVC是处于控制层的框架，主要处理前台页面的请求和响应，在前台发起请求后，我们需要获取传过来的参数。参数绑定是请求参数到处理器功能处理方法的方法参数上的绑定，对于参数绑定SpringMVC处理的非常灵活。</p><h2 id="简单数据类型"><a href="#简单数据类型" class="headerlink" title="简单数据类型"></a>简单数据类型</h2><p>值必须存在，不传可以通过默认值代替</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"index"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">data1</span><span class="params">(@RequestParam(defaultValue=<span class="string">"10"</span>,name=<span class="string">"age"</span>)</span><span class="keyword">int</span> age,</span></span><br><span class="line"><span class="function">                      @<span class="title">RequestParam</span><span class="params">(defaultValue=<span class="string">"1"</span>,name=<span class="string">"flag"</span>)</span><span class="keyword">boolean</span> flag,</span></span><br><span class="line"><span class="function">                      @<span class="title">RequestParam</span><span class="params">(defaultValue=<span class="string">"100"</span>,name=<span class="string">"s"</span>)</span><span class="keyword">double</span> s)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.err.println(<span class="string">"age:"</span>+age+<span class="string">":flag:"</span>+flag+<span class="string">":s:"</span>+s);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="包装类型"><a href="#包装类型" class="headerlink" title="包装类型"></a>包装类型</h2><p>值可以为空</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * defaultValue：默认值</span></span><br><span class="line"><span class="comment">     * name：指定前台传参的别名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"hello13"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello06</span><span class="params">(@RequestParam(defaultValue = <span class="string">"1"</span>,name = <span class="string">"page"</span>)</span> Integer pageNum, Integer pageSize)</span>&#123;</span><br><span class="line">        System.out.println(pageNum+<span class="string">"=="</span>+pageSize);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数组类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"hello07"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello07</span><span class="params">(Integer[] ids)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(Integer id:ids) System.out.println(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前台传递参数名相同时即为数组类型，如：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/springmvc01/hello07?ids=1&amp;ids=2&amp;ids=3</span><br></pre></td></tr></table></figure><h2 id="PO类型"><a href="#PO类型" class="headerlink" title="PO类型"></a>PO类型</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"hello08"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello08</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前台传参方式如：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/springmvc01/hello08?userName=zs&amp;userPwd=123</span><br></pre></td></tr></table></figure><h2 id="List类型"><a href="#List类型" class="headerlink" title="List类型"></a>List类型</h2><p>此时实体类需要定义List属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;Phone&gt; phones;</span><br></pre></td></tr></table></figure><p>不能直接写在controller的方法中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"hello09"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello09</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前台传参方式（必须为post方式）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"phones[0].num"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"phones[1].num"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Set类型"><a href="#Set类型" class="headerlink" title="Set类型"></a>Set类型</h2><p>​    因为Set集合<strong>无序</strong>的特点，绑定Set数据时，必须先在Set对象中add添加响应数量的模型对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Set&lt;Phone&gt; phones = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    phones.add(<span class="keyword">new</span> Phone());</span><br><span class="line">    phones.add(<span class="keyword">new</span> Phone());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>controller方法和前台传参方式和list一样。Set集合的优点在这里是<strong>不可重复</strong>。</p><h2 id="Map类型"><a href="#Map类型" class="headerlink" title="Map类型"></a>Map类型</h2><p>在实体类中定义Map属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Map&lt;String,Phone&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br></pre></td></tr></table></figure><p>controller方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"hello11"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello11</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">    Set&lt;Map.Entry&lt;String, Phone&gt;&gt; entrySet = user.getMap().entrySet();</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String,Phone&gt; entry:entrySet)&#123;</span><br><span class="line">        System.out.println(entry.getKey());</span><br><span class="line">        System.out.println(entry.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前台传参方式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">map:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"map['a'].num"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"map['b'].num"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"map['c'].num"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="自定义复合类型"><a href="#自定义复合类型" class="headerlink" title="自定义复合类型"></a>自定义复合类型</h2><p>添加实体的引用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Phone phone;</span><br></pre></td></tr></table></figure><p>controller方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"hello12"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello12</span><span class="params">(User2 user)</span></span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前台传参方式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">复合类型：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"phone.num"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h1 id="获取Session级别存储的方式"><a href="#获取Session级别存储的方式" class="headerlink" title="获取Session级别存储的方式"></a>获取Session级别存储的方式</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Session01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userName</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"index01"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index01</span><span class="params">(HttpSession session,String userName)</span></span>&#123;</span><br><span class="line">    session.setAttribute(<span class="string">"userName1"</span>,userName);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Session02</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * 这里前台取参的方式为$&#123;sessionScop.userName2&#125;</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"index02"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">index02</span><span class="params">(String userName)</span></span>&#123;</span><br><span class="line">    ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    mv.addObject(<span class="string">"userName2"</span>,userName);</span><br><span class="line">    mv.setViewName(<span class="string">"index"</span>);</span><br><span class="line">    <span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Session03</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userName</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"index03"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index03</span><span class="params">(HttpServletRequest request,String userName)</span></span>&#123;</span><br><span class="line">    request.getSession().setAttribute(<span class="string">"userName3"</span>,userName);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;参数绑定&quot;&gt;&lt;a href=&quot;#参数绑定&quot; class=&quot;headerlink&quot; title=&quot;参数绑定&quot;&gt;&lt;/a&gt;参数绑定&lt;/h1&gt;&lt;p&gt;​    SpringMVC是处于控制层的框架，主要处理前台页面的请求和响应，在前台发起请求后，我们需要获取传过来的参数。参
      
    
    </summary>
    
      <category term="SpringMVC" scheme="http://www.dlhblog.online/categories/SpringMVC/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringMVC学习(1)-简介和环境搭建</title>
    <link href="http://www.dlhblog.online/2018/10/11/SpringMVC%E5%AD%A6%E4%B9%A0-1/"/>
    <id>http://www.dlhblog.online/2018/10/11/SpringMVC学习-1/</id>
    <published>2018-10-11T12:43:23.000Z</published>
    <updated>2018-10-11T14:11:53.769Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么叫MVC"><a href="#什么叫MVC" class="headerlink" title="什么叫MVC"></a>什么叫MVC</h1><p>​    <strong>模型-视图-控制器（MVC）</strong> 是一个众所周知的以设计界面应用程序为基础的设计思想。 它主要通过<strong>分离模型、 视图及控制器</strong>在应用程序中的角色<strong>将业务逻辑从界面中解耦</strong>。 通常， <strong>模型负责封装应用程序数据在视图层展示</strong>。 <strong>视图仅仅只是展示这些数据， 不包含任何业务逻辑</strong>。 <strong>控制器负责接收来自用户的请求，并调用后台服务（service 或者 dao） 来处理业务逻辑</strong>。 处理后， 后台业务层可能会返回了一些数据在视图层展示。 <strong>控制器收集这些数据及准备模型在视图层展示</strong>。 <strong>MVC 模式的核心思想是将业务逻辑从界面中分离出来， 允许它们单独改变而不会相互影响。</strong> </p><h1 id="SpringMVC是什么"><a href="#SpringMVC是什么" class="headerlink" title="SpringMVC是什么"></a>SpringMVC是什么</h1><p>​    Spring MVC 是 Spring 家族中的一个 web 成员, 它是一种基于 Java 的实现了 Web MVC 设计思想的请求驱动类型的轻量级 Web 框架， 即<strong>使用了 MVC 架构模式的思想， 将 web 层进行职责解耦， 基于请求驱动指的就是使用请求-响应模型</strong>， 框架的目的就是帮助我们简化开发， Spring MVC 也是要简化我们日常Web 开发的。<br>​    Spring MVC 是服务到工作者思想的实现。 前端控制器是DispatcherServlet； 应用控制器拆为处理器映射器(Handler Mapping)进行处理器管理和视图解析器(View Resolver)进行视图管理； 支持本地化/国际化（Locale） 解析及文件上传等； 提供了非常灵活的<strong>数据验证、 格式化和数据绑定机制</strong>； 提供了强大的<strong>约定大于配置</strong>（惯例优先原则） 的契约式编程支持。 </p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><p>​    IDEA+JDK1.8+Maven+Jetty</p><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring web --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- spring mvc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- web servlet --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>jetty插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 编译环境插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mortbay.jetty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jetty-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>6.1.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scanIntervalSeconds</span>&gt;</span>10<span class="tag">&lt;/<span class="name">scanIntervalSeconds</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">contextPath</span>&gt;</span>/springmvc01<span class="tag">&lt;/<span class="name">contextPath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置web-xml（前端控制器配置）"><a href="#配置web-xml（前端控制器配置）" class="headerlink" title="配置web.xml（前端控制器配置）"></a>配置web.xml（前端控制器配置）</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"3.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 表示容器启动时 加载上下文配置  这里指定spring 相关配置 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 启用spring容器环境上下文监听 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 编码过滤 utf-8 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>char encoding filter<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- servlet请求分发器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:servlet-context.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 表示启动容器时初始化该Servlet --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这是拦截请求, /代表拦截所有请求,拦截所有请求 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置servlet-context-xml"><a href="#配置servlet-context-xml" class="headerlink" title="配置servlet-context.xml"></a>配置servlet-context.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 扫描com.shsxt.controller 下包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.shsxt.controller"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- mvc 请求映射 处理器与适配器配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置视图解析器  默认的视图解析器- --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"defaultViewResolver"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"viewClass"</span> <span class="attr">value</span>=<span class="string">"org.springframework.web.servlet.view.JstlView"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"contentType"</span> <span class="attr">value</span>=<span class="string">"text/html"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>至此，环境配置基本完成了，我们来小试一波</p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="添加视图页面（jsp页面）"><a href="#添加视图页面（jsp页面）" class="headerlink" title="添加视图页面（jsp页面）"></a>添加视图页面（jsp页面）</h2><p>​    因为我们在servlet-context.xml中配置的视图解析器，配置的是WEB-INF下的JSP目录和后缀.jsp，所以SpringMVC在解析视图的时候，只会解析改目录下的jsp文件，所以添加视图页面的时候需要新建一个jsp目录。<img src="http://pg0l2q23d.bkt.clouddn.com/first%20page.jpg" alt=""></p><h2 id="创建Controller类"><a href="#创建Controller类" class="headerlink" title="创建Controller类"></a>创建Controller类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span> <span class="comment">// 定义为controller类</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"hello"</span>) <span class="comment">// 将url和类绑定</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"index"</span>) <span class="comment">// 将url和方法绑定 （配置映射关系）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello_springmvc"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="启动和访问"><a href="#启动和访问" class="headerlink" title="启动和访问"></a>启动和访问</h2><p>1、启动jetty</p><p><img src="http://pg0l2q23d.bkt.clouddn.com/%E5%90%AF%E5%8A%A8jetty.jpg" alt=""></p><p>2、访问</p><p><strong>本机ip:端口号/jetty的访问地址/类访问路径/方法访问路径</strong><img src="http://pg0l2q23d.bkt.clouddn.com/%E7%AC%AC%E4%B8%80%E6%AC%A1mvc.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么叫MVC&quot;&gt;&lt;a href=&quot;#什么叫MVC&quot; class=&quot;headerlink&quot; title=&quot;什么叫MVC&quot;&gt;&lt;/a&gt;什么叫MVC&lt;/h1&gt;&lt;p&gt;​    &lt;strong&gt;模型-视图-控制器（MVC）&lt;/strong&gt; 是一个众所周知的以设计界面应用程序
      
    
    </summary>
    
      <category term="SpringMVC" scheme="http://www.dlhblog.online/categories/SpringMVC/"/>
    
    
  </entry>
  
  <entry>
    <title>Mybatis学习(8)-mybatis Dao层、Service层封装</title>
    <link href="http://www.dlhblog.online/2018/10/10/Mybatis%E5%AD%A6%E4%B9%A0-8/"/>
    <id>http://www.dlhblog.online/2018/10/10/Mybatis学习-8/</id>
    <published>2018-10-10T14:27:59.000Z</published>
    <updated>2018-10-10T14:38:35.336Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Dao层-BaseMapper定义与实现"><a href="#Dao层-BaseMapper定义与实现" class="headerlink" title="Dao层 BaseMapper定义与实现"></a>Dao层 BaseMapper定义与实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shsxt.base;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.dao.DataAccessException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseMapper</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加记录不返回主键</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> DataAccessException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(T entity)</span> <span class="keyword">throws</span> DataAccessException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> DataAccessException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertBatch</span><span class="params">(List&lt;T&gt; entities)</span> <span class="keyword">throws</span> DataAccessException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询总记录数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">queryCountByParams</span><span class="params">(Map map)</span> <span class="keyword">throws</span> DataAccessException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询记录 通过 id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">queryById</span><span class="params">(Integer id)</span> <span class="keyword">throws</span> DataAccessException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询记录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">queryForPage</span><span class="params">(BaseQuery baseQuery)</span> <span class="keyword">throws</span></span></span><br><span class="line"><span class="function">            DataAccessException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询记录不带分页情况</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">queryByParams</span><span class="params">(Map map)</span> <span class="keyword">throws</span> DataAccessException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新记录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(T entity)</span> <span class="keyword">throws</span> DataAccessException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量更新</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> DataAccessException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateBatch</span><span class="params">(Map map)</span> <span class="keyword">throws</span> DataAccessException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除记录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(Integer id)</span> <span class="keyword">throws</span> DataAccessException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteBatch</span><span class="params">(<span class="keyword">int</span>[] ids)</span> <span class="keyword">throws</span> DataAccessException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Service层-BaseService层定义与实现"><a href="#Service层-BaseService层定义与实现" class="headerlink" title="Service层 BaseService层定义与实现"></a>Service层 BaseService层定义与实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shsxt.base;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.PageHelper;</span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.PageInfo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseService</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> BaseMapper&lt;T&gt; baseMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(T entity)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = baseMapper.insert(entity);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量添加记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entities</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertBatch</span><span class="params">(List&lt;T&gt; entities)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> baseMapper.insertBatch(entities);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据参数统计记录数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">queryCountByParams</span><span class="params">(Map map)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> baseMapper.queryCountByParams(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询记录通过 id</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">queryById</span><span class="params">(Integer id)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        AssertUtil.isNull(id, <span class="string">"记录 id 非空!"</span>);</span><br><span class="line">        <span class="keyword">return</span> baseMapper.queryById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> baseQuery</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PageInfo&lt;T&gt; <span class="title">queryForPage</span><span class="params">(BaseQuery baseQuery)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        PageHelper.startPage(baseQuery.getPageNum(), baseQuery.getPageSize());</span><br><span class="line">        List&lt;T&gt; list = baseMapper.queryForPage(baseQuery);</span><br><span class="line">        PageInfo&lt;T&gt; pageInfo = <span class="keyword">new</span> PageInfo&lt;T&gt;(list);</span><br><span class="line">        <span class="keyword">return</span> pageInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">queryByParams</span><span class="params">(Map map)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> baseMapper.queryByParams(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(T entity)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> baseMapper.update(entity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量更新</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateBatch</span><span class="params">(Map map)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> baseMapper.updateBatch(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(Integer id)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 判断 空</span></span><br><span class="line">        AssertUtil.isNull(id, <span class="string">"记录 id 非空！"</span>);</span><br><span class="line">        AssertUtil.isNull(queryById(id), <span class="string">"待删除的记录不存在!"</span>);</span><br><span class="line">        <span class="keyword">return</span> baseMapper.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteBatch</span><span class="params">(<span class="keyword">int</span>[] ids)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        AssertUtil.isNull(ids.length == <span class="number">0</span>, <span class="string">"请至少选择一项记录!"</span>);</span><br><span class="line">        <span class="keyword">return</span> baseMapper.deleteBatch(ids);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="BaseQuery类封装"><a href="#BaseQuery类封装" class="headerlink" title="BaseQuery类封装"></a>BaseQuery类封装</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shsxt.base;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseQuery</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页页码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pageNum = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每页记录数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pageSize = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPageNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pageNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPageNum</span><span class="params">(<span class="keyword">int</span> pageNum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pageNum = pageNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPageSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pageSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPageSize</span><span class="params">(<span class="keyword">int</span> pageSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pageSize = pageSize;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参数异常处理"><a href="#参数异常处理" class="headerlink" title="参数异常处理"></a>参数异常处理</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shsxt.base;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AssertUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 表达式结果真时判断</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">isTrue</span><span class="params">(Boolean expression, String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (expression) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ParamException(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">isTure</span><span class="params">(Boolean expression)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (expression) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ParamException(<span class="string">"false"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参数为空时</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">isNull</span><span class="params">(Object object, String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ParamException(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参数不空时</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">notNull</span><span class="params">(Object object, String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (object != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ParamException(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="异常类定义"><a href="#异常类定义" class="headerlink" title="异常类定义"></a>异常类定义</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shsxt.base;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 参数异常类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParamException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * *</span></span><br><span class="line"><span class="comment">     * /</span></span><br><span class="line"><span class="comment">     * private static final long serialVersionUID = -5962296753554846774L;</span></span><br><span class="line"><span class="comment">     * /**</span></span><br><span class="line"><span class="comment">     * 错误状态码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> errorCode;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ParamException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 错误消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ParamException</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ParamException</span><span class="params">(<span class="keyword">int</span> errorCode, String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(msg);</span><br><span class="line">        <span class="keyword">this</span>.errorCode = errorCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getErrorCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> errorCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setErrorCode</span><span class="params">(<span class="keyword">int</span> errorCode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.errorCode = errorCode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>1、Dao层接口继承BaseMapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>2、Service层继承BaseService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> <span class="keyword">extends</span> <span class="title">BaseService</span>&lt;<span class="title">User</span>&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>3、不需要写任何代码，直接单元测试（映射sql文件中的sql已经自动生成）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(userService.queryById(<span class="number">6</span>));;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Dao层-BaseMapper定义与实现&quot;&gt;&lt;a href=&quot;#Dao层-BaseMapper定义与实现&quot; class=&quot;headerlink&quot; title=&quot;Dao层 BaseMapper定义与实现&quot;&gt;&lt;/a&gt;Dao层 BaseMapper定义与实现&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="Mybatis" scheme="http://www.dlhblog.online/categories/Mybatis/"/>
    
    
  </entry>
  
  <entry>
    <title>Mybatis学习(7)-mybatis代码自动化生成</title>
    <link href="http://www.dlhblog.online/2018/10/10/Mybatis%E5%AD%A6%E4%B9%A0-7/"/>
    <id>http://www.dlhblog.online/2018/10/10/Mybatis学习-7/</id>
    <published>2018-10-10T13:45:15.000Z</published>
    <updated>2018-10-10T14:26:52.604Z</updated>
    
    <content type="html"><![CDATA[<p>借助Maven插件实现mybatis基本crud代码生成</p><h1 id="配置pom-xml"><a href="#配置pom-xml" class="headerlink" title="配置pom.xml"></a>配置pom.xml</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>src/main/resources/generatorConfig.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="配置generatorConfig-xml"><a href="#配置generatorConfig-xml" class="headerlink" title="配置generatorConfig.xml"></a>配置generatorConfig.xml</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE generatorConfiguration</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数据库驱动--&gt;</span><span class="comment">&lt;!--数据库驱动jar包路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">classPathEntry</span> <span class="attr">location</span>=<span class="string">"G:\Java\repository\mysql\mysql-connector-java\5.1.39\mysql-connector-java-5.1.39.jar"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"DB2Tables"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressDate"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressAllComments"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数据库链接地址账号密码--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"com.mysql.jdbc.Driver"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql://127.0.0.1:3306/mybatis"</span> <span class="attr">userId</span>=<span class="string">"root"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">"123456"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceBigDecimals"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--生成 Model 类存放位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.shsxt.po"</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">targetProject</span>=<span class="string">"G:\idea\Workspaces\spring_mybatis\src\main\java"</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--生成映射文件存放位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.shsxt.mapper"</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">targetProject</span>=<span class="string">"G:\idea\Workspaces\spring_mybatis\src\main\java"</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--生成 Dao 类存放位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span> <span class="attr">targetPackage</span>=<span class="string">"com.shsxt.dao"</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetProject</span>=<span class="string">"G:\idea\Workspaces\spring_mybatis\src\main\java"</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--tableName：数据库中的表名domainObjectName:要生成的实体类类名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"account"</span> <span class="attr">domainObjectName</span>=<span class="string">"Account"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableCountByExample</span>=<span class="string">"false"</span> <span class="attr">enableUpdateByExample</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableDeleteByExample</span>=<span class="string">"false"</span> <span class="attr">enableSelectByExample</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">selectByExampleQueryId</span>=<span class="string">"false"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"card"</span> <span class="attr">domainObjectName</span>=<span class="string">"Card"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableCountByExample</span>=<span class="string">"false"</span> <span class="attr">enableUpdateByExample</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableDeleteByExample</span>=<span class="string">"false"</span> <span class="attr">enableSelectByExample</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">selectByExampleQueryId</span>=<span class="string">"false"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="执行配置"><a href="#执行配置" class="headerlink" title="执行配置"></a>执行配置</h1><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1539179480134.png" alt=""></p><p>​    执行成功后，会自动生成对应的实体类，mybatis映射文件，映射接口类，其中基本sql也已经自动生成了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;借助Maven插件实现mybatis基本crud代码生成&lt;/p&gt;
&lt;h1 id=&quot;配置pom-xml&quot;&gt;&lt;a href=&quot;#配置pom-xml&quot; class=&quot;headerlink&quot; title=&quot;配置pom.xml&quot;&gt;&lt;/a&gt;配置pom.xml&lt;/h1&gt;&lt;figure c
      
    
    </summary>
    
      <category term="Mybatis" scheme="http://www.dlhblog.online/categories/Mybatis/"/>
    
    
  </entry>
  
</feed>
