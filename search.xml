<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[JS原生Ajax]]></title>
    <url>%2Fdlh1234okok.github.io%2F2018%2F10%2F04%2FJS%E5%8E%9F%E7%94%9FAjax%2F</url>
    <content type="text"><![CDATA[一、XMLHTTPRequest Ajax技术核心是XMLHTTPRequest对象（简称XHR），是由微软首先引入的一个特性，其他浏览器提供商后来都提供了相同的实现。在XHR出现之前，Ajax式的通信必须借助一些手段来实现，大多数是使用隐藏的框架或内嵌框架。 Ajax，是Asynchronout JavaScript+XML的简写。这种技术能够向服务器请求额外的数据而无需卸载/刷新页面，会带来更好的用户体验。 1、支持原生XHR对象的浏览器创建XHR对象可以直接实例化XMLHTTPRequest。 2、在使用XHR对象时，先必须调用open()方法，它接收三个参数：要发送的请求类型（get/post）、请求的URL和表示是否异步(async)。open()方法并不会真正发送请求，而只是启动一个请求以备发送。 3、通过send()方法进行发送请求，send()方法接受一个参数，作为请求主体发送的数据。如果不需要必须填null。执行send()方法后请求就会发送到服务器上。 4、请求发送到服务端收到响应后，响应的数据会自动填充XHR对象的属性，一共有四个属性： &nbsp; 5、接受响应之后，第一步检查status属性，以确定响应已经成功返回，有如下的状态代码： 6、判断http状态值以确定响应是否成功返回 7、当使用异步调用的时候，检测readyState属性，每当readyState属性改变时，触发readyStatechange事件。这个属性共有五个值： &nbsp;&nbsp;二、GET与POST 1、GET请求 通过URL后的问号给服务器传递键值对数据，服务器接收到返回响应数据。特殊字符传参产生的问题可以使用encodeURIComponent()进行编码处理，中文字符的返回及传参，可以将页面保存和设置为utf-8即可，AJAX返回的数据为UTF-8。 2、POST请求 通过发送POST请求的数据，不会跟在URL后面，而是通过send()方法向服务器提交数据 &nbsp; 向服务器发送POST请求由于解析机制的原因，需要进行特别的处理。因为POST请求和Web表单提交是不同的的，需要使用XHR来模仿表单提交。 从性能上来讲POST请求比GET请求消耗更多一些，用相同数据比较，GET请求最多比POST请求快两倍&nbsp;三、封装Ajax&lt;script type=”text/javascript”&gt;var obj={ url:“user”, method:“post”, data:{name:“zs”,age:18}, async:true, success:function(result){ console.log(result); console.log(JSON.parse(result)) }, error:function(result){ console.log(result); }}ajax(obj)function ajax(obj){​ //得到XMLHTTPRequest对象​ var xhr=new XMLHttpRequest();​ //将参数格式化​ obj.data=params(obj.data);​ //判断请求方式​ if(obj.method.toUpperCase()==”GET”){​ obj.url+=(obj.url.indexOf(“?”)==-1)?”?”+obj.data:”&amp;”+obj.data;​ //open()方法：请求方式/请求路径/是否异步 xhr.open(obj.method,obj.url,obj.async);​ //发送请求​ xhr.send(null);​ }else{ // POST请求 xhr.open(obj.method,obj.url,obj.async);​ //模拟表单提交​ xhr.setRequestHeader(“Content-Type”,”application/x-www-form-urlencode”);​ //发送请求 xhr.send(obj.data);​ }​ //判断是否是异步请求​ if(obj.async){ //异步请求​ //判断响应是否完全响应​ xhr.onreadystatechange=function(){​ if(xhr.readyState==4){​ callback();​ }​ }​ }else{​ callback();​ } //回调函数 function callback(){ if(xhr.status==200){ //回调函数 obj.success(xhr.responseText);​ }else{​ obj.error(“请求失败！错误状态码”+xhr.status+”,错误原因”+xhr.statusText);​ }​ }}/ 将json格式的字符串转换成普通的参数拼接 / function params(data){ var arr=[]; if(data!=null &amp;&amp; data !=””){ ​ for(var d in data){ ​ console.log(d+” “+data[d]); ​ var name=encodeURIComponent(d); ​ var value=encodeURIComponent(data[d]); arr.push(name+”=”+value); } var param=arr.join(“&amp;”); return param; } return null; } &lt;/script&gt; &nbsp; &nbsp;同步： 提交请求–&gt;等待服务器处理–&gt;处理完毕返回这个期间客户端浏览器不能干的事，当前只能做一件事。 异步： 请求通过事件触发–&gt;服务器处理（这时浏览器仍然可以做其他事情）–&gt;处理完毕。可以同时做多件事情&nbsp;四、JQuery封装的AJax $.ajax(){} $.get(){} $.getJson(){} $.post(){}]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Spring-IoC]]></title>
    <url>%2Fdlh1234okok.github.io%2F2018%2F10%2F04%2FSpring-IoC%2F</url>
    <content type="text"><![CDATA[一、Spring框架概念 spring 是众多开源 java 项目中的一员，基于分层的 javaEE 应用一站式轻量级开源框架，主要核心是 Ioc(控制反转/依赖注入) 与 Aop(面向切面)两大技术，实现项目在开发过程中的轻松解耦， 提高项目的开发效率。 在项目中引入spring的好处： &middot;降低组件之间的耦合度，实现软件各层之间的解耦 &middot;可以使用容器提供的众多服务，如：事务管理服务、消息服务等 &middot;当使用容器管理事务时，开发人员就不需要手工控制事务，也不需要处理复杂的事务传播 &middot;容器提供单例模式支持，开发人员不再需要自己编写实现代码 &middot;容器提供了AOP技术，利用它很容易实现如权限拦截、运行期监控等功能 &nbsp; 二、Spring源码架构 1、核心容器:spring-beans 和 spring-core 模块是 Spring 框架的核心模块，包含控制反转（Inversion of Control, IoC）和依赖注入（Dependency Injection, DI） ,核心容器提供 Spring 框架的基本功能。核心容器的主要组件是 BeanFactory， 工厂模式的实现。 BeanFactory 使用控制反转（IOC） 思想将应用程序的配置和依赖性规范与实际的应用程序代码分开。 2、Spring 上下文 Spring Context： Spring 上下文是一个配置文件，向 Spring 框架提供上下文信息。 Spring 上下文包括企业服务，例如 JNDI、 EJB、电子邮件、国际化、校验和调度功能。 3、Spring-Expression 模块是统一表达式语言（unified EL）的扩展模块，可以查询、管理运行中的对象，同时也方便的可以调用对象方法、操作数组、集合等。它的语法类似于传统 EL，但提供了额外的功能，最出色的要数函数调用和简单字符串的模板函数。 4、Spring-AOP： spring-aop 是 Spring 的另一个核心模块, 在 Spring中，他是以 JVM 的动态代理技术为基础，然后设计出了一系列的Aop 横切实现，比如前置通知、返回通知、异常通知等。 通过其配置管理特性， Spring AOP 模块直接将面向切面的编程功能集成到了 Spring 框架中。所以，可以很容易地使 Spring 框架管理的任何对象支持 AOP。 …… &nbsp;三、Spring容器工厂的简单实现 import org.dom4j.Document;import org.dom4j.DocumentException;import org.dom4j.Element;import org.dom4j.XPath;import org.dom4j.io.SAXReader; import java.lang.reflect.Method;import java.net.URL;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map; public class Factory_01 implements Factory {​ // Map集合用来存放id和class​ Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();​ List&lt;Bean&gt; beans = new ArrayList&lt;&gt;(); &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 实例化工厂对象时就完成以下操作&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Factory_01(String fileName) { &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; xml解析&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;.pathXml(fileName); &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 实例化对象&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;.instanceBean(); &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 属性赋值&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;.setProperty(); } &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 属性赋值&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; setProperty() { &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;try&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; { &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt;(&lt;span style=&quot;color: #0000ff;&quot;&gt;null&lt;/span&gt;!=beans &amp;amp;&amp;amp; beans.size()&amp;gt;0&lt;span style=&quot;color: #000000;&quot;&gt;){ &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;(Bean bean:beans){ List&lt;/span&gt;&amp;lt;Property&amp;gt; properties=&lt;span style=&quot;color: #000000;&quot;&gt;bean.getProperties(); &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt;(&lt;span style=&quot;color: #0000ff;&quot;&gt;null&lt;/span&gt;!=properties &amp;amp;&amp;amp; properties.size()&amp;gt;0&lt;span style=&quot;color: #000000;&quot;&gt;){ &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;(Property property:properties){ &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 得到property的id和ref&lt;/span&gt; String id=&lt;span style=&quot;color: #000000;&quot;&gt;property.getId(); String ref&lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt;property.getRef(); &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; set方法中首字母大写&lt;/span&gt; id=id.toUpperCase().charAt(0)+id.substring(1&lt;span style=&quot;color: #000000;&quot;&gt;); &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 获取到当前class&lt;/span&gt; Class clz=&lt;span style=&quot;color: #000000;&quot;&gt;map.get(bean.getId()).getClass(); &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 找到set方法&lt;/span&gt; Method method=clz.getDeclaredMethod(&quot;set&quot;+&lt;span style=&quot;color: #000000;&quot;&gt;id,map.get(ref).getClass()); method.invoke(map.get(bean.getId()),map.get(ref)); } } } } } &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;catch&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; (Exception e) { e.printStackTrace(); } } &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 实例化&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; instanceBean() { &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color: #0000ff;&quot;&gt;null&lt;/span&gt; != beans &amp;amp;&amp;amp; beans.size() &amp;gt; 0&lt;span style=&quot;color: #000000;&quot;&gt;) { &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;try&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; { &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; (Bean bean : beans) { &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 放到map集合中，通过key找到value，实例化该对象&lt;/span&gt; map.put(bean.getId(), Class.forName(bean.getClz()).newInstance());​ }​ } catch (ClassNotFoundException e) {​ e.printStackTrace();​ } catch (IllegalAccessException e) {​ e.printStackTrace();​ } catch (InstantiationException e) {​ e.printStackTrace();​ } } } &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;/**&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; * xml解析 * * &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;@param&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; fileName xml文件名 &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; pathXml(String fileName) { &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 获取xml文件&lt;/span&gt; URL url = &lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;.getClass().getClassLoader().getResource(fileName); &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;try&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; { &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color: #0000ff;&quot;&gt;null&lt;/span&gt; !=&lt;span style=&quot;color: #000000;&quot;&gt; url) { &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 获取解析器&lt;/span&gt; SAXReader saxReader = &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; SAXReader(); &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 解析xml文件，返回document对象&lt;/span&gt; Document document =&lt;span style=&quot;color: #000000;&quot;&gt; saxReader.read(url); &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 获取xpath对象&lt;/span&gt; XPath xPath = document.createXPath(&quot;beans/bean&quot;&lt;span style=&quot;color: #000000;&quot;&gt;); &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 查询选择的节点，返回的是list集合&lt;/span&gt; List&amp;lt;Element&amp;gt; elements =&lt;span style=&quot;color: #000000;&quot;&gt; xPath.selectNodes(document); &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 为空判断&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color: #0000ff;&quot;&gt;null&lt;/span&gt; != elements &amp;amp;&amp;amp; elements.size() &amp;gt; 0&lt;span style=&quot;color: #000000;&quot;&gt;) { &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; (Element element : elements) { &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 获取property&lt;/span&gt; xPath = document.createXPath(&quot;property&quot;&lt;span style=&quot;color: #000000;&quot;&gt;); &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 查询选择的节点&lt;/span&gt; List&amp;lt;Element&amp;gt; subElements =&lt;span style=&quot;color: #000000;&quot;&gt; xPath.selectNodes(element); &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 为空判断&lt;/span&gt; List&amp;lt;Property&amp;gt; properties = &lt;span style=&quot;color: #0000ff;&quot;&gt;null&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 实例化Bean&lt;/span&gt; Bean bean = &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; Bean(element.attributeValue(&quot;id&quot;), element.attributeValue(&quot;class&quot;&lt;span style=&quot;color: #000000;&quot;&gt;)); &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color: #0000ff;&quot;&gt;null&lt;/span&gt; != subElements &amp;amp;&amp;amp; subElements.size() &amp;gt; 0&lt;span style=&quot;color: #000000;&quot;&gt;) { properties &lt;/span&gt;= &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;(); &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; (Element subElement : subElements) { &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 实例化Property&lt;/span&gt; Property property = &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; Property(subElement.attributeValue(&quot;id&quot;), subElement.attributeValue(&quot;ref&quot;&lt;span style=&quot;color: #000000;&quot;&gt;)); &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 将对象放到集合中&lt;/span&gt; properties.add(property);​ }​ bean.setProperties(properties);​ }​ beans.add(bean);​ }​ }​ }​ } catch (DocumentException e) {​ e.printStackTrace();​ }​ } @Override &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Object getObj(String name) { &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 通过id返回class&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; map.get(name); } }View Code &nbsp; 四、Spring多文件的加载情况 1、ClassPathXmlApplicationContext类的构造器参数是一个可变长参数 可同时配置多个xml文件 2、import标签，将自配置文件导入总配置 &nbsp; 四、Spring Ioc实例化bean的三种方式 1、构造器的方式实例化bean对象 通过默认构造器实例化bean对象，默认空构造器必须存在 &nbsp; 2、静态工厂方式实例化bean 要有工厂类和静态工厂方法 通过反射调用静态工厂的静态方法，将该静态方法的返回值作为bean的实例，可以统一管理各个bean的创建 &nbsp; &nbsp; 3、实例化工厂方式实例化bean 工厂类和实例化方法 工厂方法为非静态，需要配置工厂bean，并在bean中配置factory-bean和factory-method属性 1) 可用于集成其他框架的bean创建管理方法&nbsp; 2)能够使bean和factory的角色互换 &nbsp; 五、Spring 依赖注入 在面向接口编程中，依赖接口可以动态传入多种实现 1、set注入 property标签，属性的set方法（不会出现循环引用问题） name：属性名称；ref：bean对象的引用；value：给属性直接赋值（List，Set，Map，properties） 2、构造器注入 constructor-arg标签，带参构造器（会出现循环引用问题，彼此互相依赖对方导致bean无法实例化） name：属性名称；ref：bean对象id的引用；index：属性的索引 &nbsp; 3、静态工厂注入 &nbsp; 4、实例化工厂注入 &nbsp; 六、注解方式注入bean xml配置：加入context命名空间和xsd地址 添加&lt;context:annotation-config/&gt;配置 &nbsp; @Resource （属于J2EE） @Autowired （Spring） 常用于属性字段或set方法上 区别： @Autowired 默认按bean的类型匹配，和@Qualifier配合使用可以修改按名称匹配 @Resource 默认按名称进行装配，可以通过name属性指定，如果没有指定name属性，当注解写在字段上时，默认取字段名进行匹配注入，如果注解写在set方法上默认取属性名进行装配。当找不到与名称匹配的bean时才按照类型进行装配（当name属性指定，只会按照名称装配） &nbsp; 注解方式注入的简单模拟： import com.shsxt.annotaioms.Component;import com.shsxt.annotaioms.Component02;import com.shsxt02.controller.UserController; import java.io.File;import java.lang.reflect.Field;import java.net.URL;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map; public class Test { &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt; List&amp;lt;String&amp;gt; clz=&lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;(); &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt; Map&amp;lt;String,Object&amp;gt; map=&lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;(); &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; main(String[] args){ String pkg&lt;/span&gt;=&quot;com.shsxt02&quot;&lt;span style=&quot;color: #000000;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 获取标记注解的类&lt;/span&gt; getClZ(pkg);​ // 实例化这些类 instanceClz();​ // 属性赋值 property();​ UserController userController= (UserController) map.get(“userController”);​ userController.test();​ } &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; property() { &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;try&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; { &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color: #0000ff;&quot;&gt;null&lt;/span&gt;!=&lt;span style=&quot;color: #000000;&quot;&gt;map){ &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;(Map.Entry entry:map.entrySet()){ Field[] fields&lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt;entry.getValue().getClass().getDeclaredFields(); &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color: #0000ff;&quot;&gt;null&lt;/span&gt;!=&lt;span style=&quot;color: #000000;&quot;&gt;fields){ &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;(Field field:fields){ Component02 component02&lt;/span&gt;=field.getAnnotation(Component02.&lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;); &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color: #0000ff;&quot;&gt;null&lt;/span&gt;!=&lt;span style=&quot;color: #000000;&quot;&gt;component02){ field.setAccessible(&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;); field.set(entry.getValue(),map.get(component02.value())); } } } } } } &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;catch&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; (IllegalAccessException e) { e.printStackTrace(); } } &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; instanceClz() { &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;try&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; { &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color: #0000ff;&quot;&gt;null&lt;/span&gt;!=clz &amp;amp;&amp;amp; clz.size()&amp;gt;0&lt;span style=&quot;color: #000000;&quot;&gt;){ &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;(String cls:clz){ &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;System.out.println(str);&lt;/span&gt; cls=cls.replace(&quot;.class&quot;,&quot;&quot;&lt;span style=&quot;color: #000000;&quot;&gt;); &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;System.out.println(cls);&lt;/span&gt; Component component=Class.forName(cls).getAnnotation(Component.&lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;); &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color: #0000ff;&quot;&gt;null&lt;/span&gt;!=&lt;span style=&quot;color: #000000;&quot;&gt;component){ &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;System.out.println(cls);&lt;/span&gt; String id=&lt;span style=&quot;color: #000000;&quot;&gt; getId(cls); Object obj&lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt;Class.forName(cls).newInstance(); map.put(id,obj); } } } } &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;catch&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; (ClassNotFoundException e) { e.printStackTrace(); } &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;catch&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; (IllegalAccessException e) { e.printStackTrace(); } &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;catch&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; (InstantiationException e) { e.printStackTrace(); } } &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; String getId(String cls) { cls&lt;/span&gt;=cls.substring(cls.lastIndexOf(&quot;.&quot;)+1&lt;span style=&quot;color: #000000;&quot;&gt;); cls&lt;/span&gt;= cls.toLowerCase().charAt(0)+cls.substring(1&lt;span style=&quot;color: #000000;&quot;&gt;); &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; cls; } &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; getClZ(String pkg) { &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 获取url&lt;/span&gt; URL url=&lt;span style=&quot;color: #000000;&quot;&gt;Thread.currentThread().getContextClassLoader().getResource(repStr(pkg)); String urlPath&lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt;url.getFile(); &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;System.out.println(urlPath);&lt;/span&gt; String[] subFileStrs=&lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; File(urlPath).list(); &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;(String str:subFileStrs){ String subFilePath&lt;/span&gt;=urlPath+&quot;/&quot;+&lt;span style=&quot;color: #000000;&quot;&gt;str; &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;System.out.println(subFilePath);&lt;/span&gt; File subFile=&lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; File(subFilePath); &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; (subFile.isDirectory()){ &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;System.out.println(pkg+&quot;.&quot;+subFile.getName());&lt;/span&gt; getClZ(pkg+&quot;.&quot;+&lt;span style=&quot;color: #000000;&quot;&gt;subFile.getName()); }&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;else&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;{ clz.add(pkg&lt;/span&gt;+&quot;.&quot;+&lt;span style=&quot;color: #000000;&quot;&gt;subFile.getName()); } } } &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; String repStr(String str){ str&lt;/span&gt;=str.replace(&quot;.&quot;,&quot;/&quot;&lt;span style=&quot;color: #000000;&quot;&gt;); &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; str; } } &nbsp; 七、Spring IOC 容器自动扫描管理bean xml配置&lt;context:component-scan base-package=””/&gt; 建议的注解 Dao层：@Repository Service层：@Service 控制层：@Controller 不明确：@Component &nbsp; 八、Bean的作用域问题(scope) 1、singleton作用域（单例，默认） lazy-init 懒加载 默认为false 如果等于true时，spring容器启动的时候不会去实例化这个bean，而是在程序调用时才会去实例化 在启动情况下实例化所有singleton的bean对象并缓存与容器中单例的好处： 1、提前发现潜在的配置问题 2、bean对象存在于缓存中，使用时不用再实例化bean，提高执行性能 无状态对象适合做单例bean对象（无可变的成员变量） &nbsp; 2、prototype作用域（原型） 每次向Spring容器请求获取Bean都返回一个全新的Bean，相对于&ldquo;singleton&rdquo;来说就是不缓存Bean。IOC不会维护该对象 &nbsp; 3、Web应用中的作用域（request、session、globalsession） request作用域：每一次请求 session：当前会话 globlasession：同session（Portlet环境）]]></content>
      <categories>
        <category>Spring</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Spring-AOP]]></title>
    <url>%2Fdlh1234okok.github.io%2F2018%2F10%2F04%2FSpring-AOP%2F</url>
    <content type="text"><![CDATA[一、代理模式 1、代理模式的设计原则： &middot;代理类与委托类具有相似的行为 &middot;代理类增强委托类的行为 2、代理模式实现的三要素： 代理角色、目标角色、共同行为 实现行为接口，持有目标对象的引用 &nbsp; 3、静态代理和动态代理 1）静态代理 特点：程序运行前制作代理角色 代理目标角色单一 代理类数量无法控制 2）动态代理 程序运行期动态创建代理角色 &middot;JDK动态代理，回调方式实现 &middot;cglib动态代理，继承方式实现 区别： JDK动态代理：委托类必须要有接口，制作过程较快，执行慢 Cglib动态代理：委托类可以没有接口，继承的思维来实现相似性，制作代理过程比较慢，执行快 &nbsp; 二、AOP（面相切面编程） AOP的两种实现机制是JDK动态代理和cglib动态代理 AOP主要应用于日志记录，性能统计，安全控制，事务处理额等方面，实现公共行为的重复使用 降低模块之间的耦合度，提高业务代码的聚合度（高内聚低耦合） 提高代码的复用性 提高系统的扩展性 Aop基本概念 Joinpoint（连接点）：spring中指被拦截到的每一个方法 Pointcut（切入点）：规定拦截哪些方法，对那些方法进行处理 Advice（通知）：拦截到每一个连接点后要做的操作 前置通知、返回通知、最终通知、异常通知、环绕通知 Aspect（切面）：切入点与通知的结合 Target（目标对象）：被代理的目标对象 Weave（织入） Introduction（引入） &nbsp; 三、AOP注解实现 1、XML：引入命名空间，开启aop代理环境 2、Maven项目引入Aspect坐标 3、创建切面类 @Aspect定义切面类 4、声明方法为切入点 @Pointcut 匹配规则定义 execution 5、创建通知方法 package com.shsxt02.proxy;import org.aspectj.lang.ProceedingJoinPoint;import org.aspectj.lang.annotation.;import org.springframework.stereotype.Component;@Aspect@Componentpublic class LogCut { @Pointcut(“execution( com.shsxt02.service...(..))”) public void cut() { } @After(value = “cut()”) public void before(){ System.out.println(“前置通知，目标方法执行前执行…”); } @AfterReturning(value = “cut()”) public void afterReturn(){ System.out.println(“返回通知，方法正常结束后执行…”); } @After(value = “cut()”) public void after(){ System.out.println(“最终通知，方法是否发生异常均会执行…”); } @AfterThrowing(value = “cut()”,throwing = “e”) public void afterThrow(Exception e){ System.out.println(“异常通知，异常时执行…”+e); } // 环绕通知 @Around(value = “cut()”) public Object around(ProceedingJoinPoint pjp) throws Throwable { Object result=null; System.out.println(“环绕前置…”); System.out.println(“环绕通知…”); System.out.println(“方法签名”+pjp.getSignature()); System.out.println(“目标对象”+pjp.getTarget()); System.out.println(“种类”+pjp.getKind()); Object[] objects=pjp.getArgs(); for(Object o:objects){ System.out.println(“参数”+o); } result= pjp.proceed(); // 返回的目标对象 System.out.println(“环绕后置…”); return result; }} &nbsp; 四、AOP XML配置实现 &nbsp; &nbsp; 五、AOP拦截注释 &nbsp; 如果目标角色实现了接口，AOP有代理，返回的是代理对象，需要通过接口接收。]]></content>
      <categories>
        <category>Spring</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Spring-定时器和邮件发送]]></title>
    <url>%2Fdlh1234okok.github.io%2F2018%2F10%2F04%2FSpring-%E5%AE%9A%E6%97%B6%E5%99%A8%E5%92%8C%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81%2F</url>
    <content type="text"><![CDATA[一、定时器的实现（task） 1、在XML配置文件中引入约束 xmlns:task=”http://www.springframework.org/schema/task&quot; http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd 2、编写定时器类，和方法 &nbsp; 3、使用xml配置文件 加载配置文件就可以执行定时任务了，图为两秒执行一次。 &nbsp; 二、邮件发送 1、Java mail发送邮件 1) Maven项目引入java mail坐标，也可以手动安装 package com.shsxt.service;import org.apache.commons.lang3.StringUtils;import javax.activation.DataHandler;import javax.activation.DataSource;import javax.activation.FileDataSource;import javax.mail.;import javax.mail.internet.;import java.io.File;import java.io.UnsupportedEncodingException;import java.nio.charset.Charset;import java.util.Properties;public class MailService { public void mail(String fromUser, String[] receivers, String setSubject, String content, String[] files) { // 判断参数是否为空 if (!judgment(fromUser, receivers, setSubject, content)){ return; } // 获取session Session session = init(fromUser); Message message = new MimeMessage(session); // 发送人 sender(fromUser, message);​ // 收件人 recipients(receivers, message);​ // 主题 subject(message,setSubject);​ // 设置html和附件​ Multipart multipart = new MimeMultipart();​ // html内容 Content(content, multipart);​ // 判断是否有附件​ if (null != files &amp;&amp; files.length &gt; 0) {​ // 上传附件 fileUp(files, multipart);​ }​ settingContext(message, multipart);​ // 发送 send(message);​ } // 8、发送 private void send(Message message) { try { Transport.send(message); } catch (MessagingException e) { e.printStackTrace(); } } // 7、设置上下文 private void settingContext(Message message, Multipart multipart) { try { message.setContent(multipart); } catch (MessagingException e) { e.printStackTrace(); } } // 6、设置主题 private void subject(Message message,String setSubject) { try { message.setSubject(setSubject); } catch (MessagingException e) { e.printStackTrace(); } } // 5、上传附件 private void fileUp(String[] files, Multipart multipart) { try { for (String filePath : files) { BodyPart file = new MimeBodyPart(); File temp = new File(filePath); file.setDataHandler(new DataHandler(new FileDataSource(new File(filePath)))); file.setFileName(MimeUtility.encodeText(temp.getName())); multipart.addBodyPart(file); } } catch (Exception e) { e.printStackTrace(); } } // 4、设置html内容 private void Content(String content, Multipart multipart) { try { BodyPart html = new MimeBodyPart(); html.setContent(content, “text/html;charset=utf-8”); multipart.addBodyPart(html); } catch (MessagingException e) { e.printStackTrace(); } } // 3、设置收件人 private void recipients(String[] receivers, Message message) { try { Address[] addresses = new InternetAddress[receivers.length]; for (int i = 0; i &lt; addresses.length; i++) { addresses[i] = new InternetAddress(receivers[i]); } message.setRecipients(Message.RecipientType.TO, addresses); } catch (MessagingException e) { e.printStackTrace(); } } // 2、设置发送人 private void sender(String fromUser, Message message) { try { Address from = new InternetAddress(fromUser); message.setFrom(from); } catch (Exception e) { e.printStackTrace(); } } // 1、初始化 private Session init(String fromUser) { Properties properties = new Properties(); // 邮箱服务器主机 properties.put(“mail.smtp.host”, “smtp.163.com”); properties.put(“mail.smtp.auth”, “true”); properties.put(“mail.smtp.port”, 25); Session session = Session.getDefaultInstance(properties, new Authenticator() { @Override protected PasswordAuthentication getPasswordAuthentication() { return new PasswordAuthentication(“15657262398@163.com“, “d140120”); } }); return session; } // 0、判断参数是否为空 private boolean judgment(String fromUser, String[] receivers, String setSubject, String content) { boolean flag = true; if (StringUtils.isBlank(fromUser) || StringUtils.isAnyBlank(receivers) || StringUtils.isBlank(setSubject) || StringUtils.isBlank(content)) { flag = false; } return flag; }} &nbsp; 2、spring环境下发送邮件 XML配置 &lt;?xml version=”1.0” encoding=”UTF-8”?&gt;&lt;beans xmlns=”http://www.springframework.org/schema/beans&quot; xmlns:xsi=”http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:context=”http://www.springframework.org/schema/context&quot; xsi:schemaLocation=”http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt; &lt;context:component-scan base-package=”com.mail”/&gt; &lt;bean id=”mailSender” class=”org.springframework.mail.javamail.JavaMailSenderImpl”&gt; &lt;property name=”host” value=”smtp.163.com”/&gt;&lt;!–发送email的邮件服务器主机名–&gt; &lt;property name=”username” value=”test@163.com“/&gt;&lt;!–用户名–&gt; &lt;property name=”password” value=”test”/&gt;&lt;!–授权码–&gt; &lt;/bean&gt; &lt;bean id=”simpleMailMessage” class=”org.springframework.mail.SimpleMailMessage”&gt; &lt;property name=”subject” value=”hello mail”/&gt; &lt;property name=”from” value=”15657262398@163.com“/&gt; &lt;/bean&gt;&lt;/beans&gt; 装配和使用邮件发送器 package com.mail;import org.springframework.mail.MailSender;import org.springframework.mail.SimpleMailMessage;import org.springframework.stereotype.Service;import javax.annotation.Resource;@Servicepublic class OrderManagerImpl implements OrderManager { @Resource private MailSender mailSender; @Resource private SimpleMailMessage simpleMailMessage; @Override public void placeOrder() { SimpleMailMessage msg=new SimpleMailMessage(this.simpleMailMessage); msg.setTo(“test@163.com“); msg.setText(“hello”); this.mailSender.send(msg); }} &nbsp;]]></content>
      <categories>
        <category>Spring</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Spring-整合JDBC-事务-远程方法调用RMI]]></title>
    <url>%2Fdlh1234okok.github.io%2F2018%2F10%2F04%2FSpring-%E6%95%B4%E5%90%88JDBC-%E4%BA%8B%E5%8A%A1-%E8%BF%9C%E7%A8%8B%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8RMI%2F</url>
    <content type="text"><![CDATA[一、spring整合JDBC spring整合jdbc使用了模版方法设计模式 定义一套规范，固定流程不变，传入可变内容 1、Maven项目添加依赖 spring-context坐标依赖 mysql驱动包 c3p0连接池 spring jdbc 2、准备数据库的配置文件 3、xml配置 &lt;?xml version=”1.0” encoding=”UTF-8”?&gt;&lt;beans xmlns=”http://www.springframework.org/schema/beans&quot; xmlns:xsi=”http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:context=”http://www.springframework.org/schema/context&quot; xsi:schemaLocation=”http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt; &lt;!–配置扫描器–&gt; &lt;context:component-scan base-package=”com.shsxt”/&gt; &lt;!–加载properties–&gt; &lt;context:property-placeholder location=”classpath:jdbc.properties”/&gt; &lt;!–配置数据源c3p0–&gt; &lt;bean id=”dataSource” class=”com.mchange.v2.c3p0.ComboPooledDataSource”&gt; &lt;property name=”driverClass” value=”${jdbc.driver}”/&gt; &lt;property name=”jdbcUrl” value=”${jdbc.url}”/&gt; &lt;property name=”user” value=”${jdbc.user}”/&gt; &lt;property name=”password” value=”${jdbc.password}”/&gt; &lt;/bean&gt; &lt;!–配置JdbcTemplate–&gt; &lt;bean id=”jdbcTemplate” class=”org.springframework.jdbc.core.JdbcTemplate”&gt; &lt;property name=”dataSource” ref=”dataSource”/&gt; &lt;/bean&gt;&lt;/beans&gt; 这里使用了c3p0数据源 C3P0有自动回收空闲连接功能； dbcp没有自动回收空闲连接功能； 4、使用spring jdbc完成crud操作 import com.shsxt.po.Account;import com.sun.xml.internal.bind.v2.model.core.ID;import org.apache.commons.lang3.StringUtils;import org.springframework.jdbc.core.BatchPreparedStatementSetter;import org.springframework.jdbc.core.JdbcTemplate;import org.springframework.jdbc.core.PreparedStatementCreator;import org.springframework.jdbc.core.RowMapper;import org.springframework.jdbc.support.GeneratedKeyHolder;import org.springframework.jdbc.support.KeyHolder;import org.springframework.stereotype.Component;import org.springframework.stereotype.Repository; import javax.annotation.Resource;import javax.lang.model.element.Name;import java.math.BigDecimal;import java.sql.*;import java.util.ArrayList;import java.util.List;@Repositorypublic class AccountDaoImpl implements AccountDao {​ @Resource​ private JdbcTemplate jdbcTemplate; &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;/**&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; * 添加记录返回受影响行数 * &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;@param&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; account * &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;@return&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; @Override &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Integer saveAccount(Account account) { String sql&lt;/span&gt;=&quot;insert into account (name,type,money,remark,create_time,update_time,userId) values(?,?,?,?,?,?,?)&quot;&lt;span style=&quot;color: #000000;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; jdbcTemplate.update(sql,account.getName(),account.getType(),account.getMoney(),account.getRemark(),account.getCreate_time(),account.getUpdate_time(),account.getUserId()); } &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;/**&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; * 添加记录返回主键 * &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;@param&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; account * &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;@return&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; @Override &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Integer saveAccountHasPrimaryKey(Account account) { String sql&lt;/span&gt;=&quot;insert into account (name,type,money,remark,create_time,update_time,userId) values(?,?,?,?,?,?,?)&quot;&lt;span style=&quot;color: #000000;&quot;&gt;; KeyHolder keyHolder&lt;/span&gt;=&lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; GeneratedKeyHolder(); jdbcTemplate.update(&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; PreparedStatementCreator() { @Override &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; PreparedStatement createPreparedStatement(Connection con) &lt;span style=&quot;color: #0000ff;&quot;&gt;throws&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; SQLException { PreparedStatement ps&lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt;con.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS); ps.setString(&lt;/span&gt;1&lt;span style=&quot;color: #000000;&quot;&gt;,account.getName()); ps.setString(&lt;/span&gt;2&lt;span style=&quot;color: #000000;&quot;&gt;,account.getType()); ps.setBigDecimal(&lt;/span&gt;3&lt;span style=&quot;color: #000000;&quot;&gt;,account.getMoney()); ps.setString(&lt;/span&gt;4&lt;span style=&quot;color: #000000;&quot;&gt;,account.getRemark()); ps.setObject(&lt;/span&gt;5&lt;span style=&quot;color: #000000;&quot;&gt;,account.getCreate_time()); ps.setObject(&lt;/span&gt;6&lt;span style=&quot;color: #000000;&quot;&gt;,account.getUpdate_time()); ps.setInt(&lt;/span&gt;7&lt;span style=&quot;color: #000000;&quot;&gt;,account.getUserId()); &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; ps; } },keyHolder); &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; keyHolder.getKey().intValue(); } &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;/**&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; * 批量添加记录 * &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;@param&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; accounts * &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;@return&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; @Override &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; Integer saveAccountsBatch(List&amp;lt;Account&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt; accounts) { String sql&lt;/span&gt;=&quot;insert into account (name,type,money,remark,create_time,update_time,userId) values(?,?,?,?,?,?,?)&quot;&lt;span style=&quot;color: #000000;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; jdbcTemplate.batchUpdate(sql, &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; BatchPreparedStatementSetter() { @Override &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; setValues(PreparedStatement ps, &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; i) &lt;span style=&quot;color: #0000ff;&quot;&gt;throws&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; SQLException { ps.setString(&lt;/span&gt;1&lt;span style=&quot;color: #000000;&quot;&gt;,accounts.get(i).getName()); ps.setString(&lt;/span&gt;2&lt;span style=&quot;color: #000000;&quot;&gt;,accounts.get(i).getType()); ps.setBigDecimal(&lt;/span&gt;3&lt;span style=&quot;color: #000000;&quot;&gt;,accounts.get(i).getMoney()); ps.setString(&lt;/span&gt;4&lt;span style=&quot;color: #000000;&quot;&gt;,accounts.get(i).getRemark()); ps.setObject(&lt;/span&gt;5&lt;span style=&quot;color: #000000;&quot;&gt;,accounts.get(i).getCreate_time()); ps.setObject(&lt;/span&gt;6&lt;span style=&quot;color: #000000;&quot;&gt;,accounts.get(i).getUpdate_time()); ps.setInt(&lt;/span&gt;7&lt;span style=&quot;color: #000000;&quot;&gt;,accounts.get(i).getUserId()); } @Override &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; getBatchSize() { &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; accounts.size(); } }).length; } &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;/**&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; * 统计账户记录-聚合查询 * &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;@param&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; userId * &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;@return&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; @Override &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Integer countAccountsByUserId(Integer userId) { String sql&lt;/span&gt;=&quot;select count(1) from account where userId=?&quot;&lt;span style=&quot;color: #000000;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; jdbcTemplate.queryForObject(sql,Integer.&lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;,userId); } &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;/**&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; * 根据id查询记录详情 * &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;@param&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; Id * &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;@return&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; @Override &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Account queryAccountById(Integer Id) { String sql&lt;/span&gt;=&quot;select id,userId,name,type,money,remark,update_time,create_time from account where id=?&quot;&lt;span style=&quot;color: #000000;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; (Account) jdbcTemplate.queryForObject(sql,&lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; Object[]{Id}, &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; RowMapper&amp;lt;Account&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;() { @Override &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; Account mapRow(ResultSet rs, &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; rowNum) &lt;span style=&quot;color: #0000ff;&quot;&gt;throws&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; SQLException { Account account&lt;/span&gt;=&lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Account(); account.setUpdate_time(rs.getDate(&lt;/span&gt;&quot;update_time&quot;&lt;span style=&quot;color: #000000;&quot;&gt;)); account.setRemark(rs.getString(&lt;/span&gt;&quot;remark&quot;&lt;span style=&quot;color: #000000;&quot;&gt;)); account.setType(rs.getString(&lt;/span&gt;&quot;type&quot;&lt;span style=&quot;color: #000000;&quot;&gt;)); account.setMoney(rs.getBigDecimal(&lt;/span&gt;&quot;money&quot;&lt;span style=&quot;color: #000000;&quot;&gt;)); account.setCreate_time(rs.getDate(&lt;/span&gt;&quot;create_time&quot;&lt;span style=&quot;color: #000000;&quot;&gt;)); account.setId(rs.getInt(&lt;/span&gt;&quot;id&quot;&lt;span style=&quot;color: #000000;&quot;&gt;)); account.setName(rs.getString(&lt;/span&gt;&quot;name&quot;&lt;span style=&quot;color: #000000;&quot;&gt;)); account.setUserId(rs.getInt(&lt;/span&gt;&quot;userId&quot;&lt;span style=&quot;color: #000000;&quot;&gt;)); &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; account; } }); } &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;/**&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; * 多条件查询 * &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;@param&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; userId * &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;@param&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; type * &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;@param&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; createTime * &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;@param&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; aname * &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;@return&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; @Override &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; List&amp;lt;Account&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt; queryAccountsByParams(Integer userId, String type, String createTime, String aname) { StringBuffer sql&lt;/span&gt;=&lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; StringBuffer(&quot;select id,userId,name,type,money,remark,update_time,create_time from account where 1=1&quot;&lt;span style=&quot;color: #000000;&quot;&gt;); List&lt;/span&gt;&amp;lt;Object&amp;gt; params=&lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;(); &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color: #0000ff;&quot;&gt;null&lt;/span&gt;!=&lt;span style=&quot;color: #000000;&quot;&gt;userId){ sql.append(&lt;/span&gt;&quot; and userId=?&quot;&lt;span style=&quot;color: #000000;&quot;&gt;); params.add(userId); } &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; (StringUtils.isNotBlank(type)){ sql.append(&lt;/span&gt;&quot; and type=? &quot;&lt;span style=&quot;color: #000000;&quot;&gt;); params.add(type); } &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; (StringUtils.isNotBlank(createTime)){ sql.append(&lt;/span&gt;&quot; and createTime=?&quot;&lt;span style=&quot;color: #000000;&quot;&gt;); params.add(createTime); } &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; (StringUtils.isNotBlank(aname)){ sql.append(&lt;/span&gt;&quot; and name=?&quot;&lt;span style=&quot;color: #000000;&quot;&gt;); params.add(aname); } &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; jdbcTemplate.query(sql.toString(), params.toArray(), &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; RowMapper&amp;lt;Account&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;() { @Override &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; Account mapRow(ResultSet rs, &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; rowNum) &lt;span style=&quot;color: #0000ff;&quot;&gt;throws&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; SQLException { Account account&lt;/span&gt;=&lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Account(); account.setId(rs.getInt(&lt;/span&gt;&quot;id&quot;&lt;span style=&quot;color: #000000;&quot;&gt;)); account.setUserId(rs.getInt(&lt;/span&gt;&quot;userId&quot;&lt;span style=&quot;color: #000000;&quot;&gt;)); account.setName(rs.getString(&lt;/span&gt;&quot;name&quot;&lt;span style=&quot;color: #000000;&quot;&gt;)); account.setCreate_time(rs.getDate(&lt;/span&gt;&quot;create_time&quot;&lt;span style=&quot;color: #000000;&quot;&gt;)); account.setMoney(rs.getBigDecimal(&lt;/span&gt;&quot;money&quot;&lt;span style=&quot;color: #000000;&quot;&gt;)); account.setType(rs.getString(&lt;/span&gt;&quot;type&quot;&lt;span style=&quot;color: #000000;&quot;&gt;)); account.setRemark(rs.getString(&lt;/span&gt;&quot;remark&quot;&lt;span style=&quot;color: #000000;&quot;&gt;)); account.setUpdate_time(rs.getDate(&lt;/span&gt;&quot;update_time&quot;&lt;span style=&quot;color: #000000;&quot;&gt;)); &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; account; } }); } @Override &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Integer updateAccount(Account account) { String sql&lt;/span&gt;=&quot;update account set name=?,type=?,money=? where id=?&quot;&lt;span style=&quot;color: #000000;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; jdbcTemplate.update(sql,account.getName(),account.getType(),account.getMoney(),account.getId()); } &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;/**&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; * 批量更新 * &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;@param&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; accounts * &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;@return&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; @Override &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; Integer updateAccountsBatch(List&amp;lt;Account&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt; accounts) { String sql&lt;/span&gt;=&quot;update account set name=?,type=?,money=? where id=?&quot;&lt;span style=&quot;color: #000000;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; jdbcTemplate.batchUpdate(sql, &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; BatchPreparedStatementSetter() { @Override &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; setValues(PreparedStatement ps, &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; i) &lt;span style=&quot;color: #0000ff;&quot;&gt;throws&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; SQLException { ps.setString(&lt;/span&gt;1&lt;span style=&quot;color: #000000;&quot;&gt;,accounts.get(i).getName()); ps.setString(&lt;/span&gt;2&lt;span style=&quot;color: #000000;&quot;&gt;,accounts.get(i).getType()); ps.setBigDecimal(&lt;/span&gt;3&lt;span style=&quot;color: #000000;&quot;&gt;,accounts.get(i).getMoney()); ps.setInt(&lt;/span&gt;4&lt;span style=&quot;color: #000000;&quot;&gt;,accounts.get(i).getId()); } @Override &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; getBatchSize() { &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; accounts.size(); } }).length; } &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;/**&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; * 根据id删除记录 * &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;@param&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; id * &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;@return&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; @Override &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Integer deleteAccountById(Integer id) { String sql&lt;/span&gt;=&quot;delete from account where id=?&quot;&lt;span style=&quot;color: #000000;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; jdbcTemplate.update(sql,id); } &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;/**&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; * 批量删除 * &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;@param&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; ids * &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;@return&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; @Override &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Integer deleteAccountsBatch(Integer[] ids) { String sql&lt;/span&gt;=&quot;delete from account where id=?&quot;&lt;span style=&quot;color: #000000;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; jdbcTemplate.batchUpdate(sql, &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; BatchPreparedStatementSetter() { @Override &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; setValues(PreparedStatement ps, &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; i) &lt;span style=&quot;color: #0000ff;&quot;&gt;throws&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; SQLException { ps.setInt(&lt;/span&gt;1&lt;span style=&quot;color: #000000;&quot;&gt;,ids[i]); } @Override &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; getBatchSize() { &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; ids.length; } }).length; } @Override &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Integer inMoney(Integer sourceId, BigDecimal money) { String sql&lt;/span&gt;=&quot;update account set money=money-? where id=?&quot;&lt;span style=&quot;color: #000000;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; jdbcTemplate.update(sql,money,sourceId); } @Override &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Integer outMoney(Integer targetId, BigDecimal money) { String sql&lt;/span&gt;=&quot;update account set money=money+? where id=?&quot;&lt;span style=&quot;color: #000000;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; jdbcTemplate.update(sql,money,targetId); } } &nbsp; 二、spring事务 1、事务的四大特性（ACID） 原子性(Atomicity)：共生死，要么全部成功，要么全部失败 一致性(Consistency)：事务在执行前后，数据库中数据要保持一致性状态 隔离性(Lsolation)：事务与事务之间的执行应当是相互隔离互不影响的 持久性(Durability)：事务提交完毕后，数据库中的数据的改变是永久的 &nbsp; 2、事务配置 1)、添加坐标依赖 aop、spring事务 2)、XML配置 修改xml命名空间 xmlns:tx=”http://www.springframework.org/schema/tx&quot; http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd &lt;!–aop代理–&gt; &lt;aop:aspectj-autoproxy/&gt; &lt;!–事务配置–&gt; &lt;bean id=”txManager” class=”org.springframework.jdbc.datasource.DataSourceTransactionManager”&gt; &lt;property name=”dataSource” ref=”dataSource”/&gt; &lt;/bean&gt; &lt;!–事务通知配置–&gt; &lt;tx:advice id=”txAdvice” transaction-manager=”txManager”&gt; &lt;tx:attributes&gt; &lt;!–配置事务要拦截的方法–&gt; &lt;tx:method name=”save“ propagation=”REQUIRED”/&gt; &lt;tx:method name=”update“ propagation=”REQUIRED”/&gt; &lt;tx:method name=”del“ propagation=”REQUIRED”/&gt; &lt;/tx:attributes&gt; &lt;/tx:advice&gt; &lt;!–aop切面定义–&gt;​ &lt;aop:config&gt;​ &lt;aop:pointcut id=”cut” expression=”execution( com.shsxt.service...(..))”&gt;&lt;/aop:pointcut&gt;​ &lt;aop:advisor advice-ref=”txAdvice” pointcut-ref=”cut”/&gt;​ &lt;/aop:config&gt; &lt;!–注解方式配置事务，可以和xml配置共同使用–&gt; &lt;tx:annotation-driven transaction-manager=”txManager”/&gt; 3)、注解使用事务，xml配置后在方法上添加注解 4)、事务传播行为 &nbsp; 三、远程方法调用RMI Java RMI 指的是远程方法调用 (Remote Method Invocation)。它是一种机制，能够让在某个 Java 虚拟机上的对象调用另一个 Java 虚拟机中的对象上的方法。 JVM 可以位于相同或不同计算机上，在多个 JVM 中，一个 JVM 可以调用存储在其它 JVM 的对象的方法。 具体实现先不写了，我还没弄清楚。待修改]]></content>
      <categories>
        <category>Spring</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Linux基本命令和项目发布]]></title>
    <url>%2Fdlh1234okok.github.io%2F2018%2F10%2F04%2FLinux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E5%92%8C%E9%A1%B9%E7%9B%AE%E5%8F%91%E5%B8%83%2F</url>
    <content type="text"><![CDATA[一、基本命令 date：查看当前日期 pwd：查看当前位置 cd：目录切换 ls|ll：查看当前目录文件与文件夹 mkdir+目录名：创建文件夹（可创建多个） rm -rf +目录：删除文件夹（可删除多个） mv 原始目录&nbsp; 修改后目录&nbsp; 文件移动/重命名 vim 文件名：创建或打开文件 i，编辑状态；esc退出编辑状态 &nbsp; &nbsp;：wq&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;写入并退出，：q&nbsp; &nbsp; 退出 cp 源文件地址&nbsp; 目标文件目录：文件copy cp -r 源文件夹目录&nbsp; 目标文件夹目录：文件夹copy &nbsp; 二、项目发布到Linux配置 1、静态ip配置步骤 1.选择桥接模式 2.启动后修改网卡文件 vi&nbsp; /etc/sysconfig/network-scripts/ifcfg-eth0&nbsp; 修改ip地址 执行测试 ping 192.168.1.1 ping 192.168.1.188 ping ***.com &nbsp; 2、连接终端(我使用了xshell) &nbsp; 3、安装jdk yum list|grep jdk&nbsp; &nbsp;查找jdk相关软件 yum install jdk.xxx&nbsp; &nbsp; 安装指定版本jdk 4、安装tomcat wget+tomcat下载地址 ./startup.sh&nbsp; &nbsp;在bin目录下执行启动脚本 关闭tomcat： ./shutdown.sh&nbsp; 执行脚本关闭 ps -ef|grep tomcat 查找tomcat相关进程 kill -9&nbsp; 进程号&nbsp; 关闭相关进程 5、防火墙设置 service iptables status&nbsp; &nbsp;查看防火墙状态 service iptables stop&nbsp; &nbsp;关闭防火墙 &nbsp; 测试..外部输入ip访问tomcat主页 &nbsp; 6、mysql安装和配置 查看mysql安装历史 rpm -qa | grep mysql 卸载mysql yum -y remove mysql 安装mysql yum -y install mysql-server mysql mysql-devel &nbsp; 启动服务 service mysqld start 启动 service mysqld stop 停止 service mysqld restart 重启 &nbsp; 创建管理员 mysqladmin&nbsp; -u&nbsp; root&nbsp; &nbsp;password&nbsp; *** 执行登录 mysql&nbsp; -uroot&nbsp; &nbsp;-p*** 授权 grant all privileges on . to ‘用户名‘@’%’ identified by ‘密码串’ with grant option; FLUSH&nbsp; &nbsp;PRIVILEGES; &nbsp; &nbsp; 使用sqlyog | navicat 进行连接 &nbsp; 7、将打包好的war包放到tomcat/webapp目录下，启动tomcat（项目名为站点名） &nbsp; 三、idea Maven项目打包 本地环境&nbsp; dev 测试环境&nbsp; test 生产环境&nbsp; product &nbsp; 配置打包标签 &lt;profiles&gt; &lt;profile&gt; &lt;id&gt;dev&lt;/id&gt; &lt;properties&gt; &lt;env&gt;dev&lt;/env&gt; &lt;/properties&gt; &lt;activation&gt; &lt;!– 默认运行开发环境 –&gt; &lt;activeByDefault&gt;true&lt;/activeByDefault&gt; &lt;/activation&gt; &lt;/profile&gt; &lt;profile&gt; &lt;id&gt;test&lt;/id&gt; &lt;properties&gt; &lt;env&gt;test&lt;/env&gt; &lt;/properties&gt; &lt;/profile&gt; &lt;profile&gt; &lt;id&gt;product&lt;/id&gt; &lt;properties&gt; &lt;env&gt;product&lt;/env&gt; &lt;/properties&gt; &lt;/profile&gt; &lt;/profiles&gt; 指定资源文件 &lt;resources&gt; &lt;resource&gt; &lt;directory&gt;src/main/resources/${env}&lt;/directory&gt; &lt;/resource&gt; &lt;resource&gt; &lt;directory&gt;src/main/java&lt;/directory&gt; &lt;includes&gt; &lt;include&gt;/*.xml&lt;/include&gt; &lt;include&gt;/.properties&lt;/include&gt; &lt;include&gt;**/.tld&lt;/include&gt; &lt;/includes&gt; &lt;filtering&gt;false&lt;/filtering&gt; &lt;/resource&gt; &lt;/resources&gt; 打包命令配置 clean&nbsp; compile package -Dmaven.test.skip=true -Ptest|dev|product 清理编译文件，打包跳过测试文件 test/dev/product 包]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[使用poi读取Excel和写出Excel]]></title>
    <url>%2Fdlh1234okok.github.io%2F2018%2F10%2F04%2F%E4%BD%BF%E7%94%A8poi%E8%AF%BB%E5%8F%96Excel%E5%92%8C%E5%86%99%E5%87%BAExcel%2F</url>
    <content type="text"><![CDATA[使用poi读取Excel和写出Excel本次使用到的jar包 &nbsp;&nbsp;1、从数据库读取数据写出到Excelpublic class CreateExcel01 { // 数据库查询 public static List&lt;Account&gt; query() { String sql = “select from tb_account”; List&lt;Account&gt; list = BaseDao.findRows(sql, null, Account.class); return list; } // 创建Excel public static void createExcel(){ try { // 获取桌面路径 FileSystemView fsv = FileSystemView.getFileSystemView(); String desktop = fsv.getHomeDirectory().getPath(); String filePath = desktop + “/account.xls”; File file = new File(filePath); OutputStream outputStream = new FileOutputStream(file); HSSFWorkbook workbook = new HSSFWorkbook(); // 创建一个工作表 HSSFSheet sheet = workbook.createSheet(“Sheet1”); // 创建首行/头（第0行开始） HSSFRow head = sheet.createRow(0); String[] header = new String[]{“账户id”,”账户名称”,”账户类型”,”账户金额”,”账户备注”,”创建时间”,”用户id”,”更新时间”}; for (int i=0;i&lt;header.length;i++){ // 设置首行信息 head.createCell(i).setCellValue(header[i]);​ }​ head.setHeightInPoints(20); // 设置行的高度 // 从数据查询返回的集合 List&lt;Account&gt; accounts=query(); // 日期格式化 HSSFCellStyle cellStyle2 = workbook.createCellStyle(); HSSFCreationHelper creationHelper = workbook.getCreationHelper(); // 设置日期格式 cellStyle2.setDataFormat(creationHelper.createDataFormat().getFormat(“yyyy-MM-dd HH:mm:ss”)); sheet.setColumnWidth(3, 15 256); sheet.setColumnWidth(5, 20 256); sheet.setColumnWidth(7, 20 256);// 设置列的宽度 // 保留两位小数 HSSFCellStyle cellStyle3 = workbook.createCellStyle(); cellStyle3.setDataFormat(HSSFDataFormat.getBuiltinFormat(“0.00”)); for(int i=0;i&lt;accounts.size();i++) { // 创建行（从第一行开始） HSSFRow row1 = sheet.createRow(i + 1); // id row1.createCell(0).setCellValue(accounts.get(i).getId()); // 账户名称 row1.createCell(1).setCellValue(accounts.get(i).getAccountName()); // 账户类型 row1.createCell(2).setCellValue(accounts.get(i).getAccountType()); // 账户金额（保留两位小数） HSSFCell money = row1.createCell(3); money.setCellStyle(cellStyle3); money.setCellValue(accounts.get(i).getMoney()); // 账户备注 row1.createCell(4).setCellValue(accounts.get(i).getRemark()); // 创建时间（格式化时间） HSSFCell date1 = row1.createCell(5); date1.setCellStyle(cellStyle2); date1.setCellValue(accounts.get(i).getCreateTime()); // 用户id row1.createCell(6).setCellValue(accounts.get(i).getUid()); // 更新时间 HSSFCell date2 = row1.createCell(7); date2.setCellStyle(cellStyle2); date2.setCellValue(accounts.get(i).getUpdateTime()); } workbook.setActiveSheet(0); workbook.write(outputStream); outputStream.close(); } catch (IOException e1) { e1.printStackTrace(); } }}&nbsp;&nbsp;2、从Excel读取写入到数据库package com.shsxt;import org.apache.commons.lang3.time.DateFormatUtils;import org.apache.poi.hssf.usermodel.HSSFCell;import org.apache.poi.hssf.usermodel.HSSFDataFormat;import org.apache.poi.hssf.usermodel.HSSFDateUtil;import org.apache.poi.hssf.usermodel.HSSFWorkbook;import org.apache.poi.ss.formula.functions.Rows;import org.apache.poi.ss.usermodel.;import org.apache.poi.xssf.usermodel.XSSFWorkbook;import java.io.File;import java.io.FileInputStream;import java.io.IOException;import java.text.DateFormat;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.Iterator;import java.util.List;public class ReadExcelToDB { public List&lt;List&lt;Object&gt;&gt; importExcel(File file) { List&lt;List&lt;Object&gt;&gt; dataList = null; try { dataList = new ArrayList&lt;List&lt;Object&gt;&gt;(); // Excel对象 Workbook workbook = null; // 获取文件名 String fileName = file.getName().toLowerCase(); // 判断后缀 if (fileName.endsWith(“xls”)) { workbook = new HSSFWorkbook(new FileInputStream(file)); } else if (fileName.endsWith(“xlsx”)) { workbook = new XSSFWorkbook(new FileInputStream(file)); } else { throw new RuntimeException(“该文件不是Excel文件”); } // 获取Excel中的第一个表格 Sheet sheet = workbook.getSheet(“Sheet1”); // 得到表格中的数据的行数，最后一行 int rows = sheet.getLastRowNum(); if (rows == 0) { throw new RuntimeException(“表格中没有数据”); } Row row = null; //行对象 Iterator&lt;Cell&gt; cols = null; // 列对象的迭代器 List&lt;Object&gt; list = null; for (int i = 1; i &lt;= rows; i++) { row = sheet.getRow(i); // 获取第i行 if (row != null) { cols = row.cellIterator(); // 获取该行的迭代器 list = new ArrayList&lt;Object&gt;(); while (cols.hasNext()) { // 循环获取每一列数据存到list中 list.add(getCellObj(cols.next()));​ }​ // 将这行数据存到集合dataList中 dataList.add(list);​ }​ }​ } catch (IOException e) {​ e.printStackTrace();​ }​ return dataList;​ } private Object getCellObj(Cell cell) { if (cell == null) { return “”; } Object cellObj; switch (cell.getCellType()) { case HSSFCell.CELL_TYPE_STRING: //字符串 cellObj = cell.getStringCellValue(); break; case HSSFCell.CELL_TYPE_NUMERIC: //数字 // poi把日期类型也归为数字类型 if (HSSFDateUtil.isCellDateFormatted(cell)){ // 获取日期对象并格式化 Date date=cell.getDateCellValue(); cellObj= DateFormatUtils.format(date,”yyyy-MM-dd”); } else{ /CellStyle cellStyle=cell.getCellStyle(); cellStyle.setDataFormat(HSSFDataFormat.getBuiltinFormat(“0”));*/ cellObj = cell.getNumericCellValue(); } break; case HSSFCell.CELL_TYPE_BOOLEAN: //boolean cellObj = cell.getBooleanCellValue(); break; case HSSFCell.CELL_TYPE_FORMULA: //公式 cellObj = cell.getCellFormula(); break; case HSSFCell.CELL_TYPE_BLANK: //空 cellObj = “”; break; case HSSFCell.CELL_TYPE_ERROR: //错误 cellObj = “”; break; default: cellObj=””; break; } return cellObj; }}class Test {​ public static void main(String[] args) {​ File file = new File(“C:\Users\Administrator\Desktop\no1.xls”);​ ReadExcelToDB readExcelToDB = new ReadExcelToDB();​ List&lt;List&lt;Object&gt;&gt; lists=readExcelToDB.importExcel(file);​ for (List&lt;Object&gt; ObjList:lists){​ for (Object object:ObjList){​ System.out.println(object);​ } System.out.println(“__“); ​ }​ }}&nbsp;读取的结果是：&nbsp;调用数据库插入就可以往插入到数据库了]]></content>
      <categories>
        <category>poi</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hello Hexo]]></title>
    <url>%2Fdlh1234okok.github.io%2F2018%2F10%2F03%2Fhello-hexo%2F</url>
    <content type="text"><![CDATA[​ 花了一天半时间终于把这个博客建好了，中间遇到了很多坑，网上搜了大量资源，略有不足，以后想到了再改改漂亮吧。 ​ 贴一下我看的各位博主写的教程链接，方便以后出现问题可以解决。 ​ 1、这是我看的第一篇，初次接触给我帮助很大 ​ https://blog.csdn.net/dgut_guangdian/article/details/79326107 ​ 2、这几篇修改了next主题样式，添加了些好玩的东西 ​ https://blog.csdn.net/zhy421202048/article/details/77877580 ​ https://blog.csdn.net/w_ngzeqi/article/details/73863543 ​ https://blog.csdn.net/csdnSR/article/details/78300820 ​ https://www.jianshu.com/p/3a05351a37dc ​ ​ 3、在添加gitment评论时对我有帮助的（但我好像至今无法使用…） ​ https://www.cnblogs.com/pangguoming/p/8094815.html ​ https://www.jianshu.com/p/57afa4844aaa]]></content>
  </entry>
</search>
