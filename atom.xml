<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>这夜景</title>
  
  <subtitle>blog</subtitle>
  <link href="/dlh1234okok.github.io/atom.xml" rel="self"/>
  
  <link href="http://www.dlhblog.online/"/>
  <updated>2018-11-26T10:45:33.555Z</updated>
  <id>http://www.dlhblog.online/</id>
  
  <author>
    <name>li-hong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RabbitMq-Topic主题模式</title>
    <link href="http://www.dlhblog.online/2018/11/26/RabbitMq-Topic%E4%B8%BB%E9%A2%98%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.dlhblog.online/2018/11/26/RabbitMq-Topic主题模式/</id>
    <published>2018-11-26T08:23:54.000Z</published>
    <updated>2018-11-26T10:45:33.555Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>​    在对于商品的添加、更新、删除等操作时我们可以使用Topic主题模式通过指定的匹配模式将消息路由匹配到相匹配的队列中进行后续处理。</p><p>.* ：匹配一个</p><p>.# ：匹配多个</p></blockquote><p><img src="/dlh1234okok.github.io/2018/11/26/RabbitMq-Topic主题模式/1.jpg" alt=""></p><h1 id="sender"><a href="#sender" class="headerlink" title="sender"></a>sender</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_NAME = <span class="string">"topic"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 创建通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明交换机</span></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.TOPIC);</span><br><span class="line">        <span class="comment">// 发布消息</span></span><br><span class="line">        channel.basicPublish(EXCHANGE_NAME, <span class="string">"lazy.orange.test"</span>, <span class="keyword">null</span>, <span class="string">"hello"</span>.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        <span class="comment">// 关闭连接</span></span><br><span class="line">        ConnectionUtil.closeResources(connection, channel);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Receiver"><a href="#Receiver" class="headerlink" title="Receiver"></a>Receiver</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_NAME = <span class="string">"topic"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"topicQueue01"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 创建通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明交换机</span></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.TOPIC);</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 绑定队列到交换机</span></span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">"*.orange.*"</span>);</span><br><span class="line">        <span class="comment">// 获取消费者</span></span><br><span class="line">        Consumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                String msg = <span class="keyword">new</span> String(body, StandardCharsets.UTF_8);</span><br><span class="line">                System.out.println(<span class="string">"消费者01-&gt;"</span> + msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 消费</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver02</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_NAME = <span class="string">"topic"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"topicQueue02"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 创建通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明交换机</span></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.TOPIC);</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 绑定队列到交换机</span></span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">"lazy.#"</span>);</span><br><span class="line">        <span class="comment">// 获取消费者</span></span><br><span class="line">        Consumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                String msg = <span class="keyword">new</span> String(body, StandardCharsets.UTF_8);</span><br><span class="line">                System.out.println(<span class="string">"消费者02-&gt;"</span> + msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 消费</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>发送消息时指定的Routing Key为<u>lazy.orange.test</u>，所以两个队列都能匹配，结果：</p><p><img src="/dlh1234okok.github.io/2018/11/26/RabbitMq-Topic主题模式/2.jpg" alt=""></p><p><img src="/dlh1234okok.github.io/2018/11/26/RabbitMq-Topic主题模式/3.jpg" alt=""></p><p>我们修改一下Routing Key 为<u>lazy.test.test</u>，此时队列1肯定是接收不到的</p><p><img src="/dlh1234okok.github.io/2018/11/26/RabbitMq-Topic主题模式/4.jpg" alt=""></p><p><img src="/dlh1234okok.github.io/2018/11/26/RabbitMq-Topic主题模式/5.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;​    在对于商品的添加、更新、删除等操作时我们可以使用Topic主题模式通过指定的匹配模式将消息路由匹配到相匹配的队列中进行后续处理。&lt;/p&gt;
&lt;p&gt;.* ：匹配一个&lt;/p&gt;
&lt;p&gt;.# ：匹配多个&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;
      
    
    </summary>
    
      <category term="RabbitMq" scheme="http://www.dlhblog.online/categories/RabbitMq/"/>
    
    
  </entry>
  
  <entry>
    <title>RabbitMq消息路由规则-direct</title>
    <link href="http://www.dlhblog.online/2018/11/25/RabbitMq%E6%B6%88%E6%81%AF%E8%B7%AF%E7%94%B1%E8%A7%84%E5%88%99/"/>
    <id>http://www.dlhblog.online/2018/11/25/RabbitMq消息路由规则/</id>
    <published>2018-11-25T15:08:29.000Z</published>
    <updated>2018-11-26T07:21:47.155Z</updated>
    
    <content type="html"><![CDATA[<p>​    我们可以针对不同的消息，在对消息进行消费时，通过exchange types以及Routing key设置规则，便可以将不同消息路由到不同的队列然后交给不同消费者进行消费。</p><p><img src="/dlh1234okok.github.io/2018/11/25/RabbitMq消息路由规则/1.jpg" alt=""></p><p>从图中可以看出：</p><ol><li>生产者产生消息投给交换机</li><li>交换机投送消息时的Exchange Types 为direct类型</li><li>消息通过定义的Routing Key 被路由到指定的队列进行后续消费</li></ol><h1 id="Sender"><a href="#Sender" class="headerlink" title="Sender"></a>Sender</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_NAME = <span class="string">"direct"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 创建通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明交换机</span></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.DIRECT);</span><br><span class="line">        <span class="comment">// 发布消息</span></span><br><span class="line">        channel.basicPublish(EXCHANGE_NAME, <span class="string">"wrong"</span>, <span class="keyword">null</span>, <span class="string">"hello"</span>.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        ConnectionUtil.closeResources(connection, channel);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Receiver"><a href="#Receiver" class="headerlink" title="Receiver"></a>Receiver</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_NAME = <span class="string">"direct"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"info_wrong"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 创建通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明交换机</span></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.DIRECT);</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 绑定队列到交换机</span></span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">"wrong"</span>);</span><br><span class="line">        <span class="comment">// 获取消费者</span></span><br><span class="line">        Consumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                String msg = <span class="keyword">new</span> String(body, StandardCharsets.UTF_8);</span><br><span class="line">                System.out.println(<span class="string">"info_wrong-&gt;"</span> + msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 消费</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver02</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_NAME = <span class="string">"direct"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"error"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 创建通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明交换机</span></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.DIRECT);</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 绑定队列到交换机</span></span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">"error"</span>);</span><br><span class="line">        <span class="comment">// 获取消费者对象</span></span><br><span class="line">        Consumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                String msg = <span class="keyword">new</span> String(body, StandardCharsets.UTF_8);</span><br><span class="line">                System.out.println(<span class="string">"error-&gt;"</span> + msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 消费</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p><img src="/dlh1234okok.github.io/2018/11/25/RabbitMq消息路由规则/2.jpg" alt=""></p><p>根据发送时指定的routing key，只有匹配的Receiver01消费者才能接收到消息</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    我们可以针对不同的消息，在对消息进行消费时，通过exchange types以及Routing key设置规则，便可以将不同消息路由到不同的队列然后交给不同消费者进行消费。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/dlh1234okok.github.io/2018/
      
    
    </summary>
    
      <category term="RabbitMq" scheme="http://www.dlhblog.online/categories/RabbitMq/"/>
    
    
  </entry>
  
  <entry>
    <title>RabbitMq消息发布与订阅-fanout</title>
    <link href="http://www.dlhblog.online/2018/11/25/RabbitMq%E6%B6%88%E6%81%AF%E5%8F%91%E5%B8%83%E4%B8%8E%E8%AE%A2%E9%98%85/"/>
    <id>http://www.dlhblog.online/2018/11/25/RabbitMq消息发布与订阅/</id>
    <published>2018-11-25T14:48:58.000Z</published>
    <updated>2018-11-25T15:07:08.366Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>​    对于微信公众号，相信每个人都订阅过， 当公众号发送新的消息后，对于订阅过该公众号的所有用户均可以收到消息，这个场景大家都能明白，同样对于RabbitMq 消息的处理也支持这种消息处理， 当生产者把消息投送出去后，不同的消费者均可以对该消息进行消费，而不是消息被一个消费者消费后就立即从队列中删除，对于这种消息处理，我们通常称之为消息的发布与订阅模式，凡是消费者订阅了该消息，均能够收到对应消息进行处理，比较常见的如用户注册操作。模型图如下: </p></blockquote><p><img src="/dlh1234okok.github.io/2018/11/25/RabbitMq消息发布与订阅/1.jpg" alt=""></p><p>从图中看到:</p><ol><li>消息产生后不是直接投送到队列中，而是将消息先投送给 Exchange 交换机，然后消息经过 Exchange 交换机投递到相关队列</li><li>多个消费者消费的不再是同一个队列，而是每个消费者消费属于自己的队列。 </li></ol><h1 id="publish-subscribe"><a href="#publish-subscribe" class="headerlink" title="publish/subscribe"></a>publish/subscribe</h1><h2 id="fanout"><a href="#fanout" class="headerlink" title="fanout"></a>fanout</h2><h2 id="Sender-将消息发送到交换机"><a href="#Sender-将消息发送到交换机" class="headerlink" title="Sender(将消息发送到交换机)"></a>Sender(将消息发送到交换机)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sender</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_NAME = <span class="string">"fanout"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明交换机</span></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.FANOUT);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">            String msg = <span class="string">"消息-&gt;"</span> + i;</span><br><span class="line">            channel.basicPublish(EXCHANGE_NAME, <span class="string">""</span>, <span class="keyword">null</span>, msg.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        ConnectionUtil.closeResources(connection, channel);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Receiver（从交换机中分发为两个队列）"><a href="#Receiver（从交换机中分发为两个队列）" class="headerlink" title="Receiver（从交换机中分发为两个队列）"></a>Receiver（从交换机中分发为两个队列）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_NAME = <span class="string">"fanout"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"queue01"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 创建通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明交换机</span></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.FANOUT);</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 绑定队列到交换机</span></span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">""</span>);</span><br><span class="line">        <span class="comment">// 获取consumer</span></span><br><span class="line">        Consumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                String msg = <span class="keyword">new</span> String(body, StandardCharsets.UTF_8);</span><br><span class="line">                System.out.println(<span class="string">"queue01-"</span> + msg);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 消费</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver02</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_NAME = <span class="string">"fanout"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"queue02"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 创建通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明交换机</span></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.FANOUT);</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 绑定队列到交换机</span></span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">""</span>);</span><br><span class="line">        <span class="comment">// 获取消费者</span></span><br><span class="line">        Consumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                String msg = <span class="keyword">new</span> String(body, StandardCharsets.UTF_8);</span><br><span class="line">                System.out.println(<span class="string">"queue02-"</span> + msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 消费</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p><img src="/dlh1234okok.github.io/2018/11/25/RabbitMq消息发布与订阅/2.bmp" alt=""></p><p><img src="/dlh1234okok.github.io/2018/11/25/RabbitMq消息发布与订阅/3.bmp" alt=""></p><p>两个消费者都能收到同样的消息</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;​    对于微信公众号，相信每个人都订阅过， 当公众号发送新的消息后，对于订阅过该公众号的所有用户均可以收到消息，这个场景大家都能明白，同样对于RabbitMq 消息的处理也支持这种消息处理， 当生产者把消息投送出去后，不同的消费者均可以对该消息
      
    
    </summary>
    
      <category term="RabbitMq" scheme="http://www.dlhblog.online/categories/RabbitMq/"/>
    
    
  </entry>
  
  <entry>
    <title>RabbitMq初体验</title>
    <link href="http://www.dlhblog.online/2018/11/23/RabbitMq%E5%AE%89%E8%A3%85%E5%92%8C%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.dlhblog.online/2018/11/23/RabbitMq安装和简单使用/</id>
    <published>2018-11-23T10:49:19.000Z</published>
    <updated>2018-11-23T12:52:02.200Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>消息队列（Message queue）是<strong>一种进程间通信</strong>或<strong>同一进程的不同线程间</strong>的通信方式， 软件的贮列用来处理一系列的输入，通常是来自用户。消息队列提供了异步的通信协议，每一个贮列中的纪录包含详细说明的数据，包含发生的时间，输入设备的种类，以及特定的输入参数，也就是说：消息的发送者和接收者不需要同时与消息队列互交。消息会保存在队列中，直到接收者取回它 。</p></blockquote><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>RabbitMQ需要安装Erlang，首先安装Erlang，然后再安装RabbitMQ服务器</p><h2 id="环境测试"><a href="#环境测试" class="headerlink" title="环境测试"></a>环境测试</h2><ul><li><p>检查RabbitMQ安装后依赖的文件版本信息列表</p><p>切换到安装后的sbin目录，执行命令提示符输入命令<u>rabbitmqctl.bat status</u></p></li><li><p>查看RabbitMQ支持的插件列表</p><p><u>rabbitmq-plugins.bat list</u></p></li><li><p>启用管理控制台插件</p><p><u>rabbitmq-plugins.bat enable rabbitmq_management</u></p></li><li><p>浏览器访问<u>127.0.0.1:15672</u></p><p> 默认账号:用户名:guest  密码:guest</p></li></ul><p>Windows环境下问题的官方解决：<a href="http://www.rabbitmq.com/windows-quirks.html" target="_blank" rel="noopener">http://www.rabbitmq.com/windows-quirks.html</a></p><h2 id="浏览器客户端"><a href="#浏览器客户端" class="headerlink" title="浏览器客户端"></a>浏览器客户端</h2><p>添加用户</p><p><img src="/dlh1234okok.github.io/2018/11/23/RabbitMq安装和简单使用/添加用户.jpg" alt=""></p><p>添加虚拟主机</p><p><img src="/dlh1234okok.github.io/2018/11/23/RabbitMq安装和简单使用/添加虚拟主机.jpg" alt=""></p><h1 id="Java客户端"><a href="#Java客户端" class="headerlink" title="Java客户端"></a>Java客户端</h1><h2 id="引入RabbitMQ依赖"><a href="#引入RabbitMQ依赖" class="headerlink" title="引入RabbitMQ依赖"></a>引入RabbitMQ依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>amqp-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="从最简单的队列开始"><a href="#从最简单的队列开始" class="headerlink" title="从最简单的队列开始"></a>从最简单的队列开始</h2><h3 id="发送方（发送到消息队列）"><a href="#发送方（发送到消息队列）" class="headerlink" title="发送方（发送到消息队列）"></a>发送方（发送到消息队列）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sender</span> </span>&#123;</span><br><span class="line"><span class="comment">// 定义一个常量作为队列名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"hello"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获得连接工厂</span></span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">// 设置主机</span></span><br><span class="line">        factory.setHost(<span class="string">"127.0.0.1"</span>);</span><br><span class="line">        <span class="comment">// 设置端口</span></span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        <span class="comment">// 设置虚拟主机</span></span><br><span class="line">        factory.setVirtualHost(<span class="string">"/test"</span>);</span><br><span class="line">        <span class="comment">// 设置用户名</span></span><br><span class="line">        factory.setUsername(<span class="string">"dlh"</span>);</span><br><span class="line">        <span class="comment">// 设置密码</span></span><br><span class="line">        factory.setPassword(<span class="string">"123456"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获得连接</span></span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        <span class="comment">// 获得连接通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 声明消息内容</span></span><br><span class="line">        String msg = <span class="string">"hello RabbitMq"</span>;</span><br><span class="line">        <span class="comment">// 发布消息</span></span><br><span class="line">        channel.basicPublish(<span class="string">""</span>, QUEUE_NAME, <span class="keyword">null</span>, msg.getBytes());</span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将消息发布后可以在浏览器客户端中看到我们刚刚创建的队列</p><p><img src="/dlh1234okok.github.io/2018/11/23/RabbitMq安装和简单使用/普通队列1.jpg" alt=""></p><p>我们已经把消息发送到队列中了，但是我们的消息好像丢失了，我们需要先启动消费方再启动发送方，否则容易丢失</p><h3 id="接收方（从消息队列中接收处理并返回回执）"><a href="#接收方（从消息队列中接收处理并返回回执）" class="headerlink" title="接收方（从消息队列中接收处理并返回回执）"></a>接收方（从消息队列中接收处理并返回回执）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"hello"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获得连接工厂</span></span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">// 设置参数</span></span><br><span class="line">        factory.setHost(<span class="string">"127.0.0.1"</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setUsername(<span class="string">"dlh"</span>);</span><br><span class="line">        factory.setPassword(<span class="string">"123456"</span>);</span><br><span class="line">        factory.setVirtualHost(<span class="string">"/test"</span>);</span><br><span class="line">        <span class="comment">// 创建连接</span></span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        <span class="comment">// 创建连接通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 指定队列  参数  1、队列的名字 2、是否为耐久队列 3、是否为独占队列 4、队列中的属性</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"><span class="comment">// 创建消费者对象</span></span><br><span class="line">        Consumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> </span>&#123;</span><br><span class="line">                String msg = <span class="keyword">new</span> String(body, StandardCharsets.UTF_8);</span><br><span class="line">                System.out.println(<span class="string">"队列中的消息："</span> + msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 执行消费</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消息的发送方和接收方已经定义好了，这是最简单的消息发送和接收</p><p><img src="/dlh1234okok.github.io/2018/11/23/RabbitMq安装和简单使用/普通队列2.jpg" alt=""></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>先启动接收方，再启动发送方，结果</p><p><img src="/dlh1234okok.github.io/2018/11/23/RabbitMq安装和简单使用/普通队列3.jpg" alt=""></p><h2 id="工作队列"><a href="#工作队列" class="headerlink" title="工作队列"></a>工作队列</h2><blockquote><p>在上面的例子中消息消费者只有一个，当消息量非常大时，单个消费者处理消息就会变得很慢，同时给节点页带来很大压力，导致消息堆积越来越多。 对于这种情况， Rabbitmq 提供了工作队列模式，通过工作队列提供做个消费者，对 mq 产生的消息进行消费，提高 mq 消息的吞吐率，降低消息的处理时间。 </p></blockquote><p><img src="/dlh1234okok.github.io/2018/11/23/RabbitMq安装和简单使用/工作队列1.jpg" alt=""></p><h3 id="轮询分发"><a href="#轮询分发" class="headerlink" title="轮询分发"></a>轮询分发</h3><p>默认为轮询分发，定义两个或多个消费方</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"hello_rr"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建连接工厂</span></span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">// 设置参数</span></span><br><span class="line">        factory.setVirtualHost(<span class="string">"/test"</span>);</span><br><span class="line">        factory.setPassword(<span class="string">"123456"</span>);</span><br><span class="line">        factory.setUsername(<span class="string">"dlh"</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setHost(<span class="string">"127.0.0.1"</span>);</span><br><span class="line">        <span class="comment">// 创建连接</span></span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        <span class="comment">// 通过连接创建连接通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 定义队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 准备消息</span></span><br><span class="line">            String msg = <span class="string">"hello_rabbitMq"</span> + i;</span><br><span class="line">            <span class="comment">// 发布消息</span></span><br><span class="line">            channel.basicPublish(<span class="string">""</span>, QUEUE_NAME, <span class="keyword">null</span>, msg.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里消费方循环发送20次</p><p><img src="/dlh1234okok.github.io/2018/11/23/RabbitMq安装和简单使用/工作队列2.jpg" alt=""></p><p>已经发送到消息队列中了，定义两个消费方</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"hello_rr"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建连接工厂</span></span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">// 设置属性</span></span><br><span class="line">        factory.setHost(<span class="string">"127.0.0.1"</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setUsername(<span class="string">"dlh"</span>);</span><br><span class="line">        factory.setPassword(<span class="string">"123456"</span>);</span><br><span class="line">        factory.setVirtualHost(<span class="string">"/test"</span>);</span><br><span class="line">        <span class="comment">// 创建连接</span></span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        <span class="comment">// 创建连接通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 创建消费者对象</span></span><br><span class="line">        Consumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                String msg = <span class="keyword">new</span> String(body, StandardCharsets.UTF_8);</span><br><span class="line">                System.out.println(<span class="string">"接收01——"</span> + msg);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver02</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"hello_rr"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取连接工厂</span></span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">// 设置属性</span></span><br><span class="line">        factory.setVirtualHost(<span class="string">"/test"</span>);</span><br><span class="line">        factory.setPassword(<span class="string">"123456"</span>);</span><br><span class="line">        factory.setUsername(<span class="string">"dlh"</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setHost(<span class="string">"127.0.0.1"</span>);</span><br><span class="line">        <span class="comment">// 创建连接</span></span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        <span class="comment">// 创建通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 获取consumer对象</span></span><br><span class="line">        Consumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                String msg = <span class="keyword">new</span> String(body, StandardCharsets.UTF_8);</span><br><span class="line">                System.out.println(<span class="string">"接收02——"</span> + msg);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费方使用Thread.sleep模拟消息处理时间</p><p><img src="/dlh1234okok.github.io/2018/11/23/RabbitMq安装和简单使用/工作队列3.jpg" alt=""></p><p><img src="/dlh1234okok.github.io/2018/11/23/RabbitMq安装和简单使用/工作队列4.jpg" alt=""></p><p>轮询就是队列每次轮流分发给消费方，所以两个消费方收到的消息数量几乎一样</p><p>​    轮询的缺点就是每个人都轮到一次，而不同机器的性能或消息复杂度处理时间不同，有的消费者闲置，有的消费者高负荷，导致资源上的损耗。</p><p>在看看上面的配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.basicConsume(QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br></pre></td></tr></table></figure><p>​    第二个参数设置为true时（autoAck=true），只要消费方接收消息，服务器就默认消息处理完成，而且服务器是一股脑把消息分发给消费方，此时当其中一个消费方宕机，原本该属于它的数据将丢失。</p><h3 id="公平分发"><a href="#公平分发" class="headerlink" title="公平分发"></a>公平分发</h3><blockquote><p>在上面的轮询分发中我们发现，服务器只会盲目地将消息轮流发给消费方，消费方的处理效率不同导致资源损耗。这里我们<strong>设置服务器最大消息数</strong>（channel.basicQos(1)），并<strong>设置只有将消息处理回执返回才会发送下一条消息</strong>。</p></blockquote><p>修改我们消费方的配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver_fair01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"hello_fair"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获得连接工厂</span></span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">// 设置属性</span></span><br><span class="line">        factory.setVirtualHost(<span class="string">"/test"</span>);</span><br><span class="line">        factory.setPassword(<span class="string">"123456"</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setHost(<span class="string">"127.0.0.1"</span>);</span><br><span class="line">        factory.setUsername(<span class="string">"dlh"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建连接</span></span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        <span class="comment">// 获取通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 设置服务器最大消息数</span></span><br><span class="line">        channel.basicQos(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 获取consumer</span></span><br><span class="line">        Consumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                String msg = <span class="keyword">new</span> String(body, StandardCharsets.UTF_8);</span><br><span class="line">                System.out.println(<span class="string">"接收者01——"</span> + msg);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 手动回执</span></span><br><span class="line">                channel.basicAck(envelope.getDeliveryTag(),<span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">false</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>处理结果</p><p><img src="/dlh1234okok.github.io/2018/11/23/RabbitMq安装和简单使用/公平分发1.jpg" alt=""></p><p><img src="/dlh1234okok.github.io/2018/11/23/RabbitMq安装和简单使用/公平分发2.jpg" alt=""></p><p>我们发现消费方的处理速率和消息处理量是成正比，处理速率低收到的消息少，处理速率高收到的消息就多。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;消息队列（Message queue）是&lt;strong&gt;一种进程间通信&lt;/strong&gt;或&lt;strong&gt;同一进程的不同线程间&lt;/strong&gt;的通信方式， 软件的贮列用来处理一系列的输入，通常是来自用户。消息队列提供了异步的通信协议，每一个贮列中
      
    
    </summary>
    
      <category term="RabbitMq" scheme="http://www.dlhblog.online/categories/RabbitMq/"/>
    
    
  </entry>
  
  <entry>
    <title>Aop+自定义注解+Redis实现缓存</title>
    <link href="http://www.dlhblog.online/2018/11/20/Aop-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3-Redis%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98/"/>
    <id>http://www.dlhblog.online/2018/11/20/Aop-自定义注解-Redis实现缓存/</id>
    <published>2018-11-20T05:02:09.000Z</published>
    <updated>2018-11-20T15:13:26.427Z</updated>
    
    <content type="html"><![CDATA[<p>​    相比于从数据库中查询，从缓存中读取数据无疑更加快速，当用户发送相同的请求时使用缓存，既可以减少数据库的压力，又可以加快查询速度。</p><p>首先先讲一下在Java代码中加入redis缓存的步骤</p><ol><li>准备一个key，key不可重复，常与参数相结合，这样可以通过判断用户是发送的请求参数是否改变。</li><li>通过key从缓存中查询数据，有缓存则直接将缓存数据返回。</li><li>redis服务器中没有缓存，则从数据库中查询，再将结果以该key为键存入缓存，返回。</li></ol><p>我们往往在很多地方需要使用到缓存，每次都要写上这些步骤无益于我们的代码复用。</p><p>​    所以我在这里引入了Aop面向切面编程，通过拦截自定义注解（在需要添加缓存的方法上添加），拦截后查询或添加缓存。</p><h1 id="准备自定义注解"><a href="#准备自定义注解" class="headerlink" title="准备自定义注解"></a>准备自定义注解</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RequireCache &#123;</span><br><span class="line">    <span class="comment">// 用于存放形参名，数组，有多个形参则需要存多个</span></span><br><span class="line">    String[] value() <span class="keyword">default</span> <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用户存放key的开头</span></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果参数为javabean，则需要传递，必须要有默认值否则必须写入</span></span><br><span class="line">    Class[] type() <span class="keyword">default</span> Integer.class;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="准备切面"><a href="#准备切面" class="headerlink" title="准备切面"></a>准备切面</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*@Component</span></span><br><span class="line"><span class="comment">@Aspect*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequireCacheHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"@annotation(com.dlh.xmjf.server.aop_adaptor.annotation.RequireCache)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"cut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Object result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 通过pjp拿到方法签名</span></span><br><span class="line">        MethodSignature methodSignature = (MethodSignature) pjp.getSignature();</span><br><span class="line">        Signature signature = pjp.getSignature();</span><br><span class="line">        <span class="comment">// 拿到方法</span></span><br><span class="line">        Method method = methodSignature.getMethod();</span><br><span class="line">        <span class="comment">// 获得目标对象的方法（因为该service实现了接口，动态代理会代理到接口上，接口并没有注解）</span></span><br><span class="line">        Method realMethod = pjp.getTarget().getClass().getDeclaredMethod(signature.getName(),</span><br><span class="line">                method.getParameterTypes());</span><br><span class="line">        <span class="comment">// 拿到注解</span></span><br><span class="line">        RequireCache requireCache = realMethod.getAnnotation(RequireCache.class);</span><br><span class="line">        <span class="comment">// 拿到注解中的value和name和class类型</span></span><br><span class="line">        String[] value = requireCache.value();</span><br><span class="line">        String name = requireCache.name();</span><br><span class="line">        Class[] types = requireCache.type();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 拿到参数值</span></span><br><span class="line">        Object[] args = pjp.getArgs();</span><br><span class="line">        <span class="comment">// 定义StringBuffer用于存放key</span></span><br><span class="line">        StringBuffer key = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="comment">// 先将缓存开头名存入</span></span><br><span class="line">        key.append(name);</span><br><span class="line">        <span class="keyword">if</span> (value.length &gt; <span class="number">0</span> &amp;&amp; args.length &gt; <span class="number">0</span> &amp;&amp; value.length == args.length) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String paramName : value) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Object arg : args) &#123;</span><br><span class="line">                    String str = <span class="string">"::"</span> + paramName + <span class="string">"::"</span>;</span><br><span class="line">                    key.append(str);</span><br><span class="line">                    <span class="comment">// 排除Integer和String类型等等..的参数,则为javabean对象</span></span><br><span class="line">                    <span class="keyword">if</span> (!(arg <span class="keyword">instanceof</span> Integer) &amp;&amp; !(arg <span class="keyword">instanceof</span> String)) &#123;</span><br><span class="line">                            <span class="keyword">for</span> (Class type : types) &#123;</span><br><span class="line">                                <span class="comment">// 通过反射调用get方法拿到值</span></span><br><span class="line">                                Field[] fields = type.getDeclaredFields();</span><br><span class="line">                                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fields.length; i++) &#123;</span><br><span class="line">                                    Field field = fields[i];</span><br><span class="line">                                    field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                                    String fieldName = field.getName();</span><br><span class="line">                                    <span class="comment">// 排除序列化Id字段</span></span><br><span class="line">                                    <span class="keyword">if</span> (!fieldName.equals(<span class="string">"serialVersionUID"</span>)) &#123;</span><br><span class="line">                                        String methodName = <span class="string">"get"</span> + fieldName.substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase() + fieldName.substring(<span class="number">1</span>);</span><br><span class="line">                                        Method declaredMethod = type.getDeclaredMethod(methodName);</span><br><span class="line">                                        Object typeResult = declaredMethod.invoke(type.newInstance());</span><br><span class="line">                                        String str2 = <span class="string">""</span>;</span><br><span class="line">                                        <span class="keyword">if</span> (<span class="keyword">null</span> != typeResult) &#123;</span><br><span class="line">                                            str2 = <span class="string">"::"</span> + typeResult + <span class="string">"::"</span>;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                        <span class="comment">// 将字段名和值一一对应</span></span><br><span class="line">                                        key.append(fieldName);</span><br><span class="line">                                        key.append(str2);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    field.setAccessible(<span class="keyword">false</span>);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        key.append(arg);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 拿到缓存中的内容</span></span><br><span class="line">        Object obj = redisTemplate.opsForValue().get(key.toString());</span><br><span class="line">        <span class="comment">// 有缓存则直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != obj) &#123;</span><br><span class="line">            <span class="keyword">return</span> obj;</span><br><span class="line">        &#125;</span><br><span class="line">        result = pjp.proceed();</span><br><span class="line">        <span class="comment">// 返回通知，存入缓存</span></span><br><span class="line">        redisTemplate.opsForValue().set(key.toString(), result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    经过测试，发现javabean对象反射取值并不顺利，前台传入的值取不到，默认值可以拿到。如果是Integer和String类型的参数则正常。这里我只将代码贴出保存下来，感觉思路是正确的，可能反射调用出现了问题。仅供参考。</p><p>以后完善之后，我会将调试一并发出。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    相比于从数据库中查询，从缓存中读取数据无疑更加快速，当用户发送相同的请求时使用缓存，既可以减少数据库的压力，又可以加快查询速度。&lt;/p&gt;
&lt;p&gt;首先先讲一下在Java代码中加入redis缓存的步骤&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;准备一个key，key不可重复，常与参数
      
    
    </summary>
    
      <category term="项目经验" scheme="http://www.dlhblog.online/categories/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C/"/>
    
    
  </entry>
  
  <entry>
    <title>登录限制页面回退实现</title>
    <link href="http://www.dlhblog.online/2018/11/19/%E7%99%BB%E5%BD%95%E9%99%90%E5%88%B6%E9%A1%B5%E9%9D%A2%E5%9B%9E%E9%80%80%E5%AE%9E%E7%8E%B0/"/>
    <id>http://www.dlhblog.online/2018/11/19/登录限制页面回退实现/</id>
    <published>2018-11-19T15:32:44.000Z</published>
    <updated>2018-11-20T04:48:07.498Z</updated>
    
    <content type="html"><![CDATA[<h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p>​    在某些页面的跳转中需要验证登录才可以继续进行，比如实名认证页面，用户必须登录，没有登录就会被拦截器拦截，此时当用户登录后跳转的直接就是实名认证页面。</p><h1 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h1><ul><li>​    在拦截器执行拦截跳转到登录页面之前，获取请求的路径，将路径存入session作用域中</li><li>​    在登录操作的Controller方法中获取该session，判断session是否为空，不为空则直接跳转该路径视图</li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>通过Aop切面+自定义注解做未登录拦截</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> HttpServletRequest request;</span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"@annotation(com.dlh.xmjf.web.aop_adaptor.annotation.RequireLogin)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"cut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">        Object result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 通过作用域拿到userModel对象，只有登录之后才会存在，从而判断是否登录</span></span><br><span class="line">        UserModel userModel = (UserModel) request.getSession().getAttribute(XmjfConstant.LOGIN_SESSION_KEY);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == userModel) &#123;</span><br><span class="line">            <span class="comment">// 拿到方法签名</span></span><br><span class="line">            MethodSignature methodSignature = (MethodSignature) pjp.getSignature();</span><br><span class="line">            Method method = methodSignature.getMethod();</span><br><span class="line">            <span class="comment">// 获取RequestMapping等映射注解，因为可能三种注解混合使用了</span></span><br><span class="line">            RequestMapping requestMapping = method.getAnnotation(RequestMapping.class);</span><br><span class="line">            GetMapping getMapping = method.getAnnotation(GetMapping.class);</span><br><span class="line">            PostMapping postMapping = method.getAnnotation(PostMapping.class);</span><br><span class="line">            String requestPath = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != requestMapping) &#123;</span><br><span class="line">                requestPath += requestMapping.value()[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != getMapping) &#123;</span><br><span class="line">                requestPath += getMapping.value()[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != postMapping) &#123;</span><br><span class="line">                requestPath += postMapping.value()[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            request.getSession().setAttribute(XmjfConstant.LOGIN_BEFORE_SESSION, requestPath);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LoginException(<span class="string">"未登录"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        result = pjp.proceed();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Controller层的登录代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"user/login"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResultInfo <span class="title">login</span><span class="params">(String phone, String password, HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">    UserModel userModel = userService.login(phone, password);</span><br><span class="line">    request.getSession().setAttribute(XmjfConstant.LOGIN_SESSION_KEY, userModel);</span><br><span class="line">    String beforeView = (String) request.getSession().getAttribute(XmjfConstant.LOGIN_BEFORE_SESSION);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != beforeView) &#123;</span><br><span class="line">        <span class="comment">// 因为是前台是ajax请求，所以返回一个beforeView，通过判断是否存在从而是否跳转相应页面</span></span><br><span class="line">        <span class="comment">// success是resultInfo对象</span></span><br><span class="line">        <span class="keyword">return</span> success(<span class="number">200</span>, beforeView);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> success();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;场景&quot;&gt;&lt;a href=&quot;#场景&quot; class=&quot;headerlink&quot; title=&quot;场景&quot;&gt;&lt;/a&gt;场景&lt;/h1&gt;&lt;p&gt;​    在某些页面的跳转中需要验证登录才可以继续进行，比如实名认证页面，用户必须登录，没有登录就会被拦截器拦截，此时当用户登录后跳转的直接
      
    
    </summary>
    
      <category term="项目经验" scheme="http://www.dlhblog.online/categories/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C/"/>
    
    
  </entry>
  
  <entry>
    <title>SSM整合Dubbo</title>
    <link href="http://www.dlhblog.online/2018/11/07/SSM%E6%95%B4%E5%90%88Dubbo/"/>
    <id>http://www.dlhblog.online/2018/11/07/SSM整合Dubbo/</id>
    <published>2018-11-07T11:23:30.000Z</published>
    <updated>2018-11-07T14:45:35.862Z</updated>
    
    <content type="html"><![CDATA[<p>SSM环境整合Dubbo其实就是将我们以前的单体应用程序改造成分布式应用程序。</p><h1 id="创建Maven多模块工程"><a href="#创建Maven多模块工程" class="headerlink" title="创建Maven多模块工程"></a>创建Maven多模块工程</h1><p>ssm_dubbo_par 父工程</p><p>ssm_dubbo_api 服务定义模块</p><p>ssm_dubbo_server 服务提供模块</p><p>ssm_dubbo_web 服务消费模块</p><p>多模块工程目录结构为</p><p><img src="/dlh1234okok.github.io/2018/11/07/SSM整合Dubbo/1.jpg" alt=""></p><p>接下来写一个demo，通过用户id查询用户</p><h1 id="服务定义模块"><a href="#服务定义模块" class="headerlink" title="服务定义模块"></a>服务定义模块</h1><blockquote><p>​    建议将服务接口、服务模型、服务异常等均放在 API 包中，因为服务模型和异常也是 API 的一部分，这样做也符合分包原则：重用发布等价原则(REP)，共同重用原则(CRP)。</p></blockquote><h2 id="创建POJO类"><a href="#创建POJO类" class="headerlink" title="创建POJO类"></a>创建POJO类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">431851354165903552L</span>;</span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String userPwd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为要通过网络传输，所以将它实现序列化接口</p><h2 id="创建服务接口"><a href="#创建服务接口" class="headerlink" title="创建服务接口"></a>创建服务接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryUserByUserId</span><span class="params">(Integer userId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="服务提供模块"><a href="#服务提供模块" class="headerlink" title="服务提供模块"></a>服务提供模块</h1><h2 id="引入对API模块的依赖，引入Spring、Mybatis等的各种依赖"><a href="#引入对API模块的依赖，引入Spring、Mybatis等的各种依赖" class="headerlink" title="引入对API模块的依赖，引入Spring、Mybatis等的各种依赖"></a>引入对API模块的依赖，引入Spring、Mybatis等的各种依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- c3p0 连接池 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- mybatis --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 添加mybatis与Spring整合的核心包 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- mysql 驱动包 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.39<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 日志打印相关的jar --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- spring web --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- spring mvc --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- web servlet --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加jetty插件以及对java目录下资源文件读取的支持</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.tld<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mortbay.jetty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jetty-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.1.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scanIntervalSeconds</span>&gt;</span>10<span class="tag">&lt;/<span class="name">scanIntervalSeconds</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">              上下文路径:访问的项目名</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">contextPath</span>&gt;</span>/ssm-dubbo<span class="tag">&lt;/<span class="name">contextPath</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="添加Spring配置文件"><a href="#添加Spring配置文件" class="headerlink" title="添加Spring配置文件"></a>添加Spring配置文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://code.alibabatech.com/schema/dubbo</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://code.alibabatech.com/schema/dubbo/dubbo.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.dlh.server.service"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--读取jdbc.properties配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置c3p0 数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置 sqlSessionFactory --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:com/dlh/server/mappers/*.xml"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置扫描器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mapperScanner"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 扫描com.dlh.dao这个包以及它的子包下的所有映射接口类 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.dlh.server.dao"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--dubbo服务提供方配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"ssm_dubbo_server"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"com.dlh.api.service.IUserService"</span> <span class="attr">ref</span>=<span class="string">"userServiceImpl"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">"zookeeper://127.0.0.1:2181"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"20880"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="编写dao层代码"><a href="#编写dao层代码" class="headerlink" title="编写dao层代码"></a>编写dao层代码</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.dlh.server.dao.UserDao"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryUserByUserId"</span> <span class="attr">resultType</span>=<span class="string">"com.dlh.api.po.User"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">        SELECT id AS userId,user_name AS userName,user_pwd AS userPwd</span><br><span class="line">        FROM t_user WHERE id = #&#123;userId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryUserByUserId</span><span class="params">(Integer userId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现服务接口"><a href="#实现服务接口" class="headerlink" title="实现服务接口"></a>实现服务接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryUserByUserId</span><span class="params">(@Param(<span class="string">"userId"</span>)</span> Integer userId) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.queryUserByUserId(userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在web-xml中配置应用程序的入口"><a href="#在web-xml中配置应用程序的入口" class="headerlink" title="在web.xml中配置应用程序的入口"></a>在web.xml中配置应用程序的入口</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"3.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 启用spring容器环境上下文监听 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="服务消费模块"><a href="#服务消费模块" class="headerlink" title="服务消费模块"></a>服务消费模块</h1><h2 id="配置springMVC配置文件"><a href="#配置springMVC配置文件" class="headerlink" title="配置springMVC配置文件"></a>配置springMVC配置文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://code.alibabatech.com/schema/dubbo</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://code.alibabatech.com/schema/dubbo/dubbo.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 扫描com.dlh.crm.controller 下包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.dlh.web.controller"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mvc 注解驱动 并添加json 支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 返回信息为字符串时 处理 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.StringHttpMessageConverter"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 将对象转换为json 对象 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 静态资源文件的处理放行 配置方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--dubbo消费方配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"ssm_dubbo_web"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">"zookeeper://127.0.0.1:2181"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">interface</span>=<span class="string">"com.dlh.api.service.IUserService"</span> <span class="attr">id</span>=<span class="string">"userService"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置Controller层"><a href="#配置Controller层" class="headerlink" title="配置Controller层"></a>配置Controller层</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IUserService userService;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user/&#123;userId&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryUserByUserId</span><span class="params">(@PathVariable Integer userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.queryUserByUserId(userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置jetty插件"><a href="#配置jetty插件" class="headerlink" title="配置jetty插件"></a>配置jetty插件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mortbay.jetty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jetty-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.1.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scanIntervalSeconds</span>&gt;</span>10<span class="tag">&lt;/<span class="name">scanIntervalSeconds</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">              上下文路径:访问的项目名</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">contextPath</span>&gt;</span>/ssm-web<span class="tag">&lt;/<span class="name">contextPath</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="Maven执行多模块安装"><a href="#Maven执行多模块安装" class="headerlink" title="Maven执行多模块安装"></a>Maven执行多模块安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clean compile install -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure><p>启动zookeeper服务</p><h2 id="启动服务端jetty（server）"><a href="#启动服务端jetty（server）" class="headerlink" title="启动服务端jetty（server）"></a>启动服务端jetty（server）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jetty:run -Djetty.port=9091</span><br></pre></td></tr></table></figure><p>没有报错则基本启动完成</p><h2 id="启动消费方jetty（web）"><a href="#启动消费方jetty（web）" class="headerlink" title="启动消费方jetty（web）"></a>启动消费方jetty（web）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jetty:run -Djetty.port=9092</span><br></pre></td></tr></table></figure><h2 id="访问调用Controller层"><a href="#访问调用Controller层" class="headerlink" title="访问调用Controller层"></a>访问调用Controller层</h2><p><img src="/dlh1234okok.github.io/2018/11/07/SSM整合Dubbo/2.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;SSM环境整合Dubbo其实就是将我们以前的单体应用程序改造成分布式应用程序。&lt;/p&gt;
&lt;h1 id=&quot;创建Maven多模块工程&quot;&gt;&lt;a href=&quot;#创建Maven多模块工程&quot; class=&quot;headerlink&quot; title=&quot;创建Maven多模块工程&quot;&gt;&lt;/a&gt;创建M
      
    
    </summary>
    
      <category term="分布式应用" scheme="http://www.dlhblog.online/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E5%BA%94%E7%94%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>Dubbo配置zookeeper注册中心</title>
    <link href="http://www.dlhblog.online/2018/11/07/Dubbo%E9%85%8D%E7%BD%AEzookeeper%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/"/>
    <id>http://www.dlhblog.online/2018/11/07/Dubbo配置zookeeper注册中心/</id>
    <published>2018-11-07T03:26:23.000Z</published>
    <updated>2018-11-07T04:57:51.566Z</updated>
    
    <content type="html"><![CDATA[<h1 id="windows-下Zookeeper-配置与启动（单机模式）"><a href="#windows-下Zookeeper-配置与启动（单机模式）" class="headerlink" title="windows 下Zookeeper 配置与启动（单机模式）"></a>windows 下Zookeeper 配置与启动（单机模式）</h1><h2 id="下载并解压"><a href="#下载并解压" class="headerlink" title="下载并解压"></a>下载并解压</h2><p><a href="http://mirrors.hust.edu.cn/apache/zookeeper/zookeeper-3.4.13/zookeeper-3.4.13.tar.gz" target="_blank" rel="noopener">http://mirrors.hust.edu.cn/apache/zookeeper/zookeeper-3.4.13/zookeeper-3.4.13.tar.gz</a></p><h2 id="准备zoo-cfg文件"><a href="#准备zoo-cfg文件" class="headerlink" title="准备zoo.cfg文件"></a>准备zoo.cfg文件</h2><p>/zookeeper-3.4.13/conf目录下将zoo_sample.cfg文件拷贝复制一份为zoo.cfg</p><p>添加数据存储目录dataDir和日志存储目录dataLogDir</p><p><img src="/dlh1234okok.github.io/2018/11/07/Dubbo配置zookeeper注册中心/1.jpg" alt=""></p><h2 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h2><p>bin/zkServer.cmd</p><h2 id="客户端连接"><a href="#客户端连接" class="headerlink" title="客户端连接"></a>客户端连接</h2><p>bin/zkCli.cmd</p><p>节点查看命令：<code>ls  /</code> </p><p><img src="/dlh1234okok.github.io/2018/11/07/Dubbo配置zookeeper注册中心/2.jpg" alt=""></p><h2 id="Dubbo-应用配置"><a href="#Dubbo-应用配置" class="headerlink" title="Dubbo 应用配置"></a>Dubbo 应用配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">"zookeeper://127.0.0.1:2181"</span>&gt;</span><span class="tag">&lt;/<span class="name">dubbo:registry</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 添加坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.sgroschupf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Linux下Zookeeper-配置与启动"><a href="#Linux下Zookeeper-配置与启动" class="headerlink" title="Linux下Zookeeper 配置与启动"></a>Linux下Zookeeper 配置与启动</h1><h2 id="下载zookeeper"><a href="#下载zookeeper" class="headerlink" title="下载zookeeper"></a>下载zookeeper</h2><p><img src="/dlh1234okok.github.io/2018/11/07/Dubbo配置zookeeper注册中心/3.jpg" alt=""></p><h2 id="解压缩"><a href="#解压缩" class="headerlink" title="解压缩"></a>解压缩</h2><p><img src="/dlh1234okok.github.io/2018/11/07/Dubbo配置zookeeper注册中心/4.jpg" alt=""></p><h2 id="准备zoo-conf配置文件"><a href="#准备zoo-conf配置文件" class="headerlink" title="准备zoo.conf配置文件"></a>准备zoo.conf配置文件</h2><p>进入到conf目录下</p><p><img src="/dlh1234okok.github.io/2018/11/07/Dubbo配置zookeeper注册中心/5.jpg" alt=""></p><p>配置zoo.cfg文件添加数据和日志存放目录</p><p><img src="/dlh1234okok.github.io/2018/11/07/Dubbo配置zookeeper注册中心/6.jpg" alt=""></p><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><p>进入bin目录下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./zkServer.sh start</span><br></pre></td></tr></table></figure><h2 id="启动客户端"><a href="#启动客户端" class="headerlink" title="启动客户端"></a>启动客户端</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./zkCli.sh</span><br></pre></td></tr></table></figure><h2 id="Dubbo注册中心配置"><a href="#Dubbo注册中心配置" class="headerlink" title="Dubbo注册中心配置"></a>Dubbo注册中心配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">"zookeeper://192.168.32.223:2181"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>地址填写虚拟机ip地址</p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>运行zookeeper服务端，将服务发布</p><p>运行zookeeper客户端，<code>ls /</code>命令查询根节点下所有节点</p><p><img src="/dlh1234okok.github.io/2018/11/07/Dubbo配置zookeeper注册中心/2.jpg" alt=""></p><p>在进入到dubbo节点下可以看到我们发布的服务接口</p><p><img src="/dlh1234okok.github.io/2018/11/07/Dubbo配置zookeeper注册中心/7.jpg" alt=""></p><p>进入发布的服务，可以看到我们服务提供方和消费方相关信息</p><p><img src="/dlh1234okok.github.io/2018/11/07/Dubbo配置zookeeper注册中心/8.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;windows-下Zookeeper-配置与启动（单机模式）&quot;&gt;&lt;a href=&quot;#windows-下Zookeeper-配置与启动（单机模式）&quot; class=&quot;headerlink&quot; title=&quot;windows 下Zookeeper 配置与启动（单机模式）&quot;&gt;
      
    
    </summary>
    
      <category term="分布式应用" scheme="http://www.dlhblog.online/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E5%BA%94%E7%94%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>问题汇总</title>
    <link href="http://www.dlhblog.online/2018/11/07/%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <id>http://www.dlhblog.online/2018/11/07/问题汇总/</id>
    <published>2018-11-07T01:52:50.000Z</published>
    <updated>2018-11-21T13:03:13.620Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IOC是什么-有哪些优点"><a href="#IOC是什么-有哪些优点" class="headerlink" title="IOC是什么,有哪些优点?"></a>IOC是什么,有哪些优点?</h1><p>IOC是Spring框架的核心技术，<strong>控制反转和依赖注入</strong></p><ul><li><p>控制反转</p><p><strong>应用程序创建对象的过程交给外部容器IOC来创建</strong></p><p>未使用Spring框架的IOC之前，创建对象为：</p><p><code>UserService userService = new UserService();</code></p><p>使用控制反转之后：</p><p>​    可以在XML文件中配置bean标签，或者使用扫描机制，配合注解（@Component，@Service，@Repository，@Controller），在Spring上下文启动时就会将这些对象创建完毕。</p></li><li><p>依赖注入（装配）</p><p>依赖注入其实就是给属性赋值，没有使用IOC之前，Controller层如果需要调用Service层，则需要手动赋值</p><p><code>userService = new UserService();</code></p><p>使用了IOC之后，在‘控制反转’过程中，已经通过XML配置或是扫描注解配置将该对象创建完毕，所以只需要加上<code>@Resource</code>或是<code>@AutoWired</code>注解即可完成对属性的赋值操作</p></li><li><p>IOC具体实现内部原理</p><p>XML解析，反射，单例，工厂设计模式</p></li><li><p>优点</p><p>降低组件之间的耦合，提高程序的灵活性和可维护性，代码的侵入性较低。</p></li><li><p>缺点</p><p>创建对象的步骤变复杂了，并且通过反射创建对象，使得效率相对于手动创建对象低一些</p></li></ul><h1 id="Aop实现方式与应用场景"><a href="#Aop实现方式与应用场景" class="headerlink" title="Aop实现方式与应用场景"></a>Aop实现方式与应用场景</h1><ul><li><p>面向切面编程，Aop实现的关键是Aop在运行时动态创建Aop代理。</p></li><li><p><strong>Aop代理分为静态代理和动态代理</strong>。</p></li></ul><p>静态代理是使用Spring框架提供的命令进行编译，在编译阶段生成Aop代理类，因此也成为编译时增强</p><p><strong>动态代理借助JDK动态代理和CGLib动态代理，在程序运行过程中动态创建代理对象</strong></p><ul><li>代理对象的方法=被代理对象的方法+增强的处理</li><li>核心思想：将应用程序中的业务逻辑和对其支持的通用服务进行分离</li></ul><p>在大量方法需要进行同一增强或修改时适合使用Aop</p><p>权限控制、日志收集、事务管理、非法资源控制等</p><h1 id="SpringMVC工作流程"><a href="#SpringMVC工作流程" class="headerlink" title="SpringMVC工作流程"></a>SpringMVC工作流程</h1><p><img src="/dlh1234okok.github.io/2018/11/07/问题汇总/SpringMVC工作流程.jpg" alt=""></p><ol><li>dispatcherServlet前端控制器捕获用户发送的请求，解析URL获取资源标识URI</li><li>HandlerMapping处理器映射器根据URI找到对应的处理器对象及其拦截器，返回HandlerExecutionChain</li><li>根据Handler对象找到合适的HandlerAdpater处理适配器，将调用拦截器的preHandler()方法</li><li>根据HandlerAdpater调用和合适的Handler（Controller）</li><li>执行完Controller方法返回ModelAndView对象</li><li>HandlerAdpater将ModelAndView对象返回给dispatcherServlet</li><li>dispatcherServlet将ModelAndView传给ViewReslover视图解析器</li><li>Viewreslover解析返回具体的View给dispatcherServlet</li><li>dispatcherServlet对View进行渲染视图响应给用户</li></ol><h1 id="web会话跟踪技术"><a href="#web会话跟踪技术" class="headerlink" title="web会话跟踪技术"></a>web会话跟踪技术</h1><p>http协议是无状态协议，即协议对于事务没有记忆，为了保持客户端与服务器的一次会话连接</p><p>在客户端第一次请求服务器时，server内部会产生一个唯一的sessionId，随着响应携带到客户端，由cookie存储sessionId到浏览器的内存中。</p><p>session 存在于服务器，用于保存用户的敏感信息</p><p>cookie存在于客户端浏览器，数据量小，用户存放临时的敏感度低的信息</p><h1 id="、equals和hashCode"><a href="#、equals和hashCode" class="headerlink" title="==、equals和hashCode"></a>==、equals和hashCode</h1><ul><li><p>==</p><p>基本数据类型==比较的是值</p><p>非基本数据类型==比较的是对象引用的地址</p></li><li><p>equals</p><p>equals比较的是对象的地址值</p><p>重写之后可以比较对象内容，比如String重写了equals方法，先比较地址，相等直接返回true，不相等再比较内容</p></li></ul><ul><li><p>重写equals，不重写hashCode</p><p>equals相等，hashCode不相等（不同对象地址）</p><p>hashCode相等，equals相等（同一对象地址）</p></li><li><p>重写hashCode，不重写equals</p><p>hashCode相等，equals不相等（不同对象地址）</p><p>equals相等，hashCode相等（同一对象地址）</p></li><li><p>重写hashCode和equals</p><p>equals相等，hashCode相等（不同对象地址）</p></li></ul><p>重写equals均采用先比较地址对象地址，再比较对象内容</p><p>重写hashCode为Object.hash(参数)</p><h1 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h1><p>MVC是一种编程思想，通过将视图与业务分离，达到降低耦合，提高代码重用，可维护性高等特点。</p><p>model-模型，主要是数据存储部分，javabean</p><p>view-视图，负责用于数据显示，通过模型数据进行展示</p><p>controller-控制器，处理与用户之间的交互，用于请求和响应</p><h1 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h1><ul><li><p><strong>对象关系映射</strong></p><p>​    一般的关系型数据库不是面向对象的，而Java语言是面向对象的。通过对象模型表示的对象映射到基于SQL的关系型    数据库达到操作对象即操作数据库数据的目的。</p></li><li><p>数据库与javabean对象的关系</p><p>表——javabean</p><p>字段——属性</p><p>记录——javabean对象</p></li><li><p>ORM框架</p><p>Mybatis：半自动ORM框架，基于sql，需要手动创建表结构</p><p>Hibernate：完整的ORM框架，全自动，操作对象就是操作表结构</p></li></ul><h1 id="同步和异步的区别"><a href="#同步和异步的区别" class="headerlink" title="同步和异步的区别"></a>同步和异步的区别</h1><p>同步：发送请求，需要等待返回才能继续发送请求</p><p>异步：发送请求，不需要等待返回，随时可以再发送下一个请求</p><ul><li><p>使用异步交互的例子</p><p>​    在网络环境较差的情况下，同步需要等待服务器响应之后才能继续进行另外的动作，比如加载一个页面，包含文字和图片，同步情况下需要等整个页面响应完成后浏览器才能展示，而异步则可以先将文字加载出来后，局部加载图片。</p><p>​    比如电商购物，订单提交完成后需要经过仓储系统检查仓储以及调度发货，然后经过配送系统进行配送，这一系列步骤肯定不是同步的，在用户订单支付完成之后，这些操作将异步通信在后台执行。</p></li></ul><h1 id="redis缓存穿透和雪崩问题"><a href="#redis缓存穿透和雪崩问题" class="headerlink" title="redis缓存穿透和雪崩问题"></a>redis缓存穿透和雪崩问题</h1><ul><li><p>缓存穿透</p><p>​    在缓存中查询一个不存在的数据，没有查到将去数据库进行查询，没有查到不写入缓存。这将导致这个不存在的数据每次查找都要去数据库查，造成缓存穿透</p></li><li><p>缓存雪崩</p><p>​    redis服务器中大量key在同一时间失效，导致大量请求进入数据库导致连接异常</p></li></ul><p>。。解决将在明天写上</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;IOC是什么-有哪些优点&quot;&gt;&lt;a href=&quot;#IOC是什么-有哪些优点&quot; class=&quot;headerlink&quot; title=&quot;IOC是什么,有哪些优点?&quot;&gt;&lt;/a&gt;IOC是什么,有哪些优点?&lt;/h1&gt;&lt;p&gt;IOC是Spring框架的核心技术，&lt;strong&gt;控制
      
    
    </summary>
    
      <category term="面试相关" scheme="http://www.dlhblog.online/categories/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>分布式应用-RMI简单实现</title>
    <link href="http://www.dlhblog.online/2018/11/06/%E5%88%86%E5%B8%83%E5%BC%8F%E5%BA%94%E7%94%A8-rmi/"/>
    <id>http://www.dlhblog.online/2018/11/06/分布式应用-rmi/</id>
    <published>2018-11-06T12:51:08.000Z</published>
    <updated>2018-11-07T11:31:27.877Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单体应用"><a href="#单体应用" class="headerlink" title="单体应用"></a>单体应用</h1><p>​    一个单体应用程序，通俗来说就是应用程序的全部功能被一起打包作为单个单元或应用程序。 这个单元可以是JAR、WAR、EAR，或其他一些归档格式，但其全部集成在一个单一的单元。 例如在线购物网站通常会包括客户、产品、目录、结帐等功能。 另一个例子是如下的movieplex。这样的应用程序通常由节目预订、添加/删除的电影、票房收入、电影起租点和其他功能组成。在单体应用程序的情况下，所有这些功能的实现和打包在一起作为一个应用程序。（来自百科）</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>dao  service  controller  ui页面 全部体现到一个war文件中</li><li>功能升级复杂  扩展功能相对麻烦  不能按需扩展</li><li>代码重复性较大 service服务代码重复性较大</li><li>部署简单     </li><li>技术迭代 复杂度变高  后期维护复杂(涉及技术复杂度较高)</li></ul><h1 id="分布式应用"><a href="#分布式应用" class="headerlink" title="分布式应用"></a>分布式应用</h1><p>分布式应用程序是指：应用程序分布在不同计算机上，通过网络来共同完成一项任务。通常为服务器/客户端模式。</p><p>  建立分布式应用主要设计以下几种技术：</p><ul><li>客户机/服务器体系结构；</li><li>远程过程调用（RPC）；</li><li>分布式计算环境（DCE）；</li><li>分布式组件对象模型（DCOM）；</li><li>通用对象请求代理体系结构（COBRA）；</li><li>企业 Intranet Applet；</li><li>Java 分布式对象模型。  </li></ul><h1 id="RMI-远程方法调用"><a href="#RMI-远程方法调用" class="headerlink" title="RMI:远程方法调用"></a>RMI:远程方法调用</h1><p>简单实现</p><p>第一步：定义一个借口，必须继承remote</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IRmiService</span> <span class="keyword">extends</span> <span class="title">Remote</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">say</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二步：编写一个实现类即服务端，继承 UnicastRemoteObject 实现 IRmiService 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RmiService</span> <span class="keyword">extends</span> <span class="title">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title">IRmiService</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RmiService</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">say</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">String content = <span class="string">"Woo! So beautiful butterfly!"</span>;</span><br><span class="line"> System.out.println(<span class="string">"RMI Server say: "</span> + content);</span><br><span class="line"> <span class="keyword">return</span> content;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三步：发布服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RmiPublish</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">RmiPublish</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">try</span> &#123; </span><br><span class="line"> IRmiService rmiService = <span class="keyword">new</span> RmiService();</span><br><span class="line"> <span class="comment">// 发布的接口 </span></span><br><span class="line">    LocateRegistry.createRegistry(<span class="number">8888</span>);</span><br><span class="line"><span class="comment">// 绑定地址 </span></span><br><span class="line">    Naming.bind(<span class="string">"rmi://localhost:8888/rmiService"</span>, rmiService);</span><br><span class="line">&#125; <span class="keyword">catch</span> (RemoteException e) &#123; </span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line"> e.printStackTrace();</span><br><span class="line"> &#125; <span class="keyword">catch</span> (AlreadyBoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> RmiPublish();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第四步：客户端调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RmiClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            IRmiService rmiService = (IRmiService) Naming.lookup(<span class="string">"rmi://localhost:8888/rmiService"</span>);</span><br><span class="line">            String content = rmiService.say();</span><br><span class="line">            System.out.println(<span class="string">"RMI Client Got Say Content: "</span> + content);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NotBoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;单体应用&quot;&gt;&lt;a href=&quot;#单体应用&quot; class=&quot;headerlink&quot; title=&quot;单体应用&quot;&gt;&lt;/a&gt;单体应用&lt;/h1&gt;&lt;p&gt;​    一个单体应用程序，通俗来说就是应用程序的全部功能被一起打包作为单个单元或应用程序。 这个单元可以是JAR、WAR、
      
    
    </summary>
    
      <category term="分布式应用" scheme="http://www.dlhblog.online/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E5%BA%94%E7%94%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>Dubbo-RPC-开始</title>
    <link href="http://www.dlhblog.online/2018/11/06/Dubbo/"/>
    <id>http://www.dlhblog.online/2018/11/06/Dubbo/</id>
    <published>2018-11-06T12:46:11.000Z</published>
    <updated>2018-11-07T11:29:30.543Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RPC基本概念"><a href="#RPC基本概念" class="headerlink" title="RPC基本概念"></a>RPC基本概念</h1><h2 id="RPC-协议-Remote-Procedure-Call-Protocol"><a href="#RPC-协议-Remote-Procedure-Call-Protocol" class="headerlink" title="RPC 协议(Remote Procedure Call Protocol)"></a>RPC 协议(Remote Procedure Call Protocol)</h2><p>​    远程过程调用协议，它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。RPC 协议假定某些传输协议的存在，如 TCP 或 UDP，为通信程序之间携带信息数据。在 OSI 网络通信模型中，RPC 跨越了传输层和应用层。RPC 使得开发包括网络分布式程序在内的应用程序更加容易。</p><p>​    RPC  采用客户机/服务器模式。请求程序就是一个客户机，而服务提供程序就是一个服务器。首先，客户机调用进程发送一个有进程参数的调用信息到服务进程，然后等待应答信息。在服务器端，进程保持睡眠状态直到调用信息到达为止。当一个调用信息到达，服务器获得进程参数，计算结果，发送答复信息，然后等待下一个调用信息，最后，客户端调用进程接收答复信息，获得进程结果，然后调用执行继续进行。</p><h2 id="RPC与-HTTP、TCP、UDP、Socket-的区别"><a href="#RPC与-HTTP、TCP、UDP、Socket-的区别" class="headerlink" title="RPC与 HTTP、TCP、UDP、Socket 的区别"></a>RPC与 HTTP、TCP、UDP、Socket 的区别</h2><ul><li>TCP/UDP：都是传输协议，主要区别是 tcp 协议连接需要 3 次握手，断开需要四次挥手，是通过流来传输的，就是确定连接后，一直发送信息，传完后断开。udp  不需要进行连接，直接把信息封装成多个报文，直接发送。所以 udp  的速度更快写，但是不保证数据的完整性。</li><li>Http：超文本传输协议是一种应用层协议，建立在TCP 协议之上。</li><li>Socket：是在应用程序层面上对 TCP/IP 协议的封装和应用。其实是一个调用接口，方便程序员使用 TCP/IP 协议栈而已。程序员通过 socket 来使用 tcp/ip 协议。但是 socket 并不是一定要使用 tcp/ip 协议，Socket 编程接口在设计的时候，就希望也能适应其他的网络协议。小结：我们把网络传输类比于一条公路，那 TCP/UDP 就是货车，HTTP 就是货物，而 socket就是发动机。</li><li>RPC 是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。所以RPC 的实现可以通过不同的协议去实现比如可以使 http、RMI 等。</li></ul><h1 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h1><p>​    Dubbo  是由阿里巴巴开源的一个高性能、基于 Java 开源的远程调用框架。正如在许多RPC 系统中一样，dubbo 是基于定义服务的概念，指定可以通过参数和返回类型远程调用的方法。在服务器端，服务器实现这个接口，并运行一个 dubbo 服务器来处理客户端调用。在客户端，客户机有一个存根，它提供与服务器相同的方法。</p><h2 id="架构流程图"><a href="#架构流程图" class="headerlink" title="架构流程图"></a>架构流程图</h2><p><img src="/dlh1234okok.github.io/2018/11/06/Dubbo/1.jpg" alt=""></p><ol start="0"><li><p><strong>start</strong>   初始化(ioc 容器)</p><p>​     在ioc 容器启动时  对服务实现类实例化</p></li><li><p><strong>register</strong> 服务注册操作</p><p>​      将服务提供方提供的服务信息写入到注册中心</p><p>​         ip  port  服务列表信息(userService:queryUserByUserId,queryUsersByparams…,accountService,…) </p></li><li><p><strong>subscrible</strong>  服务订阅操作</p><p>​       消费者启动时订阅注册中心提供的服务列表信息</p><p>​          userService,accountService </p></li><li><p><strong>notify</strong>  消息通知 服务变更时 注册中心推送变更消息到消费者    </p></li><li><p><strong>invoke</strong>  远程调用  </p><p>​       根据订阅的服务信息 发起远程调用(同步操作 会有阻塞情况发生)</p></li><li><p><strong>count</strong>  监控中心  监控程序运行状况</p></li></ol><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h3><p>jdk1.6 以上和 maven3.0 以上，采用 maven 分模块构建 api 模块，provider模块以及 consumer 模块 </p><h3 id="导入Dubbo坐标"><a href="#导入Dubbo坐标" class="headerlink" title="导入Dubbo坐标"></a>导入Dubbo坐标</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="定义服务接口（api）"><a href="#定义服务接口（api）" class="headerlink" title="定义服务接口（api）"></a>定义服务接口（api）</h2><p>​    由于服务的生产者和消费者都会依赖这个接口，因此强烈建议把这个接口定义在一个独立的模块，然后由生产者模块和消费者模块各自依赖即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryUserById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="服务实现（provider）"><a href="#服务实现（provider）" class="headerlink" title="服务实现（provider）"></a>服务实现（provider）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer, User&gt; map = <span class="keyword">new</span> HashMap&lt;Integer, User&gt;();</span><br><span class="line">    <span class="comment">// 初始化时给map集合填充数据，充当数据库查询</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserServiceImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        map.put(<span class="number">1</span>, <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">"zs"</span>, <span class="string">"123"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryUserById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map.get(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置生产者（provider）"><a href="#配置生产者（provider）" class="headerlink" title="配置生产者（provider）"></a>配置生产者（provider）</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://code.alibabatech.com/schema/dubbo</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://code.alibabatech.com/schema/dubbo/dubbo.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.dlh.service"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--dubbo环境配置--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--应用名称--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"dubbo_provider"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注册中心配置--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;dubbo:registry address="multicast://232.5.6.7:1221"/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--公布的服务使用的协议与端口号--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"20880"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置公布的服务--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"com.dlh.service.IUserService"</span> <span class="attr">ref</span>=<span class="string">"userServiceImpl"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="启动服务提供程序（provider）"><a href="#启动服务提供程序（provider）" class="headerlink" title="启动服务提供程序（provider）"></a>启动服务提供程序（provider）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Publish</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"provider.xml"</span>);</span><br><span class="line">        context.start();</span><br><span class="line">        System.out.println(<span class="string">"发布成功。。。"</span>);</span><br><span class="line">        System.in.read();<span class="comment">// 任意键停止</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置服务的消费端（consumer）"><a href="#配置服务的消费端（consumer）" class="headerlink" title="配置服务的消费端（consumer）"></a>配置服务的消费端（consumer）</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.dlh.controller"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--应用名称--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"dubbo_consumer"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注册中心配置--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;dubbo:registry address="multicast://232.5.6.7:1221"/&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">"zookeeper://224.5.6.7:1234?backup=224.5.6.8:1234,224.5.6.9:1234"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置订阅的服务列表--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">interface</span>=<span class="string">"com.dlh.service.IUserService"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="模拟消费端Controller层（consumer）"><a href="#模拟消费端Controller层（consumer）" class="headerlink" title="模拟消费端Controller层（consumer）"></a>模拟消费端Controller层（consumer）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IUserService userService;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryUserById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.queryUserById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试消费（consumer）"><a href="#测试消费（consumer）" class="headerlink" title="测试消费（consumer）"></a>测试消费（consumer）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"consumer.xml"</span>);</span><br><span class="line">        UserController userController = (UserController) context.getBean(<span class="string">"userController"</span>);</span><br><span class="line">        System.out.println(userController.queryUserById(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;RPC基本概念&quot;&gt;&lt;a href=&quot;#RPC基本概念&quot; class=&quot;headerlink&quot; title=&quot;RPC基本概念&quot;&gt;&lt;/a&gt;RPC基本概念&lt;/h1&gt;&lt;h2 id=&quot;RPC-协议-Remote-Procedure-Call-Protocol&quot;&gt;&lt;a hre
      
    
    </summary>
    
      <category term="分布式应用" scheme="http://www.dlhblog.online/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E5%BA%94%E7%94%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>Shiro-密码散列加密</title>
    <link href="http://www.dlhblog.online/2018/11/03/Shiro-%E5%AF%86%E7%A0%81%E6%95%A3%E5%88%97%E5%8A%A0%E5%AF%86/"/>
    <id>http://www.dlhblog.online/2018/11/03/Shiro-密码散列加密/</id>
    <published>2018-11-03T09:12:55.000Z</published>
    <updated>2018-11-03T09:42:04.147Z</updated>
    
    <content type="html"><![CDATA[<p>​    在数据库中，密码应该避免以明文方式存储，散列算法一般用于生成数据的摘要信息，是一种不可逆的算法，一般适合存储密码之类的数据，常见的散列算法如MD5、SHA等。</p><p>​    Shiro也为我们提供了多种散列算法，这里我们使用的是MD5</p><h1 id="测试MD5加密"><a href="#测试MD5加密" class="headerlink" title="测试MD5加密"></a>测试MD5加密</h1><p>Shiro提供了<code>Hd5Hash</code>这个类，其中通过重载构造器进行不同程度的加密。</p><h2 id="一次MD5加密"><a href="#一次MD5加密" class="headerlink" title="一次MD5加密"></a>一次MD5加密</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Md5Hash md5Hash = <span class="keyword">new</span> Md5Hash(passWord);</span><br><span class="line">System.out.println(md5Hash.toString());</span><br></pre></td></tr></table></figure><h2 id="加盐"><a href="#加盐" class="headerlink" title="加盐"></a>加盐</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Md5Hash md5Hash2 = <span class="keyword">new</span> Md5Hash(passWord,<span class="string">"amy"</span>);</span><br><span class="line">System.out.println(md5Hash2.toString());</span><br></pre></td></tr></table></figure><p>​    一些md5解密网站很容易的通过散列值得到密码，即如果直接对密码进行散列相对来说破解更容易，此时我们可以加一些只有系统知道的干扰数据，如用户名或ID（即盐）；这样散列的对象是“密码+用户名”，这样生成的散列值相对来说更难破解。</p><h2 id="加盐-散列次数-2"><a href="#加盐-散列次数-2" class="headerlink" title="加盐+散列次数*2"></a>加盐+散列次数*2</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Md5Hash md5Hash3 = <span class="keyword">new</span> Md5Hash(passWord,<span class="string">"amy"</span>,<span class="number">2</span>);</span><br><span class="line">System.out.println(md5Hash3.toString());</span><br></pre></td></tr></table></figure><p>​    这时的散列格式或许为MD5(MD5())，将密码+用户名的散列密码再进行散列加密，此时作为存储密码将更加复杂，提高安全性。</p><h1 id="在Realm中应用"><a href="#在Realm中应用" class="headerlink" title="在Realm中应用"></a>在Realm中应用</h1><p>将盐和散列后的值存在数据库中，自动realm从数据库取出盐和加密后的值由shiro完成密码校验。</p><h2 id="添加配置文件指定realm和散列加密信息"><a href="#添加配置文件指定realm和散列加密信息" class="headerlink" title="添加配置文件指定realm和散列加密信息"></a>添加配置文件指定realm和散列加密信息</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[main]</span></span><br><span class="line"><span class="comment">#定义凭证匹配器</span></span><br><span class="line"><span class="attr">credentialsMatcher</span>=org.apache.shiro.authc.credential.HashedCredentialsMatcher</span><br><span class="line"><span class="comment">#散列算法</span></span><br><span class="line">credentialsMatcher.hashAlgorithmName=md5</span><br><span class="line"><span class="comment">#散列次数</span></span><br><span class="line">credentialsMatcher.hashIterations=1</span><br><span class="line"><span class="comment">#将凭证匹配器设置到realm</span></span><br><span class="line"><span class="attr">myRealm</span>=com.mani.PasswordRealm</span><br><span class="line">myRealm.credentialsMatcher=$credentialsMatcher</span><br><span class="line">securityManager.realms=$myRealm</span><br></pre></td></tr></table></figure><h2 id="自定义Realm"><a href="#自定义Realm" class="headerlink" title="自定义Realm"></a>自定义Realm</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">   <span class="comment">//获取用户名</span></span><br><span class="line">   String principal = (String) token.getPrincipal();</span><br><span class="line">   <span class="comment">// 模拟数据库中的用户名</span></span><br><span class="line">   <span class="keyword">if</span>(!<span class="string">"zhangsan"</span>.equals(principal))&#123;</span><br><span class="line">      <span class="comment">//表示找不到用户,返回空认证信息</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 模拟数据库中的密码</span></span><br><span class="line">   String password = <span class="string">"2a238413f0931a219bf70721c8e741d8"</span>;</span><br><span class="line">   <span class="comment">// 盐,在数据库中存储的</span></span><br><span class="line">   String salt = <span class="string">"zhangsan"</span>;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 返回认证信息由父类AuthenticatingRealm进行认证</span></span><br><span class="line"><span class="comment">    * 返回认证信息的时候需要把盐也一并的传过去</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   SimpleAuthenticationInfo simpleAuthenticationInfo = <span class="keyword">new</span> SimpleAuthenticationInfo(principal, password, ByteSource.Util.bytes(salt),getName());</span><br><span class="line">   <span class="keyword">return</span> simpleAuthenticationInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进行认证测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAuthenticate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Subject subject = SecurityUtils.getSubject();</span><br><span class="line">    <span class="comment">// 判断当前用户未认证</span></span><br><span class="line">    <span class="keyword">if</span> (!subject.isAuthenticated()) &#123;</span><br><span class="line">        <span class="comment">// token中的参数相当于用户登录传入的账户和密码</span></span><br><span class="line">        UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(<span class="string">"zhangsan"</span>, <span class="string">"root"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 登录</span></span><br><span class="line">            subject.login(token);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 输出认证信息：true或false</span></span><br><span class="line">        System.out.println(subject.isAuthenticated());</span><br><span class="line">        <span class="comment">// 登出</span></span><br><span class="line">        subject.logout();</span><br><span class="line">        System.out.println(subject.isAuthenticated());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：<img src="/dlh1234okok.github.io/2018/11/03/Shiro-密码散列加密/1.jpg" alt=""></p><p>AuthenticatingRealm会将我们传入的密码进行加盐散列加密后与模拟数据库中的密码进行匹配…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    在数据库中，密码应该避免以明文方式存储，散列算法一般用于生成数据的摘要信息，是一种不可逆的算法，一般适合存储密码之类的数据，常见的散列算法如MD5、SHA等。&lt;/p&gt;
&lt;p&gt;​    Shiro也为我们提供了多种散列算法，这里我们使用的是MD5&lt;/p&gt;
&lt;h1 i
      
    
    </summary>
    
      <category term="Shiro" scheme="http://www.dlhblog.online/categories/Shiro/"/>
    
    
  </entry>
  
  <entry>
    <title>Shiro框架-开始</title>
    <link href="http://www.dlhblog.online/2018/11/03/Shiro%E6%A1%86%E6%9E%B6/"/>
    <id>http://www.dlhblog.online/2018/11/03/Shiro框架/</id>
    <published>2018-11-03T07:33:55.000Z</published>
    <updated>2018-11-03T09:05:14.637Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>​    Apache Shiro是一个强大易用的<strong>Java安全框架</strong>，提供了认证、授权、加密和会话管理功能，相比于Spring Security，Shiro的功能可能并没有那么强大，但是使用相对于更加轻便。</p><p>​    Shiro可以非常容易的开发出足够好的应用，其不仅可以用在JavaSE环境，也可以用在JavaEE环境。Shiro可以帮助我们完成：认证、授权、加密、会话管理、与Web集成、缓存等。</p><p><strong>Authentication</strong>：身份认证/登录，验证用户是不是拥有相应的身份；</p><p><strong>Authorization</strong>：授权，即权限验证，验证某个已认证的用户是否拥有某个权限；即判断用户是否能做事情，常见的如：验证某个用户是否拥有某个角色。或者细粒度的验证某个用户对某个资源是否具有某个权限；</p><p>Session Manager：会话管理，即用户登录后就是一次会话，在没有退出之前，它的所有信息都在会话中；会话可以是普通JavaSE环境的，也可以是如Web环境的；</p><p>Cryptography：加密，保护数据的安全性，如密码加密存储到数据库，而不是明文存储；</p><p>Web Support：Web支持，可以非常容易的集成到Web环境；</p><p>Caching：缓存，比如用户登录后，其用户信息、拥有的角色/权限不必每次去查，这样可以提高效率；</p><p>Concurrency：shiro支持多线程应用的并发验证，即如在一个线程中开启另一个线程，能把权限自动传播过去；</p><p>Testing：提供测试支持；</p><p>Run As：允许一个用户假装为另一个用户（如果他们允许）的身份进行访问；</p><p>Remember Me：记住我，这个是非常常见的功能，即一次登录后，下次再来的话不用登录了。</p><h1 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h1><h2 id="Subject"><a href="#Subject" class="headerlink" title="Subject"></a>Subject</h2><p>​    subject在这里其基本意思是“当前操作用户”，但是在安全领域中，subject即可以是人，也可以是第三方进程，网络爬虫，机器人…在Shiro集成的环境中在代码的任何地方可以轻松的获取Shiro Subject。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Subject subject = SecurityUtils.getSubject();</span><br></pre></td></tr></table></figure><p>​    一旦获得Subject，你就可以立即获得你希望用Shiro为当前用户做的90%的事情，如登录、登出、访问会话、执行授权检查等。</p><h2 id="SecurityManager"><a href="#SecurityManager" class="headerlink" title="SecurityManager"></a>SecurityManager</h2><p>​    Subject的“幕后”推手是SecurityManager。Subject代表了当前用户的安全操作，SecurityManager则管理所有用户的安全操作。它是Shiro框架的核心，充当“保护伞”，引用了多个内部嵌套安全组件，它们形成了对象图。但是，一旦SecurityManager及其内部对象图配置好，它就会退居幕后。</p><h2 id="Realm"><a href="#Realm" class="headerlink" title="Realm"></a>Realm</h2><p>​    Realm充当了Shiro与应用安全数据间的“<strong>桥梁</strong>”或者“<strong>连接器</strong>”。也就是说，当切实与像用户帐户这类安全相关数据进行交互，执行认证（登录）和授权（访问控制）时，Shiro会从应用配置的Realm中查找很多内容。</p><p>​    从这个意义上讲，Realm实质上是一个安全相关的DAO：它封装了数据源的连接细节，并在需要时将相关数据提供给Shiro。当配置Shiro时，你必须至少指定一个Realm，用于认证和（或）授权。配置多个Realm是可以的，但是至少需要一个。</p><p>​    Realm 可以理解为读取用户信息、角色及权限的 DAO，就是说SecurityManager要验证用户身份与权限，那么它需要从Realm获取相应的信息进行比较以确定用户身份是否合法；可以把Realm看成DataSource，即安全数据源。</p><h1 id="第一个Shiro应用"><a href="#第一个Shiro应用" class="headerlink" title="第一个Shiro应用"></a>第一个Shiro应用</h1><h2 id="配置依赖"><a href="#配置依赖" class="headerlink" title="配置依赖"></a>配置依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="添加shiro-realm-ini配置文件"><a href="#添加shiro-realm-ini配置文件" class="headerlink" title="添加shiro-realm.ini配置文件"></a>添加shiro-realm.ini配置文件</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#指定自定义realm的位置（在后面）</span></span><br><span class="line"><span class="attr">myRealm</span>= com.mani.MyRealm</span><br><span class="line"><span class="comment">#指定securityManager的realm实现</span></span><br><span class="line">securityManager.realms=$myRealm</span><br></pre></td></tr></table></figure><h2 id="创建SecurityManagerFactory"><a href="#创建SecurityManagerFactory" class="headerlink" title="创建SecurityManagerFactory"></a>创建SecurityManagerFactory</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载配置文件，创建工厂</span></span><br><span class="line">Factory&lt;SecurityManager&gt; factory = <span class="keyword">new</span> IniSecurityManagerFactory(<span class="string">"classpath:shiro.ini"</span>);</span><br></pre></td></tr></table></figure><p>这里以面向接口的方式来接收工厂对象</p><h2 id="通过工厂获取securityManager对象"><a href="#通过工厂获取securityManager对象" class="headerlink" title="通过工厂获取securityManager对象"></a>通过工厂获取securityManager对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">securityManager = factory.getInstance();</span><br></pre></td></tr></table></figure><h2 id="绑定securityManager"><a href="#绑定securityManager" class="headerlink" title="绑定securityManager"></a>绑定securityManager</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置到运行环境中</span></span><br><span class="line">SecurityUtils.setSecurityManager(securityManager);</span><br></pre></td></tr></table></figure><h2 id="创建Subject实例"><a href="#创建Subject实例" class="headerlink" title="创建Subject实例"></a>创建Subject实例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Subject subject = SecurityUtils.getSubject();</span><br></pre></td></tr></table></figure><p>至此我们Shiro的核心Subject，SecurityManager和Realm都已经拥有了，这里我自定义一个Realm</p><h2 id="模拟用户登录认证操作"><a href="#模拟用户登录认证操作" class="headerlink" title="模拟用户登录认证操作"></a>模拟用户登录认证操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAuthenticate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Subject subject = SecurityUtils.getSubject();</span><br><span class="line">    <span class="comment">// 判断当前用户未认证</span></span><br><span class="line">    <span class="keyword">if</span> (!subject.isAuthenticated()) &#123;</span><br><span class="line">        <span class="comment">// token中的参数相当于用户登录传入的账户和密码</span></span><br><span class="line">        UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(<span class="string">"zhangsan"</span>, <span class="string">"666"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 登录</span></span><br><span class="line">            subject.login(token);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 输出认证信息：true或false</span></span><br><span class="line">        System.out.println(subject.isAuthenticated());</span><br><span class="line">        <span class="comment">// 登出</span></span><br><span class="line">        subject.logout();</span><br><span class="line">        System.out.println(subject.isAuthenticated());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义Realm"><a href="#自定义Realm" class="headerlink" title="自定义Realm"></a>自定义Realm</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"MyRealm"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取传入的用户名</span></span><br><span class="line">        String name = (String) token.getPrincipal();</span><br><span class="line">        <span class="comment">// 模拟数据库，真的用户名</span></span><br><span class="line">        String trueName = <span class="string">"zhangsan"</span>;</span><br><span class="line">        <span class="keyword">if</span> (!trueName.equals(name))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 数据库中的密码</span></span><br><span class="line">        String passWord = <span class="string">"666"</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// info对象表示realm登录比对信息</span></span><br><span class="line">        SimpleAuthenticationInfo info = <span class="keyword">new</span> SimpleAuthenticationInfo(name,passWord,getName());</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：<img src="/dlh1234okok.github.io/2018/11/03/Shiro框架/1.jpg" alt=""></p><h2 id="认证解析"><a href="#认证解析" class="headerlink" title="认证解析"></a>认证解析</h2><p>​    在登录login方法处打上一个断点，进入方法-&gt;</p><p>​    <u>Subject subject = securityManager.login(this, token);</u></p><p>​    发现调用了SecurityManager的login方法，并将subject和token传入，再进入这个方法-&gt;</p><p><img src="/dlh1234okok.github.io/2018/11/03/Shiro框架/2.jpg" alt=""></p><p>​    进行认证操作-&gt;</p><p><img src="/dlh1234okok.github.io/2018/11/03/Shiro框架/3.jpg" alt=""></p><p>​    securityManger将认证操作托管给了一个认证器-&gt;</p><p><img src="/dlh1234okok.github.io/2018/11/03/Shiro框架/4.jpg" alt=""></p><p>​    在这里才真正开始认证-&gt;</p><p><img src="/dlh1234okok.github.io/2018/11/03/Shiro框架/5.jpg" alt=""></p><p><img src="/dlh1234okok.github.io/2018/11/03/Shiro框架/6.jpg" alt=""></p><p>​    从字面上的看出在这里它要获取AuthenticationInfo对象-&gt;</p><p><img src="/dlh1234okok.github.io/2018/11/03/Shiro框架/7.jpg" alt=""></p><p>​    不出意外跳到了我们的自定义realm中，将AuthenticationInfo返回-&gt;&gt;&gt;</p><p>​    基本上这一次认证就完成了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;​    Apache Shiro是一个强大易用的&lt;strong&gt;Java安全框架&lt;/strong&gt;，提供了认证、授权、加密和会话管理功能，
      
    
    </summary>
    
      <category term="Shiro" scheme="http://www.dlhblog.online/categories/Shiro/"/>
    
    
  </entry>
  
  <entry>
    <title>Lucene了解和简单使用</title>
    <link href="http://www.dlhblog.online/2018/11/02/Lucene%E4%BA%86%E8%A7%A3%E5%92%8C%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.dlhblog.online/2018/11/02/Lucene了解和简单使用/</id>
    <published>2018-11-02T09:03:41.000Z</published>
    <updated>2018-11-03T00:58:53.721Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Lucene是什么"><a href="#Lucene是什么" class="headerlink" title="Lucene是什么"></a>Lucene是什么</h1><p>​    Lucene 是一个开放源代码的全文检索引擎工具包，但它不是一个完整的全文检索引擎，而是一个全文检索引擎的架构，提供了完整的查询引擎和索引引擎，部分文本分析引擎。 说到底它是一个信息检索程序库，而不是应用产品。 因此它并不像百度或者 google 那样，拿来就能用，它只是提供了一种工具让你能实现这些产品。</p><h1 id="Lucene-能做什么"><a href="#Lucene-能做什么" class="headerlink" title="Lucene 能做什么"></a>Lucene 能做什么</h1><p>​    要回答这个问题，先要了解 lucene 的本质。实际上 lucene 的功能很单一，说到底，就是我们给它若干个字符串，然后它为我们提供一个全文搜索服务， 最后告诉我们要搜索的关键词出现在哪里。知道了这个本质， 我们就可以发挥想象做任何符合这个条件的事情了。 比如我们可以把站内新闻都索引了，做个资料库；也可以把一个数据库表的若干个字段索引起来，那就不用再担心因为“%like%”而锁表了……</p><h1 id="深入Lucene"><a href="#深入Lucene" class="headerlink" title="深入Lucene"></a>深入Lucene</h1><h2 id="为什么-lucene-这么快"><a href="#为什么-lucene-这么快" class="headerlink" title="为什么 lucene 这么快"></a>为什么 lucene 这么快</h2><ul><li>倒排索引</li><li>压缩算法</li><li>二元搜索 </li></ul><h2 id="倒排序索引"><a href="#倒排序索引" class="headerlink" title="倒排序索引"></a>倒排序索引</h2><p>​    它是根据属性的值来查找记录。这种索引表中的每一项都包括一个属性值和具有该属性值的各记录的地址。由于不是由记录来确定属性值，而是由属性值来确定记录的位置，因而称为倒排索引(invertedindex)。 </p><p><img src="/dlh1234okok.github.io/2018/11/02/Lucene了解和简单使用/1.jpg" alt=""></p><h2 id="工作方式"><a href="#工作方式" class="headerlink" title="工作方式"></a>工作方式</h2><p>​    Lucene 提供的服务实际包含两部分：一入一出。所谓入是写入，即将你提供的源（本质是字符串）写入索引或者将其从索引中删除；所谓出是读出，即向用户提供全文搜索服务，让用户可以通过关键词定位源 </p><h2 id="写入流程"><a href="#写入流程" class="headerlink" title="写入流程"></a>写入流程</h2><ol><li>源字符串首先经过 analyzer 处理，包括：分词，分成一个个单词；去除 stopword（可选）。</li><li>将源中需要的信息加入 Document 的各个 Field（信息域） 中，并把需要索引的 Field 索引起来，把需要存储的 Field 存储起来。</li><li>将索引写入磁盘。 </li></ol><h2 id="读出流程"><a href="#读出流程" class="headerlink" title="读出流程"></a>读出流程</h2><ol><li>用户提供搜索关键词，经过 analyzer 处理。</li><li>对处理后的关键词搜索它的索引， 找出对应的 Document。</li><li>用户根据需要从找到的 Document 中提取需要的 Field。 </li></ol><h2 id="Docement"><a href="#Docement" class="headerlink" title="Docement"></a>Docement</h2><p>​    用户提供的源是一条条记录，它们可以是文本文件、字符串或者数据库表的一条记录等等。一条记录经过索引之后，就是以一个Document 的形式存储在索引文件中的。用户进行搜索，也是以Document 列表的形式返回。 </p><h2 id="Field"><a href="#Field" class="headerlink" title="Field"></a>Field</h2><p>​    一个 Document 可以包含多个信息域，例如一篇文章可以包含“标题”、“正文”、“最后修改时间”等信息域，这些信息域就是通过 Field在 Document 中存储的。Field 有两个属性可选：存储和索引。通过存储属性你可以控制是否对这个 Field 进行存储；通过索引属性你可以控制是否对该Field 进行索引。这看起来似乎有些废话，事实上对这两个属性的正确组合很重要。</p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>文本倒排处理 :</p><p><img src="/dlh1234okok.github.io/2018/11/02/Lucene了解和简单使用/2.jpg" alt=""></p><p>Lucene 整体使用如图所示： </p><p><img src="/dlh1234okok.github.io/2018/11/02/Lucene了解和简单使用/3.jpg" alt=""></p><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><p>配置Lucene依赖或者项目导入jar包</p><h2 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// 配置indexWriter</span></span><br><span class="line">IndexWriterConfig config = <span class="keyword">new</span> IndexWriterConfig(Version.LUCENE_4_9, analyzer);</span><br><span class="line"><span class="comment">// 指定索引写入时为CREATE_OR_APPEND模式</span></span><br><span class="line">config.setOpenMode(IndexWriterConfig.OpenMode.CREATE_OR_APPEND);</span><br><span class="line"><span class="comment">// 通过索引目录和配置信息，生成writer</span></span><br><span class="line">IndexWriter writer = <span class="keyword">new</span> IndexWriter(directory, config);</span><br><span class="line"><span class="comment">// 遍历读取文件目录dataDir里的所有文件</span></span><br><span class="line">Collection&lt;File&gt; files = FileUtils.listFiles(<span class="keyword">new</span> File(dataDir), TrueFileFilter.INSTANCE,</span><br><span class="line">TrueFileFilter.INSTANCE);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line"><span class="comment">// 将一个文件的文件名和文件内容分别生成两个field信息域</span></span><br><span class="line">Field fileNameField = <span class="keyword">new</span> StringField(<span class="string">"fileName"</span>, file.getName(), Field.Store.YES);</span><br><span class="line">String context = FileUtils.readFileToString(file);</span><br><span class="line">Field contentField = <span class="keyword">new</span> TextField(<span class="string">"content"</span>, context, Field.Store.YES);</span><br><span class="line"><span class="comment">// 创建document，并添加两个信息域</span></span><br><span class="line">Document document = <span class="keyword">new</span> Document();</span><br><span class="line">document.add(fileNameField);</span><br><span class="line">document.add(contentField);</span><br><span class="line"><span class="comment">// 通过document通过writer写入到索引目录下</span></span><br><span class="line">writer.addDocument(document);</span><br><span class="line">&#125;</span><br><span class="line">writer.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查询索引"><a href="#查询索引" class="headerlink" title="查询索引"></a>查询索引</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">search</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ParseException </span>&#123;</span><br><span class="line"><span class="comment">// 创建基础分词器</span></span><br><span class="line">Analyzer analyzer = <span class="keyword">new</span> StandardAnalyzer(Version.LUCENE_4_9);</span><br><span class="line">IndexReader indexReader = DirectoryReader.open(directory);</span><br><span class="line"><span class="comment">// 通过indexReader创建一个索引搜索器</span></span><br><span class="line">IndexSearcher searcher = <span class="keyword">new</span> IndexSearcher(indexReader);</span><br><span class="line"><span class="comment">// 创建一个分析器并指定需要搜索的信息域和分词器</span></span><br><span class="line">QueryParser queryParser = <span class="keyword">new</span> QueryParser(Version.LUCENE_4_9, <span class="string">"content"</span>, analyzer);</span><br><span class="line"><span class="comment">// 生成一个query</span></span><br><span class="line">Query query = queryParser.parse(<span class="string">"java"</span>);</span><br><span class="line"><span class="comment">// 开始搜索，指定返回结果数量</span></span><br><span class="line">TopDocs topDocs = searcher.search(query, <span class="number">10</span>);</span><br><span class="line">ScoreDoc[] scoreDocs = topDocs.scoreDocs;</span><br><span class="line">System.out.println(<span class="string">"命中数："</span> + topDocs.totalHits);</span><br><span class="line"><span class="keyword">for</span> (ScoreDoc scoreDoc : scoreDocs) &#123;</span><br><span class="line"><span class="comment">// 取得document的id</span></span><br><span class="line"><span class="keyword">int</span> idDoc = scoreDoc.doc;</span><br><span class="line"><span class="comment">// 通过id获取document</span></span><br><span class="line">Document document = searcher.doc(idDoc);</span><br><span class="line">System.out.println(<span class="string">"分数："</span> + scoreDoc.score);</span><br><span class="line">System.out.println(<span class="string">"文件名："</span> + document.get(<span class="string">"fileName"</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h1><h2 id="分词器"><a href="#分词器" class="headerlink" title="分词器"></a>分词器</h2><p>​    Lucene 自带的 StandardAnalyzer 分词器，只能对英语进行分词。在对中文进行分词的时候采用了一元分词，即每一个中文作为一个词，如“我是中国人”，则分词结果为“我”，“是”，“中”，“国”，“人”，可以看出分词效果很差。在这里推荐一个比较好用的中文分词器IKAnalyzer。 </p><h2 id="停用词"><a href="#停用词" class="headerlink" title="停用词"></a>停用词</h2><p>​    停用词是指在信息检索中，为节省存储空间和提高搜索效率，在处理自然语言数据（或文本）之前或之后会自动过滤掉某些字或词，这些字或词即被称为 Stop Words（停用词）。 比如中文中“了”，“么”，“呢”，“的”等意义不大且在一篇文章中出现频率又很高的词，又比如英文的”for”,”in”,”it”,”a”,”or”等词。在使用 IKAnalyzer 分词器的时候，可以在 IKAnalyzer.cfg.xml里配置相关信息，如下图： </p><p><img src="/dlh1234okok.github.io/2018/11/02/Lucene了解和简单使用/4.jpg" alt=""></p><h2 id="高亮-Highlighter"><a href="#高亮-Highlighter" class="headerlink" title="高亮-Highlighter"></a>高亮-Highlighter</h2><p><img src="/dlh1234okok.github.io/2018/11/02/Lucene了解和简单使用/5.jpg" alt=""></p><h1 id="Field属性详解"><a href="#Field属性详解" class="headerlink" title="Field属性详解"></a>Field属性详解</h1><p>​    Field 是文档中的域，包括 Field 名和 Field 值两部分，一个文档可以包括多个 Field， Document 只是 Field 的一个承载体， Field值即为要索引的内容，也是要搜索的内容。 </p><ul><li><p>是否分词(tokenized)</p><p>​    是：作分词处理，即将 Field 值进行分词，分词的目的是为了索引。比如：商品名称、商品简介等，这些内容用户要输入关键字搜索，由于搜索的内容格式大、内容多需要分词后将语汇单元索引。</p><p>​    否：不作分词处理，比如：商品 id、订单号、身份证号等</p></li><li><p>是否索引(indexed)</p><p>​    是：进行索引。将 Field 分词后的词或整个 Field 值进行索引，索引的目的是为了搜索。比如：商品名称、商品简介分词后进行索引，订单号、身份证号不用分词但也要索引，这些将来都要作为查询条件。</p><p>​    否：不索引。该域的内容无法搜索到，比如：商品 id、文件路径、图片路径等，不用作为查询条件的不用索引。</p></li><li><p>是否存储(stored)</p><p>​    是：将 Field 值存储在文档中，存储在文档中的 Field 才可以从Document 中获取。比如：商品名称、订单号，凡是将来要从 Document 中获取的 Field都要存储。</p><p>​    否：不存储 Field 值，不存储的 Field 无法通过 Document 获取，比如：商品简介，内容较大不用存储。如果要向用户展示商品简介可以从系统的关系数据库中获取商品简介。</p></li></ul><p>如果需要商品描述，则根据搜索出的商品 ID 去数据库中查询，然后显示出商品描述信息即可。 </p><h2 id="Field-常用类型"><a href="#Field-常用类型" class="headerlink" title="Field 常用类型"></a>Field 常用类型</h2><p>常用 的 Filed 类型，注意 Field 的属性，根据需求选择： </p><p><img src="/dlh1234okok.github.io/2018/11/02/Lucene了解和简单使用/6.jpg" alt=""></p><h2 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h2><ul><li><p>图书 id：</p><p>是否分词：不用分词，因为不会根据商品 id 来搜索商品</p><p>是否索引：不索引，因为不需要根据图书 ID 进行搜索</p><p>是否存储：要存储，因为查询结果页面需要使用 id 这个值</p></li><li><p>图书名称：</p><p>是否分词：要分词，因为要将图书的名称内容分词索引，根据关键搜索图书名称抽取的词。</p><p>是否索引：要索引。</p><p>是否存储：要存储</p></li><li><p>图书价格：</p><p>是否分词：要分词， lucene 对数字型的值只要有搜索需求的都要分词和索引，因为 lucene 对数字型的内容要特殊分词处理，本例子可能要根据价格范 围搜索，需要分词和索引。</p><p>是否索引：要索引</p><p>是否存储：要存储</p></li><li><p>图书图片地址：</p><p>是否分词：不分词</p><p>是否索引：不索引</p><p>是否存储：要存储</p></li><li><p>图书描述：</p><p>是否分词：要分词</p><p>是否索引：要索引</p><p>是否存储：因为图书描述内容量大，不在查询结果页面直接显示，不存储。 不存储是来不在 lucene 的索引文件中记录，节省 lucene的索引文件空间， 如果要在详情页面显示描述，思路： 从 lucene中取出图书的 id，根据图书的 id 查询关系数据库中 book 表得到描述信息。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Lucene是什么&quot;&gt;&lt;a href=&quot;#Lucene是什么&quot; class=&quot;headerlink&quot; title=&quot;Lucene是什么&quot;&gt;&lt;/a&gt;Lucene是什么&lt;/h1&gt;&lt;p&gt;​    Lucene 是一个开放源代码的全文检索引擎工具包，但它不是一个完整的全文
      
    
    </summary>
    
      <category term="大数据" scheme="http://www.dlhblog.online/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>Hadoop-HDFS</title>
    <link href="http://www.dlhblog.online/2018/11/01/Hadoop-HDFS/"/>
    <id>http://www.dlhblog.online/2018/11/01/Hadoop-HDFS/</id>
    <published>2018-11-01T12:42:05.000Z</published>
    <updated>2018-11-02T09:06:32.732Z</updated>
    
    <content type="html"><![CDATA[<p>Hadoop 是分布式的系统架构，是 Apache 基金会顶级金牌项目 </p><h1 id="Hadoop组成"><a href="#Hadoop组成" class="headerlink" title="Hadoop组成"></a>Hadoop组成</h1><p><em>分布式存储系统 HDFS （ Hadoop Distributed File System ）</em></p><ul><li>分布式存储系统</li><li>提供了 高可靠性、高扩展性和高吞吐率的数据存储服务 </li></ul><p><em>分布式计算框架 MapReduce</em></p><ul><li>分布式计算框架（计算向数据移动）</li><li>具有 易于编程、高容错性和高扩展性等优点。 </li></ul><p><em>分布式资源管理框架 YARN（ Yet Another ResourceManagement）</em> </p><ul><li>负责集群资源的管理和调度 </li></ul><h1 id="分布式文件存储系统HDFS"><a href="#分布式文件存储系统HDFS" class="headerlink" title="分布式文件存储系统HDFS"></a>分布式文件存储系统HDFS</h1><p>​    分布式存储系统HDFS，主要解决大数据的存储问题。</p><h2 id="HDFS架构图"><a href="#HDFS架构图" class="headerlink" title="HDFS架构图"></a>HDFS架构图</h2><p><img src="/dlh1234okok.github.io/2018/11/01/Hadoop-HDFS/1.jpg" alt=""></p><h2 id="HDFS-数据存储单元（block）"><a href="#HDFS-数据存储单元（block）" class="headerlink" title="HDFS 数据存储单元（block）"></a>HDFS 数据存储单元（block）</h2><p><em>文件被切分成固定大小的数据块 block</em></p><ul><li>默认数据块大小为 128MB (hadoop2.x)，可自定义配置</li><li>若文件大小不到 128MB ，则单独存成一个 block</li></ul><p><em>一个文件存储方式</em></p><ul><li>按大小被切分成若干个 block ，存储到不同节点上</li><li>默认情况下每个 block 都有 3 个副本</li></ul><p>Block 大小和副本数通过 Client 端上传文件时设置，文件上传成功后副本数可以变更， Block Size 不可变更</p><p> <img src="/dlh1234okok.github.io/2018/11/01/Hadoop-HDFS/2.jpg" alt=""></p><p><strong>hdfs 存储模型：字节</strong></p><ul><li>文件线性切割成块（Block） :<strong>偏移量 offset</strong> （byte）</li><li>Block 分散存储在集群节点中</li><li>单一文件 Block 大小一致，文件与文件可以不一致</li><li>Block 可以设置副本数，副本分散在不同节点中，副本数不要超过节点数量</li><li>文件上传可以设置 Block 大小和副本数</li><li>已上传的文件 Block 副本数可以调整，大小不变</li><li>只支持一次写入多次读取，同一时刻只有一个写入者</li><li>可以 append 追加数据 </li></ul><h2 id="NameNode-（简称NN）"><a href="#NameNode-（简称NN）" class="headerlink" title="NameNode （简称NN）"></a>NameNode （简称NN）</h2><h3 id="NameNode-主要功能"><a href="#NameNode-主要功能" class="headerlink" title="NameNode 主要功能"></a>NameNode 主要功能</h3><ul><li>接受客户端的读/写服务</li><li>收集 DataNode 汇报的 Block 列表信息 </li></ul><h3 id="基于内存存储-：-不会和磁盘发生交换"><a href="#基于内存存储-：-不会和磁盘发生交换" class="headerlink" title="基于内存存储 ： 不会和磁盘发生交换"></a>基于内存存储 ： 不会和磁盘发生交换</h3><ul><li><strong>只存在内存中</strong></li><li><strong>持久化</strong> </li></ul><h3 id="NameNode-保存-metadata-信息"><a href="#NameNode-保存-metadata-信息" class="headerlink" title="NameNode 保存 metadata 信息"></a>NameNode 保存 metadata 信息</h3><ul><li>文件 owership(归属)和 permissions(权限)</li><li>文件大小，时间</li><li>（Block 列表： Block 偏移量），位置信息</li><li>Block 保存在哪个 DataNode 信息（由 DataNode 启动时上报,不保存在磁盘） </li></ul><h3 id="NameNode-持久化"><a href="#NameNode-持久化" class="headerlink" title="NameNode 持久化"></a>NameNode 持久化</h3><ul><li><strong>NameNode</strong> 的 metadate 信息在启动后会加载到内存</li><li><strong>metadata</strong> 存储到磁盘文件名为”<strong>fsimage</strong>”</li><li><strong>Block</strong> 的位置信息不会保存到 <strong>fsimage</strong></li><li><strong>edits</strong> 记录对 <strong>metadata</strong> 的操作日志 </li></ul><p><strong>fsimage</strong> 保存了最新的元数据检查点,类似快照。</p><ul><li><p><strong>editslog</strong> 保存自最新检查点后的元信息变化， 从最新检查点后， hadoop 将对每个文件的操作都保存在edits 中。 客户端修改文件时候，先写到 editlog，成功后才更新内存中的metadata 信息。</p><p><strong>Metadata = fsimage + editslog</strong> </p></li></ul><h2 id="DataNode（DN）"><a href="#DataNode（DN）" class="headerlink" title="DataNode（DN）"></a>DataNode（DN）</h2><ul><li>本地磁盘目录存储数据（Block），文件形式</li><li>同时存储 Block 的元数据信息文件</li><li>启动 DN 进程的时候会向 NameNode 汇报 block 信息</li><li>通过向 NN 发送心跳保持与其联系（3 秒一次），如果 NN 10分钟没有收到 DN 的心跳，则认为其已经lost，并 copy 其上的 block 到其它 DN </li></ul><h2 id="SecondaryNameNode（SNN）"><a href="#SecondaryNameNode（SNN）" class="headerlink" title="SecondaryNameNode（SNN）"></a>SecondaryNameNode（SNN）</h2><p>​    <u>它的主要工作是帮助 NN 合并 edits log 文件，减少 NN 启动时间,它不是 NN 的备份（但可以做备份)。</u></p><p>SNN 执行合并时间和机制</p><ol><li>根据配置文件设置的时间间隔 fs.checkpoint.period 默认 3600 秒。</li><li>根据配置文件设置 edits log 大小 fs.checkpoint.size规定 edits 文件的最大值默认是 64MB </li></ol><h2 id="SecondaryNameNode-SNN-合并流程"><a href="#SecondaryNameNode-SNN-合并流程" class="headerlink" title="SecondaryNameNode SNN 合并流程"></a>SecondaryNameNode SNN 合并流程</h2><p><img src="/dlh1234okok.github.io/2018/11/01/Hadoop-HDFS/3.jpg" alt=""></p><p>​    首先是 NN 中的 Fsimage 和 edits 文件通过网络拷贝，到达SNN 服务器中，拷贝的同时，用户的实时在操作数据，那么 NN中就会从新生成一个 edits 来记录用户的操作，而另一边的 SＮＮ将拷贝过来的 edits 和 fsimage 进行合并，合并之后就替换NN 中的 fsimage。之后 NN 根据 fsimage 进行操作（当然每隔一段时间就进行替换合并，循环）。当然新的 edits 与合并之后传输过来的 fsimage 会在下一次时间内又进行合并。 </p><h2 id="Block-的副本放置策略"><a href="#Block-的副本放置策略" class="headerlink" title="Block 的副本放置策略"></a>Block 的副本放置策略</h2><ul><li>第一个副本：放置在上传文件的 DN；如果是集群外提交，则随机挑选一台磁盘不太满， CPU 不太忙的节点。</li><li>第二个副本：放置在于第一个副本不同的机架的节点上。</li><li>第三个副本：与第二个副本相同机架的不同节点。</li><li>更多副本：随机节点 </li></ul><h2 id="HDFS-读写流程"><a href="#HDFS-读写流程" class="headerlink" title="HDFS 读写流程"></a>HDFS 读写流程</h2><p><img src="/dlh1234okok.github.io/2018/11/01/Hadoop-HDFS/4.jpg" alt=""></p><h3 id="HDFS-写流程"><a href="#HDFS-写流程" class="headerlink" title="HDFS 写流程"></a>HDFS 写流程</h3><p>Client：</p><ol><li><p>切分文件 Block</p></li><li><p>按 Block 线性和 NN 获取 DN 列表（副本数）</p></li><li><p>验证 DN 列表后以更小的单位(packet)流式传输数据</p><p>​    各节点，两两通信确定可用</p></li><li><p>Block 传输结束后：</p><p>​    DN 向 NN 汇报 Block 信息</p><p>​    DN 向 Client 汇报完成</p><p>​    Client 向 NN 汇报完成</p></li><li><p>获取下一个 Block 存放的 DN 列表</p></li><li><p>……………..</p></li><li><p>最终 Client 汇报完成</p></li><li><p>NN 会在写流程更新文件状态 </p></li></ol><h3 id="读文件过程"><a href="#读文件过程" class="headerlink" title="读文件过程"></a>读文件过程</h3><p><img src="/dlh1234okok.github.io/2018/11/01/Hadoop-HDFS/5.jpg" alt=""></p><p>Client：</p><ol><li>和 NN 获取一部分 Block 副本位置列表</li><li>线性和 DN 获取 Block，最终合并为一个文件</li><li>在 Block 副本列表中按距离择优选取 </li></ol><h2 id="HDFS-的优缺点"><a href="#HDFS-的优缺点" class="headerlink" title="HDFS 的优缺点"></a>HDFS 的优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li><p>高容错性</p><p>数据自动保存多个副本</p><p>副本丢失后，自动恢复</p></li><li><p>适合批处理</p><p>移动计算而非数据</p><p>数据位置暴露给计算框架（Block 偏移量）</p></li><li><p>适合大数据处理</p><p>GB 、 TB 、甚至 PB 级数据</p><p>百万规模以上的文件数量</p><p>10K+ 节点</p></li><li><p>可构建在廉价机器上</p><p>通过多副本提高可靠性</p><p>提供了容错和恢复机制 </p></li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>低延迟高数据吞吐访问问题<br>比如支持秒级别反应，不支持毫秒级<br>延迟与高吞吐率问题（吞吐量大但有限制于其延迟）</li><li>小文件存取<br>占用 NameNode 大量内存<br>寻道时间超过读取时间</li><li>并发写入、文件随机修改<br>一个文件只能有一个写者<br>仅支持 append </li></ul><h1 id="Hadoop伪分布式搭建"><a href="#Hadoop伪分布式搭建" class="headerlink" title="Hadoop伪分布式搭建"></a>Hadoop伪分布式搭建</h1><ol><li><p>jdk 安装，配置环境变量</p><p>vi /etc/profile</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/opt/dlh/jdk1.7.0_75</span><br><span class="line">PATH=$PATH:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure></li><li><p>ssh 免密钥（本机）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t dsa -P &apos;&apos; -f ~/.ssh/id_dsa</span><br><span class="line">cat ~/.ssh/id_dsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure></li><li><p>上传 hadoop.tar.gz 到服务器</p><p>解压部署包 到/opt/dlh 目录下</p><p>vi /etc/profile</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export HADOOP_PREFIX=/opt/dlh/hadoop-2.6.5</span><br><span class="line">PATH=$PATH:$JAVA_HOME/bin:$HADOOP_PREFIX/bin:$HADOOP_PREFIX/sbin</span><br></pre></td></tr></table></figure></li><li><p>/opt/dlh/hadoop-2.6.5/etc/hadoop 目录</p><p>hadoop-env.sh</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME=/opt/dlh/jdk1.7.0_75</span><br></pre></td></tr></table></figure><p>core-site.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line">&lt;value&gt;hdfs://192.168.32.222:9000&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">&lt;value&gt;/var/dlh/hadoop/local&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><p>hdfs-site.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">&lt;value&gt;1&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;dfs.namenode.secondary.http-address&lt;/name&gt;</span><br><span class="line">&lt;value&gt;192.168.32.222:50090&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><p>vi slaves（datanode 节点）<br>192.168.32.222</p></li><li><p>格式化 hdfs namenode -format</p></li><li><p>启动 start-dfs.sh</p></li><li><p>查看服务进程启动了么？ jps<br>SecondaryNameNode<br>NameNode<br>DataNode<br>Jps</p></li><li><p>访问 192.168.32.222:50070<br>确保防火墙关闭（service iptables stop）</p></li><li><p>hdfs dfs -mkdir /user</p></li><li><p>hdfs dfs -ls /user</p></li><li><p>hdfs dfs 命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -put fileName[本地文件名] PATH【hdfs 的文件路径】</span><br><span class="line">hdfs dfs -du [-s][-h]URI[URI ...] 显示文件(夹)大小.</span><br><span class="line">hdfs dfs -mkdir[-p] &lt;paths&gt; 创建</span><br><span class="line">hdfs dfs -rm -r /myhadoop1.0 删除</span><br><span class="line">hdfs dfs -cp [-f][-p|-p[topax]]URI[URI...]&lt;dest&gt;复制文件(夹)，可以覆盖，可以保留原有权限信息</span><br></pre></td></tr></table></figure></li><li><p>产生 100000 条数据测试：<br>for i in <code>seq 100000</code>;do echo “hello hadoop$i” &gt;&gt; test.txt;done </p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Hadoop 是分布式的系统架构，是 Apache 基金会顶级金牌项目 &lt;/p&gt;
&lt;h1 id=&quot;Hadoop组成&quot;&gt;&lt;a href=&quot;#Hadoop组成&quot; class=&quot;headerlink&quot; title=&quot;Hadoop组成&quot;&gt;&lt;/a&gt;Hadoop组成&lt;/h1&gt;&lt;p&gt;&lt;e
      
    
    </summary>
    
      <category term="大数据" scheme="http://www.dlhblog.online/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>Nginx配置</title>
    <link href="http://www.dlhblog.online/2018/10/30/Nginx%E9%85%8D%E7%BD%AE/"/>
    <id>http://www.dlhblog.online/2018/10/30/Nginx配置/</id>
    <published>2018-10-30T11:34:31.000Z</published>
    <updated>2018-11-03T05:12:09.065Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是-Nginx？"><a href="#什么是-Nginx？" class="headerlink" title="什么是 Nginx？"></a>什么是 Nginx？</h1><ul><li>​    Nginx 是一款轻量级的 Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器。由俄罗斯的程序设计师Igor Sysoev 所开发，其特点是占有内存少， 并发能力强， nginx 的并发能力确实在同类型的网页服务器中表现非常好。</li><li>​    2004 年 10 月 4 日 第一个公开版本 0.1.0 发布。其将源代码以类 BSD 许可证的形式发布。</li><li>​    官方测试 nginx 能够支撑 5 万并发链接，并且 CPU、内存等资源消耗却非常低，运行非常稳定 。</li></ul><h1 id="Nginx-和-apache-的优缺点"><a href="#Nginx-和-apache-的优缺点" class="headerlink" title="Nginx 和 apache 的优缺点"></a>Nginx 和 apache 的优缺点</h1><ol><li><p>nginx 相对于 apache 的优点：</p><p>​    轻量级，同样起 web 服务，比 apache 占用更少的内存及资源高并发，nginx 处理请求是<strong>异步非阻塞</strong>（如前端 ajax） 的，而 apache 则是阻塞型的，在高并发下 nginx 能保持<strong>低资源低消耗高性能高度模块化的设计</strong>，编写模块相对简单还有，它社区活跃，各种高性能模块出品迅速（十几年时间发展）</p></li><li><p>apache 相对于 nginx 的优点：</p><p>​    Rewrite 重写 ，比 nginx 的 rewrite 强大模块超多，基本想到的都可以找到少 bug ， nginx 的 bug 相对较多。（出身好起步高）</p></li><li><p>Nginx 配置简洁, Apache 复杂</p></li></ol><h1 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h1><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><p>依赖 gcc openssl-devel pcre-devel zlib-devel<br>安装： yum -y install gcc openssl-devel pcre-devel zlib-devel</p><p><img src="http://pg0l2q23d.bkt.clouddn.com/nginx1.jpg" alt=""></p><h2 id="解压文件"><a href="#解压文件" class="headerlink" title="解压文件"></a>解压文件</h2><p>解压： tar -zxvf nginx-1.8.1.tar.gz</p><p><img src="http://pg0l2q23d.bkt.clouddn.com/nginx2.jpg" alt=""></p><h2 id="configure-配置"><a href="#configure-配置" class="headerlink" title="configure 配置"></a>configure 配置</h2><p>进入解压后的源码目录，然后执行 configure 命令进行配置<br>./configure –prefix=/usr/soft/nginx (设置编译后的文件目录)</p><p><img src="http://pg0l2q23d.bkt.clouddn.com/nginx3.jpg" alt=""></p><h2 id="编译并安装"><a href="#编译并安装" class="headerlink" title="编译并安装"></a>编译并安装</h2><p>make &amp;&amp; make install</p><p><img src="http://pg0l2q23d.bkt.clouddn.com/nginx4.jpg" alt=""></p><p>安装好后，会在/usr/soft 下生成 nginx 目录(这是我编译前指定的)，<br>这个目录就是 nginx 的软件了。</p><p><img src="http://pg0l2q23d.bkt.clouddn.com/nginx5.jpg" alt=""></p><h1 id="nginx-命令"><a href="#nginx-命令" class="headerlink" title="nginx 命令"></a>nginx 命令</h1><p>启动命令 ： nginx_home/sbin/nginx</p><p>启动后，访问虚拟机的 80 端口，可查看到以下界面</p><p><img src="http://pg0l2q23d.bkt.clouddn.com/nginx6.jpg" alt=""></p><p>Nginx 默认监听 80 端口，当出现以上信息，说明安装启动成功</p><p>一旦 nginx 启动，就可以通过调用带有-s 参数的可执行文件来控制它。<br>使用语法： nginx -s 信号</p><p>信号可以是下列之一：<br>​    stop - 快速关机<br>​    quit - 优雅的关机<br>​    reload - 重新加载配置文件<br>​    reopen - 重新打开日志文件<br>例如，要停止 nginx 进程并等待工作进程完成当前请求的服务，可以执<br>行以下命令： nginx -s quit</p><h1 id="Nginx-配置"><a href="#Nginx-配置" class="headerlink" title="Nginx 配置"></a>Nginx 配置</h1><h2 id="nginx-默认配置详解"><a href="#nginx-默认配置详解" class="headerlink" title="nginx 默认配置详解"></a>nginx 默认配置详解</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#进程数，建议设置和 CPU 个数一样或 2 倍</span><br><span class="line">worker_processes 2;</span><br><span class="line"></span><br><span class="line">#日志级别</span><br><span class="line">error_log logs/error.log warning;(默认 error 级别)</span><br><span class="line"></span><br><span class="line">nginx 启动后的 pid 存放位置</span><br><span class="line"></span><br><span class="line">#pid logs/nginx.pid;</span><br><span class="line">events &#123;</span><br><span class="line">#配置每个进程的连接数，总的连接数= worker_processes * worker_connections</span><br><span class="line">#根据物理内存大小来配置，默认 1024</span><br><span class="line">worker_connections 10240;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">include mime.types;</span><br><span class="line">default_type application/octet-stream;</span><br><span class="line">sendfile on;</span><br><span class="line">#连接超时时间，单位秒</span><br><span class="line">keepalive_timeout 65;</span><br><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line">server_name localhost</span><br><span class="line">#默认请求</span><br><span class="line">location / &#123;</span><br><span class="line">root html; #定义服务器的默认网站根目录位置</span><br><span class="line">index index.php index.html index.htm; #定义首页索引文件的名称</span><br><span class="line">&#125;</span><br><span class="line">#定义错误提示页面</span><br><span class="line">error_page 500 502 503 504 /50x.html;</span><br><span class="line">location = /50x.html &#123;</span><br><span class="line">root html;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="负载均衡配置："><a href="#负载均衡配置：" class="headerlink" title="负载均衡配置："></a>负载均衡配置：</h2><p>nginx 支持以下负载均衡机制（或方法）：</p><ul><li>循环 - 对应用程序服务器的请求以循环方式分发，</li><li>最少连接数 - 将下一个请求分配给活动连接数最少的服务器</li><li>ip-hash - 哈希函数用于确定下一个请求（基于客户端的 IP地址）应该选择哪个服务器。</li></ul><h2 id="默认负载平衡配置"><a href="#默认负载平衡配置" class="headerlink" title="默认负载平衡配置"></a>默认负载平衡配置</h2><p>使用 nginx 进行负载平衡的最简单配置可能如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">upstream frame&#123;</span><br><span class="line">server srv1.example.com;</span><br><span class="line">server srv2.example.com;</span><br><span class="line">server srv3.example.com;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line">server_name localhost;</span><br><span class="line">location / &#123;</span><br><span class="line">proxy_pass http://frame;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​      在上面的示例中，在 srv1-srv3 上运行相同应用程序的 3 个实例。如果没有专门配置负载均衡方法，则默认为循环法。所有请求都被 代理到服务器组 ss，并且 nginx 应用 HTTP 负载平衡来分发请求。</p><h2 id="加权负载平衡"><a href="#加权负载平衡" class="headerlink" title="加权负载平衡"></a>加权负载平衡</h2><p>   通过使用服务器权重，还可以进一步影响nginx负载均衡算法，谁的权重越大，分发到<br>的请求就越多。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream frame &#123;</span><br><span class="line">  server srv1.example.com weight=3;</span><br><span class="line">  server srv2.example.com;</span><br><span class="line">  server srv3.example.com;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="最少连接负载平衡"><a href="#最少连接负载平衡" class="headerlink" title="最少连接负载平衡"></a>最少连接负载平衡</h2><p>在连接负载最少的情况下， nginx 会尽量避免将过多的请求分发给繁忙的应用程序服务器，而是将新请求分发给不太繁忙的服务器，避免服务器过载。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">upstream frame &#123;</span><br><span class="line">  least_conn;</span><br><span class="line">  server srv1.example.com;</span><br><span class="line">  server srv2.example.com;</span><br><span class="line">  server srv3.example.com;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="会话持久性"><a href="#会话持久性" class="headerlink" title="会话持久性"></a>会话持久性</h2><p>上述的循环或最少连接数的负载平衡方法，每个后续客户端的请求都可能被分发到不同的服务器。不能保证相同的客户端总是定向到相同的服务器。如果需要将客户端绑定到特定的应用程序服务器 - 换句话说，就是始终选择相同的服务器而言， 就要使客户端的会话“粘滞”或“持久” 。</p><p><strong>ip-hash</strong> 负载平衡机制就是有这种特性。 使用 ip-hash，客户端的 IP 地址将用作散列键，以确定应该为客户端的请求选择服务器组中的哪台服务器。 此方法可确保来自同一客户端的请求将始终定向到同一台服务器，除非此服务器不可用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">upstream frame&#123;</span><br><span class="line">  ip_hash;</span><br><span class="line">  server srv1.example.com;</span><br><span class="line">  server srv2.example.com;</span><br><span class="line">  server srv3.example.com;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Nginx访问控制"><a href="#Nginx访问控制" class="headerlink" title="Nginx访问控制"></a>Nginx访问控制</h2><p>Nginx 还可以对 IP 的访问进行控制， allow 代表允许， deny 代表禁止<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">  deny 192.168.78.1;</span><br><span class="line">  allow 192.168.78.0/24;</span><br><span class="line">  allow 10.1.1.0/16;</span><br><span class="line">  allow 192.168.1.0/32;</span><br><span class="line">  deny all;</span><br><span class="line">  proxy_pass http://frame;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>从上到下的顺序，匹配到了便跳出。如上的例子先禁止了 192.168.78.1，接下来允许了 3 个网段，其中包含了一个 ipv6，最后未匹配的 IP 全部禁止访问</p><h1 id="虚拟主机"><a href="#虚拟主机" class="headerlink" title="虚拟主机"></a>虚拟主机</h1><h2 id="何为虚拟主机"><a href="#何为虚拟主机" class="headerlink" title="何为虚拟主机"></a>何为虚拟主机</h2><p>​    虚拟主机是指在网络服务器上分出一定的磁盘空间，用户可以租用此部分空间，以供用户放置站点及应用组件，提供必要的数据存放和传输功能。</p><p>​    说白了虚拟主机就是把一台物理服务器划分成多个“虚拟”的服务器，各个虚拟主机之间完全独立，在外界看来，每一台虚拟主机和一台单独的主机的表现完全相同。所以这种被虚拟化的逻辑主机被形象地称为“虚拟主机”。</p><p><strong>优点：</strong></p><p>​    由于多台虚拟主机共享一台真实主机的资源，每个虚拟主机用户承受的硬件费用、网络维护费用、通信线路的费用均大幅度降低。许多企业建立网站都采用这种方法，这样不仅大大节省了购买机器和租用专线的费用， 网站服务器服务器管理简单，诸如软件配置、防病毒、防攻击等安全措施都由专业服务商提供，大大简化了服务器管理的复杂性；同时也不必为使用和维护服务器的技术问题担心，更不必聘用专门的管理人员。</p><p><strong>类别：</strong></p><p>1、基于域名的虚拟主机，通过域名来区分虚拟主机</p><p>2、基于端口的虚拟主机，通过端口来区分虚拟主机</p><p>3、基于 ip 的虚拟主机， 很少用</p><h2 id="基于域名的虚拟主机"><a href="#基于域名的虚拟主机" class="headerlink" title="基于域名的虚拟主机"></a>基于域名的虚拟主机</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    upstream frame1&#123;</span><br><span class="line">      server srv1.example.com;</span><br><span class="line">      server srv2.example.com;</span><br><span class="line">    &#125;</span><br><span class="line">    upstream frame2&#123;</span><br><span class="line">      server srv3.example.com;</span><br><span class="line">      server srv4.example.com;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">      listen <span class="number">80</span>;</span><br><span class="line">      <span class="comment">//访问 xt1.com 的时候，会把请求导到 frame1 的服务器组里</span></span><br><span class="line">      server_name xt1.com;</span><br><span class="line">      location / &#123;</span><br><span class="line">        proxy_pass http:<span class="comment">//frame1;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">      listen <span class="number">80</span>;</span><br><span class="line">      <span class="comment">//访问 xt2.com 的时候，会把请求导到 frame2 的服务器组里</span></span><br><span class="line">      server_name xt2.com;</span><br><span class="line">      location / &#123;</span><br><span class="line">        proxy_pass http:<span class="comment">//frame2;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>基于域名的虚拟机主机 在模拟应用场景时，需要在 windows 系统的 hosts文件里配置域名映射。 （C:\Windows\System32\drivers\etc\hosts）</p><p><img src="/dlh1234okok.github.io/2018/10/30/Nginx配置/1.jpg" alt=""></p><h2 id="基于端口的虚拟主机"><a href="#基于端口的虚拟主机" class="headerlink" title="基于端口的虚拟主机"></a>基于端口的虚拟主机</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">  upstream frame1&#123;</span><br><span class="line">    server srv1.example.com;</span><br><span class="line">    server srv2.example.com;</span><br><span class="line">  &#125;</span><br><span class="line">  upstream frame2&#123;</span><br><span class="line">    server srv3.example.com;</span><br><span class="line">    server srv4.example.com;</span><br><span class="line">  &#125;</span><br><span class="line">  server &#123;</span><br><span class="line">    <span class="comment">//当访问 nginx 的 80 端口时，将请求导给 frame1 组</span></span><br><span class="line">    listen <span class="number">80</span>;</span><br><span class="line">    server_name localhost;</span><br><span class="line">    location / &#123;</span><br><span class="line">      proxy_pass http:<span class="comment">//frame1;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  server &#123;</span><br><span class="line">    <span class="comment">//当访问 nginx 的 81 端口时，将请求导给 frame2 组</span></span><br><span class="line">    listen <span class="number">81</span>;</span><br><span class="line">    server_name localhost;</span><br><span class="line">    location / &#123;</span><br><span class="line">      proxy_pass http:<span class="comment">//frame2;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="正向代理和反向代理"><a href="#正向代理和反向代理" class="headerlink" title="正向代理和反向代理"></a>正向代理和反向代理</h1><h2 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h2><p>​    举个栗子： 我是一个用户，我访问不了某网站，但是我能访问一个代理服务器，这个代理服务器呢,他能访问那个我不能访问的网站，于是我先连上代理服务器,告诉他我需要那个无法访问网站的内容，代理服务器去取回来,然后返回给我。 像我们经常通过 vpn 访问国外的网站，此时就是正向代理。</p><ul><li>客户端必须设置正向代理服务器，当然前提是要知道正向代理服务器的 IP 地址，还有代理程序的端口。</li></ul><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p>​    <strong>反向代理（Reverse Proxy）</strong> 方式是指以代理服务器来接受 internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给 internet 上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器</p><p>​    反向代理隐藏了真实的服务端，当我们请求 <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> 的时候，就像拨打 10086 一样，背后可能有成千上万台服务器为我们服务，但具体是哪一台，你不知道，也不需要知道，你只需要知道反向代理服务器是谁就好了， <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> 就是我们的反向代理服务器，反向代理服务器会帮我们把请求转发到真实的服务器那里去。 Nginx 就是性能非常好的反向代理服务器，用来做负载均衡。     </p><h1 id="Nginx-的-session-的一致性问题"><a href="#Nginx-的-session-的一致性问题" class="headerlink" title="Nginx 的 session 的一致性问题"></a>Nginx 的 session 的一致性问题</h1><p>​    http 协议是无状态的，即你连续访问某个网页 100 次和访问 1次对服务器来说是没有区别对待的，因为它记不住你。那么，在一些场合，确实需要服务器记住当前用户怎么办？比如用户登录邮箱后，接下来要收邮件、写邮件，总不能每次操作都让用户输入用户名和密码吧，为了解决这个问题， session 的方案就被提了出来，事实上它并不是什么新技术，而且也不能脱离 http 协议以及任何现有的 web 技术session 的常见实现形式是会话cookie（session cookie），即未设置过期时间的 cookie，这个 cookie 的默认生命周期为浏览器会话期间，只要关闭浏览器窗口， cookie 就消失了。</p><h2 id="Session-共享"><a href="#Session-共享" class="headerlink" title="Session 共享"></a>Session 共享</h2><p>​    首先我们应该明白，为什么要实现共享，如果你的网站是存放在一个机器上，那么是不存在这个问题的，因为会话数据就在这台机器，但是如果你使用了负载均衡把请求分发到不同的机器呢？这个时候会话 id 在客户端是没有问题的，但是如果用户的两次请求到了两台不同的机器，而它的 session 数据可能存在其中一台机器，这个时候就会出现取不到 session 数据的情况，于是 session 的共享就成了一个问题 。</p><h2 id="Session-一致性解决方案"><a href="#Session-一致性解决方案" class="headerlink" title="Session 一致性解决方案"></a>Session 一致性解决方案</h2><ol><li><p>session 复制</p><p>tomcat 本身带有复制 session 的功能。</p></li><li><p>共享 session</p><p>需要专门管理 session 的软件，</p></li><li><p>memcached 缓存服务，可以和 tomcat 整合，帮助 tomcat共享管理 session。</p></li></ol><h2 id="安装-memcached"><a href="#安装-memcached" class="headerlink" title="安装 memcached"></a>安装 memcached</h2><ol><li><p>安装 memcached 内存数据库<br> yum – y install memcached<br> 可以用 telnet localhost 11211</p></li><li><p>web 服务器连接 memcached 的 jar 包拷贝到 tomcat 的 lib</p></li><li><p>配置 tomcat 的 conf 目录下的 context.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Manager</span> <span class="attr">className</span>=<span class="string">"de.javakaffee.web.msm.MemcachedBackupSessionManager"</span></span></span><br><span class="line"><span class="tag"><span class="attr">memcachedNodes</span>=<span class="string">"n1:192.168.17.9:11211"</span></span></span><br><span class="line"><span class="tag"><span class="attr">sticky</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag"><span class="attr">lockingMode</span>=<span class="string">"auto"</span></span></span><br><span class="line"><span class="tag"><span class="attr">sessionBackupAsync</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag"><span class="attr">requestUriIgnorePattern</span>=<span class="string">".*\.(ico|png|gif|jpg|css|js)$"</span></span></span><br><span class="line"><span class="tag"><span class="attr">sessionBackupTimeout</span>=<span class="string">"1000"</span></span></span><br><span class="line"><span class="tag"><span class="attr">transcoderFactoryClass</span>=<span class="string">"de.javakaffee.web.msm.serializer.kr</span></span></span><br><span class="line"><span class="tag"><span class="string">yo.KryoTranscoderFactory"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>​    配置 memcachedNodes 属性，配置 memcached 数据库的 ip 和端口，默认 11211，多个的话用逗号隔开。<br>​    目的是让 tomcat 服务器从 memcached 缓存里面拿 session 或者是放 session</p></li><li><p>修改 index.jsp，取 sessionid 看一看</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">   SessionID:<span class="tag">&lt;<span class="name">%=session.getId()%</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">   SessionIP:<span class="tag">&lt;<span class="name">%=request.getServerName()%</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>tomcat1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是-Nginx？&quot;&gt;&lt;a href=&quot;#什么是-Nginx？&quot; class=&quot;headerlink&quot; title=&quot;什么是 Nginx？&quot;&gt;&lt;/a&gt;什么是 Nginx？&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;​    Nginx 是一款轻量级的 Web 服务器/反向代理服
      
    
    </summary>
    
      <category term="大数据" scheme="http://www.dlhblog.online/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux常用命令</title>
    <link href="http://www.dlhblog.online/2018/10/29/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://www.dlhblog.online/2018/10/29/Linux常用命令/</id>
    <published>2018-10-29T11:18:14.000Z</published>
    <updated>2018-10-30T08:56:00.347Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux目录结构"><a href="#Linux目录结构" class="headerlink" title="Linux目录结构"></a>Linux目录结构</h1><p><img src="http://pg0l2q23d.bkt.clouddn.com/l1.jpg" alt=""></p><ul><li>bin  存放二进制可执行文件(ls,cat,mkdir等)                                                           </li><li>boot  存放用于系统引导时使用的各种文件</li><li>dev 用于存放设备文件</li><li>etc  存放系统配置文件</li><li>home 存放所有用户文件的根目录</li><li>lib  存放跟文件系统中的程序运行所需要的共享库及内核模块</li><li>mnt  系统管理员安装临时文件系统的安装点</li><li>opt  额外安装的可选应用程序包所放置的位置</li><li>proc  虚拟文件系统，存放当前内存的映射</li><li>root  超级用户目录</li><li>sbin  存放二进制可执行文件，只有root才能访问</li><li>tmp  用于存放各种临时文件</li><li>usr  用于存放系统应用程序，比较重要的目录/usr/local 本地管理员软件安装目录</li><li>var  用于存放运行时需要改变数据的文件</li></ul><h1 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h1><p>切换目录：cd + 目录路径</p><p>查看当前目录完整路径： pwd</p><p>返回父目录：    cd ..</p><p>新建目录：    <strong>mkdir</strong>+目录名</p><hr><p>查看当前目录下拥有的子目录和文件： <strong>ls</strong></p><p>查看当前目录下拥有的子目录和文件的详情信息：ls -l 或 <strong>ll</strong></p><p>拷贝目录：    <strong>cp</strong>  source  dest -r（递归）</p><hr><p>删除目录：    <strong>rmdir</strong> directory（只能删除空目录）</p><p>删除非空目录或文件：    <strong>rm</strong>    -rf    dir</p><hr><p>移动文件或目录：<strong>mv</strong> + 目录/文件名字 + 其他路径</p><p>更改文件或目录的名字：<strong>mv</strong> + 旧目录名字 + 新目录名字</p><h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><p>创建一个空文件：    <strong>touch</strong>   文件名</p><p>复制文件：    <strong>cp</strong>     文件名    复制的文件名</p><p>复制目录：    复制文件，加个-r 参数，代表遍历复制</p><hr><p>删除文件：    <strong>rm</strong>   文件名（加 –f参数，直接删除，无需确认）</p><p>删除目录：    删除文件加上-r参数，遍历删除</p><hr><p>查看目录：ls/ll    ls -l == ll</p><p>查看目录下所有东西（包括隐藏文件）：    ls  -al  （ll -a）</p><hr><p>查看文件内容：<strong>cat</strong>  filename（一次显示文件所有内容），当文件较大时，可以使用<strong>more</strong>  或  <strong>less</strong></p><p>​    <strong>more</strong> filename 该命令一次显示一屏文本，满屏后停下来，并且在屏幕的底部出现一个提示信息，给出至今己显示的该文件的百分比。</p><ol><li>按Space键，显示文本的下一屏内容。</li><li>按Enier键，只显示文本的下一行内容。</li><li>按B键，显示上一屏内容。</li><li>按Q键，退出。</li></ol><p>​    <strong>less</strong>命令 与 more命令 非常类似        <strong>less</strong> filename:</p><ol><li>h 显示帮助界面 </li><li>Q 退出less 命令 </li><li>u 向后滚动半页 </li><li>d 向前翻半页 </li><li>空格键 滚动一页 </li><li>b 向后翻一页 </li><li>回车键 滚动一行</li><li>[pagedown]： 向下翻动一页 </li><li>[pageup]： 向上翻动一页</li><li>上下键，向上一行，向下一行</li></ol><hr><p>从头打印文件内容：    <strong>head</strong>  -10 filename     打印文件1到10行</p><p>从尾部打印文件内容：    <strong>tail</strong> -10 filename         打印文件最后10行</p><p><strong>注意</strong>：tail 还经常可以拿来查看文件的内容变化    加-f参数，<strong>tail</strong> –f filename</p><p>查找文件或目录：    <strong>find</strong>  pathname –name filename（可以按正则表达式来查找）</p><h1 id="文本编辑"><a href="#文本编辑" class="headerlink" title="文本编辑"></a>文本编辑</h1><p><strong>编辑模式</strong></p><ul><li>vi  filename :打开或新建文件，并将光标置于第一行首 </li><li>vi +n filename ：打开文件，并将光标置于第n行首 </li><li>vi + filename ：打开文件，并将光标置于最后一行首 </li><li>vi +/pattern filename：打开文件，并将光标置于第一个与 pattern匹配的串处 </li></ul><p><strong>命令行模式</strong></p><ul><li>w保存 </li><li>q退出 </li><li>q!：不保存文件并退出vi </li><li>在VI的命令模式下输入“:set nu”，就有行号了。 </li><li>在VI的命令模式下输入“:set nonu”，取消行号。 </li></ul><p><strong>一般模式</strong></p><ul><li>yy 复制光标所在行(常用) </li><li>nyy 复制光标所在行的向下n行，例如， 20yy则是复制20行(常用) </li><li>p,P   p为复制的数据粘贴在光标下一行， P则为粘贴在光标上一行(常用)</li><li>G:光标移至第最后一行</li><li>nG：光标移动至第N行行首</li><li>n+：光标下移n行 </li><li>n-：光标上移n行 </li><li>H ：光标移至屏幕顶行 </li><li>M ：光标移至屏幕中间行 </li><li>L ：光标移至屏幕最后行 </li><li>dd：删除 行 </li><li>x或X：删除一个字符，x删除光标后的，而X删除光标前的 </li><li>u 恢复前一个动作(常用)</li><li>删除第N行到第M行 :  N,Md</li></ul><h1 id="文件传输"><a href="#文件传输" class="headerlink" title="文件传输"></a>文件传输</h1><p><strong>将本地文件复制到远程机器</strong></p><p><strong>scp</strong> local_file    remote_username@remote_ip:remote_folder </p><p><strong>将本地目录复制到远程机器</strong></p><p><strong>scp</strong> -r local_folder remote_username@remote_ip:remote_folder</p><p>例：scp  -r  user  <a href="mailto:root@192.168.32.100" target="_blank" rel="noopener">root@192.168.32.100</a>:/opt/</p><h1 id="网络指令"><a href="#网络指令" class="headerlink" title="网络指令"></a>网络指令</h1><p>查看网络配置信息：<strong>ifconfig</strong></p><p>测试与目标主机的连通性：<strong>ping</strong> remote_ip</p><p><strong>显示各种网络相关信息</strong></p><p>命令：<strong>netstat</strong> </p><ul><li>-<strong>a</strong> (all)显示所有选项，默认不显示LISTEN相关</li><li>-<strong>t</strong> (tcp)仅显示tcp相关选项</li><li>-u (udp)仅显示udp相关选项</li><li>-<strong>n</strong> 拒绝显示别名，能显示数字的全部转化成数字。</li><li><p>-l 仅列出有在 Listen (监听) 的服務状态</p></li><li><p>-<strong>p</strong> 显示建立相关链接的程序名</p></li><li>-r 显示路由信息，路由表</li><li> -e 显示扩展信息，例如uid等</li><li>-s 按各个协议进行统计</li><li> -c 每隔一个固定时间，执行该netstat命令。</li></ul><h1 id="系统配置"><a href="#系统配置" class="headerlink" title="系统配置"></a>系统配置</h1><p><strong>修改主机名</strong></p><p>​    vim /etc/sysconfig/network    重启机器后才能生效</p><p>​    <img src="http://pg0l2q23d.bkt.clouddn.com/hosts.jpg" alt=""></p><p><strong>DNS配置</strong></p><p>​    hosts文件的作用相当于DNS，提供IP地址hostname的对应,可在这个文件里添加映射。域名解析</p><p>​    vi /etc/hosts<img src="http://pg0l2q23d.bkt.clouddn.com/hosts2.jpg" alt=""></p><p><strong>DNS服务器地址文件</strong>：/etc/resolv.conf</p><h1 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h1><p>Linux系统的环境变量是在<strong>/etc/profile</strong>文件里配置。</p><p>​    首先考虑一个问题，问什么我们先前敲的yum, service,date,useradd等等，可以直接使用，系统怎么知道这些命令对应的程序是放在哪里的呢？</p><p>​    这是由于无论是windows系统还是linux系统，都有一个叫做path的系统环境变量，当我们在敲命令时，系统会到path对应的目录下寻找，找到的话就会执行，找不到就会报没有这个命令。如下图：</p><p><img src="http://pg0l2q23d.bkt.clouddn.com/%E7%8E%AF%E5%A2%831.png" alt=""></p><p>我们可以查看一下，系统一共在哪些目录里寻找命令对应的程序。</p><p>命令：echo $path</p><p><img src="http://pg0l2q23d.bkt.clouddn.com/%E7%8E%AF%E5%A2%832.png" alt=""></p><p>​    </p><h1 id="服务操作"><a href="#服务操作" class="headerlink" title="服务操作"></a>服务操作</h1><p><strong>列出所有服务</strong>：chkconfig</p><p><img src="http://pg0l2q23d.bkt.clouddn.com/%E6%9C%8D%E5%8A%A11.png" alt=""></p><p>各数字代表的系统初始化级别含义：</p><p>​        0：停机状态</p><p>　　1：单用户模式，root账户进行操作</p><p>　　2：多用户，不能使用net file system，一般很少用</p><p>　　3：完全多用户，一部分启动，一部分不启动，命令行界面</p><p>　　4：未使用、未定义的保留模式</p><p>　　5：图形化，3级别中启动的进程都启动，并且会启动一部分图形界面进程。</p><p>　　6：停止所有进程，卸载文件系统，重新启动(reboot)</p><p>　　这些级别中1、2、4很少用，相对而言0、3、5、6用的会较多。3级别和5级别除了桌面相关的进程外没有什么区别。为了减少资源占用，推荐都用3级别</p><p>注意 ：linux默认级别为3，不要把initdefault 设置为0 和 6 </p><h1 id="服务操作-1"><a href="#服务操作-1" class="headerlink" title="服务操作"></a>服务操作</h1><p><strong>service</strong> 服务名 start/stop/status/restart</p><p><strong>关闭防火墙</strong> ：service iptables start/stop/status</p><p><strong>服务初执行等级更改</strong>：    chkconfig –level 2345 name  off|on</p><p>​    若不加级别，默认是2345级别</p><p>​    命令：chkconfig name on|off</p><h1 id="进程操作"><a href="#进程操作" class="headerlink" title="进程操作"></a>进程操作</h1><p>查看所有进程：    <strong>ps</strong>  -aux</p><p>​    -a 列出所有</p><p>​       -u 列出用户</p><p>​       -x 详细列出，如cpu、内存等</p><p>​    - e </p><p>​     -f</p><p>命令： <strong>ps</strong>  - ef  |  <strong>grep</strong> ssh</p><p> 查看所有进程里CMD是ssh 的进程信息</p><p>杀死进程： <strong>kill</strong> pid </p><p><strong>-9</strong>：强制杀死</p><p>ps 命令先查出对应程序的PID或PPID ，然后杀死掉进程</p><h1 id="其他常用命令"><a href="#其他常用命令" class="headerlink" title="其他常用命令"></a>其他常用命令</h1><p>wget用法:wget [option] 网址  -O  指定下载保存的路径</p><p><strong>tar</strong> </p><p>​       -z    gzip进行解压或压缩，带.gz需要加，压缩出来.gz也需要加</p><p>​       -x    解压</p><p>​       -c    压缩</p><p>​       -f    目标文件，压缩文件新命名或解压文件名</p><p>​       -v   解压缩过程信息打印</p><p><strong>解压命令</strong>：tar  -zvxf  xxxx.tar.gz</p><p><strong>压缩命令</strong>：tar -zcf 压缩包命名 压缩目标</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Linux目录结构&quot;&gt;&lt;a href=&quot;#Linux目录结构&quot; class=&quot;headerlink&quot; title=&quot;Linux目录结构&quot;&gt;&lt;/a&gt;Linux目录结构&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://pg0l2q23d.bkt.clouddn.com
      
    
    </summary>
    
      <category term="Linux" scheme="http://www.dlhblog.online/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>JDK8-Lambda</title>
    <link href="http://www.dlhblog.online/2018/10/27/JDK8-Lambda/"/>
    <id>http://www.dlhblog.online/2018/10/27/JDK8-Lambda/</id>
    <published>2018-10-27T12:42:25.000Z</published>
    <updated>2018-10-27T13:02:32.029Z</updated>
    
    <content type="html"><![CDATA[<p>​    Lambda 表达式是一个匿名函数， 我们可以把 Lambda 表达式理解为是一段可以传递的代码（将代码像数据一样进行传递）。 可以写出更简洁、 更灵活的代码。 作为一种更紧凑的代码风格， 使得 Java 语言表达能力得到了提升。Java8 中引入了一个新的操作符”-&gt;”该操作符称为箭头操作符或 Lambda 操作符， 箭头操作符将 Lambda表达式拆分为两部分：<br>​    左侧： Lambda 表达式的参数列表。 对应接口中抽象方法的参数列表。<br>​    右侧： Lambda 表达式中所需要执行的功能， 即 Lambda 体。 对应接口中抽象方法的实现 。</p><h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><h2 id="无参数无返回值"><a href="#无参数无返回值" class="headerlink" title="无参数无返回值"></a>无参数无返回值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 以前的写法</span></span><br><span class="line">    Runnable r1 = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"线程1在奔跑"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    r1.run();</span><br><span class="line">    System.out.println(<span class="string">"-----------------"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参数，无返回值// 括号相当于new Runnable()；-&gt; 相当于run方法；后面是方法体</span></span><br><span class="line">    Runnable r2 = () -&gt; System.out.println(<span class="string">"线程2在奔跑"</span>);</span><br><span class="line">    r2.run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的lambda表达式中，括号相当于new Runnable()；-&gt; 相当于run方法；后面是方法体</p><h2 id="有一个参数，无返回值"><a href="#有一个参数，无返回值" class="headerlink" title="有一个参数，无返回值"></a>有一个参数，无返回值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 有一个参数，无返回值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Consumer&lt;String&gt; consumer = (s) -&gt; System.out.println(s);</span><br><span class="line">    consumer.accept(<span class="string">"hello"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 只有一个参数时，括号可以不写，方法体中只有一行语句时，花括号可以不写</span></span><br><span class="line">Consumer&lt;String&gt; consumer = s -&gt; System.out.println(s);</span><br></pre></td></tr></table></figure><h2 id="有两个参数，方法体中有多条语句"><a href="#有两个参数，方法体中有多条语句" class="headerlink" title="有两个参数，方法体中有多条语句"></a>有两个参数，方法体中有多条语句</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 有两个参数，方法体中有多条语句</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Comparator&lt;Integer&gt; comparator = (x, y) -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">        <span class="keyword">return</span> Integer.compare(x, y);</span><br><span class="line">    &#125;;</span><br><span class="line">    System.out.println(comparator.compare(<span class="number">4</span>, <span class="number">3</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Lambda表达式需要“函数式接口”的支持"><a href="#Lambda表达式需要“函数式接口”的支持" class="headerlink" title="Lambda表达式需要“函数式接口”的支持"></a>Lambda表达式需要“函数式接口”的支持</h1><p>​    接口中只有一个抽象方法的接口，称为函数式接口，其中静态方法和默认方法不算。</p><p>​    内置的函数式接口都有注解<code>@FunctionalInterface</code>修饰，可以使用该注解检查是否是函数式接口。</p><h2 id="自定义函数式接口"><a href="#自定义函数式接口" class="headerlink" title="自定义函数式接口"></a>自定义函数式接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义函数式接口</span></span><br><span class="line"><span class="comment"> * （只有一个抽象方法的接口，可以使用注解<span class="doctag">@FunctionalInterface</span>修饰检查）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test05</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用lamad表达式之前的形式</span></span><br><span class="line">    Integer res = operation(<span class="number">200</span>, <span class="keyword">new</span> MyFunction&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">getValue</span><span class="params">(Integer o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> o * o;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    System.out.println(res);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用lamad表达式之后的形式</span></span><br><span class="line">    Integer result = operation(<span class="number">100</span>, x -&gt; x * x);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Integer <span class="title">operation</span><span class="params">(Integer num, MyFunction&lt;Integer&gt; mf)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mf.getValue(num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyFunction</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getValue</span><span class="params">(T o)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四大内置核心函数式接口"><a href="#四大内置核心函数式接口" class="headerlink" title="四大内置核心函数式接口"></a>四大内置核心函数式接口</h1><p>消费性接口：需要给它一个参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Consumer&lt;T&gt;消费型接口</span></span><br><span class="line"><span class="comment"> * void accept(T t);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test06</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Consumer&lt;Integer&gt; consumer = <span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">            System.out.println(integer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    consumer.accept(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    Consumer&lt;Integer&gt; consumer1 = (x) -&gt; System.out.println(x &lt; <span class="number">2</span>);</span><br><span class="line">    consumer1.accept(<span class="number">6</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>供给型接口：自己给你数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Supplier&lt;T&gt;供给型接口</span></span><br><span class="line"><span class="comment"> * T get();</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test07</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Supplier&lt;Integer&gt; supplier = <span class="keyword">new</span> Supplier&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">int</span>) (Math.random() * <span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    System.out.println(supplier.get());</span><br><span class="line"></span><br><span class="line">    Supplier&lt;Double&gt; sup = () -&gt; (Double) (Math.random() * <span class="number">100</span>);</span><br><span class="line">    System.out.println(sup.get());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 向集合中添加十个随机数并遍历</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test08</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Supplier&lt;Integer&gt; supplier = () -&gt; (<span class="keyword">int</span>) (Math.random() * <span class="number">10</span>);</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            list.add(supplier.get());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Integer integer : list)&#123;</span><br><span class="line">            System.out.print(integer+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>函数型接口：给它一个数据，返回一个数据，泛型中的类型要和传入返回的类型一致</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Function&lt;T,R&gt;函数型接口</span></span><br><span class="line"><span class="comment"> *      R apply(T t);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test09</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String str = <span class="string">"123456"</span>;</span><br><span class="line">    Function&lt;String,Integer&gt; function = (s) -&gt; Integer.valueOf(s);</span><br><span class="line">    System.out.println(function.apply(str));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>断言型接口：和其他断言一样，返回判断结果boolean类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Predicate&lt;T&gt;断言型接口</span></span><br><span class="line"><span class="comment"> *      boolean test(T t)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test10</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Predicate&lt;String&gt; predicate = (s)-&gt; s.contains(<span class="string">"a"</span>);</span><br><span class="line">    System.out.println(predicate.test(<span class="string">"test"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    Lambda 表达式是一个匿名函数， 我们可以把 Lambda 表达式理解为是一段可以传递的代码（将代码像数据一样进行传递）。 可以写出更简洁、 更灵活的代码。 作为一种更紧凑的代码风格， 使得 Java 语言表达能力得到了提升。Java8 中引入了一个新的操作符
      
    
    </summary>
    
      <category term="java" scheme="http://www.dlhblog.online/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring-Data-Redis操作redis服务器</title>
    <link href="http://www.dlhblog.online/2018/10/27/Spring-Data-Redis%E6%93%8D%E4%BD%9Credis%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://www.dlhblog.online/2018/10/27/Spring-Data-Redis操作redis服务器/</id>
    <published>2018-10-27T08:15:44.000Z</published>
    <updated>2018-10-27T08:22:32.469Z</updated>
    
    <content type="html"><![CDATA[<p>进行spring操作前，需要将redis配置中的所有127.0.0.1改为本机ip</p><h1 id="加入坐标依赖"><a href="#加入坐标依赖" class="headerlink" title="加入坐标依赖"></a>加入坐标依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="添加application-xml配置文件"><a href="#添加application-xml配置文件" class="headerlink" title="添加application.xml配置文件"></a>添加application.xml配置文件</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 连接池配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisPoolConfig"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"redis.clients.jedis.JedisPoolConfig"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 最大连接数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxTotal"</span> <span class="attr">value</span>=<span class="string">"1024"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 最大 空闲连接数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"200"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 获取连接时最大等待毫秒数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWaitMillis"</span> <span class="attr">value</span>=<span class="string">"10000"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在获取连接时检查有效性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnBorrow"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 客户端连接工厂 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisConnFactory"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.connection.jedis.JedisConnectionFactory"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">p:use-pool</span>=<span class="string">"true"</span> <span class="attr">p:host-name</span>=<span class="string">"192.168.1.38"</span> <span class="attr">p:port</span>=<span class="string">"6380"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">p:password</span>=<span class="string">"123456"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 连接池引用 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"poolConfig"</span> <span class="attr">ref</span>=<span class="string">"jedisPoolConfig"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- redisTemplate 配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"redisTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.core.RedisTemplate"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">p:connection-factory-ref</span>=<span class="string">"jedisConnFactory"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置序列化操作 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"keySerializer"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.serializer.StringRedisSerializer"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"valueSerializer"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.serializer.StringRedisSerializer"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSpringDataRedis</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    RedisTemplate&lt;String,Object&gt; redisTemplate;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ValueOperations valueOperations = redisTemplate.opsForValue();</span><br><span class="line">        valueOperations.set(<span class="string">"redis02"</span>, <span class="string">"hello redis"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">// 过期秒数实现</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        BoundValueOperations&lt;String, Object&gt; Operations = redisTemplate.boundValueOps(<span class="string">"18236741290:12 3456"</span>);</span><br><span class="line">        Operations.append(<span class="string">"123456"</span>);</span><br><span class="line">        System.out.println(<span class="string">"验证码:"</span> + Operations.get());</span><br><span class="line">        <span class="comment">// 设置过期时间 60 秒后过期</span></span><br><span class="line">        Operations.expire(<span class="number">60</span>, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Spring环境下读写分离配置"><a href="#Spring环境下读写分离配置" class="headerlink" title="Spring环境下读写分离配置"></a>Spring环境下读写分离配置</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 连接池配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisPoolConfig"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"redis.clients.jedis.JedisPoolConfig"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 最大连接数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxTotal"</span> <span class="attr">value</span>=<span class="string">"1024"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 最大 空闲连接数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"200"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 获取连接时最大等待毫秒数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWaitMillis"</span> <span class="attr">value</span>=<span class="string">"10000"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在获取连接时检查有效性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnBorrow"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"redisSentinelConfiguration"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.connection.RedisSentinelConfiguration"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"master"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.connection.RedisNode"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"mymaster"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sentinels"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.connection.RedisNode"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"192.168.1.38"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"6380"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.connection.RedisNode"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"192.168.1.38"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"6379"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 客户端连接工厂 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisConnFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.connection.jedis.JedisConnectionFactory"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 连接池引用 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"poolConfig"</span> <span class="attr">ref</span>=<span class="string">"jedisPoolConfig"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"sentinelConfig"</span> <span class="attr">ref</span>=<span class="string">"redisSentinelConfiguration"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- redisTemplate 配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"redisTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.core.RedisTemplate"</span> <span class="attr">p:connection-factory-ref</span>=<span class="string">"jedisConnFactory"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置序列化操作 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"keySerializer"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.serializer.StringRedisSerializer"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"valueSerializer"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashKeySerializer"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.serializer.StringRedisSerializer"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashValueSerializer"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"redisUtils"</span> <span class="attr">class</span>=<span class="string">"com.shsxt.utils.RedisUtils"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"redisTemplate"</span> <span class="attr">ref</span>=<span class="string">"redisTemplate"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;进行spring操作前，需要将redis配置中的所有127.0.0.1改为本机ip&lt;/p&gt;
&lt;h1 id=&quot;加入坐标依赖&quot;&gt;&lt;a href=&quot;#加入坐标依赖&quot; class=&quot;headerlink&quot; title=&quot;加入坐标依赖&quot;&gt;&lt;/a&gt;加入坐标依赖&lt;/h1&gt;&lt;figure 
      
    
    </summary>
    
      <category term="redis" scheme="http://www.dlhblog.online/categories/redis/"/>
    
    
  </entry>
  
  <entry>
    <title>Redis-JAVA客户端</title>
    <link href="http://www.dlhblog.online/2018/10/27/Redis%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    <id>http://www.dlhblog.online/2018/10/27/Redis客户端/</id>
    <published>2018-10-27T08:06:06.000Z</published>
    <updated>2018-11-05T03:30:44.704Z</updated>
    
    <content type="html"><![CDATA[<p>​    在前面我们添加的服务器访问密码和bind的设置就是为了连接客户端准备的。</p><h1 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="通过junit简单测试"><a href="#通过junit简单测试" class="headerlink" title="通过junit简单测试"></a>通过junit简单测试</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建redis客户端连接对象</span></span><br><span class="line">    Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"192.168.1.38"</span>, <span class="number">6380</span>);</span><br><span class="line">    <span class="comment">// 设置认证密码</span></span><br><span class="line">    jedis.auth(<span class="string">"123456"</span>);</span><br><span class="line">    <span class="comment">// 批量添加string类型数据</span></span><br><span class="line">    jedis.mset(<span class="string">"name"</span>, <span class="string">"zs"</span>, <span class="string">"age"</span>, <span class="string">"20"</span>, <span class="string">"address"</span>, <span class="string">"shanghai"</span>);</span><br><span class="line">    <span class="comment">// 获取缓存数据并输出</span></span><br><span class="line">    System.out.println(jedis.get(<span class="string">"name"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="通过redis连接池获取连接对象并操作服务器"><a href="#通过redis连接池获取连接对象并操作服务器" class="headerlink" title="通过redis连接池获取连接对象并操作服务器"></a>通过redis连接池获取连接对象并操作服务器</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 初始化redis客户端连接池</span></span><br><span class="line">    JedisPool jedisPool = <span class="keyword">new</span> JedisPool(<span class="keyword">new</span> JedisPoolConfig(), <span class="string">"192.168.1.38"</span>, <span class="number">6380</span>, <span class="number">10000</span>, <span class="string">"123456"</span>);</span><br><span class="line">    <span class="comment">// 从连接池获取连接</span></span><br><span class="line">    Jedis jedis = jedisPool.getResource();</span><br><span class="line">    jedis.set(<span class="string">"name"</span>,<span class="string">"ls"</span>);</span><br><span class="line">    System.out.println(jedis.get(<span class="string">"name"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="封装RedisUtil对外提供连接对象获取方法"><a href="#封装RedisUtil对外提供连接对象获取方法" class="headerlink" title="封装RedisUtil对外提供连接对象获取方法"></a>封装RedisUtil对外提供连接对象获取方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// redis服务器ip</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String IP = <span class="string">"192.168.1.38"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// redis端口号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> PORT = <span class="number">6380</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// redis服务器访问密码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String AUTH = <span class="string">"123456"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可用连接实例的最大数目，默认值为8</span></span><br><span class="line"><span class="comment">     * 如果赋值为-1，则表示不限制；如果pool已经分配了maxActive个jedis实例，</span></span><br><span class="line"><span class="comment">     * 则此时pool的状态为exhausted(耗尽)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> MAX_ACTIVE = <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 控制一个pool最多有多少个状态为idle(空闲)的jedis实例，默认值为8</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> MAX_IDLE = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 等待可用连接的最大时间，单位毫秒，默认值为-1（永不超时）,如果超过等待时间</span></span><br><span class="line"><span class="comment">     * 则直接抛出JedisConnectionException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> MAX_WAIT = <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> TIMEOUT = <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在borrow一个jedis实例时，是否提前进行validate操作；如果为true，</span></span><br><span class="line"><span class="comment">     * 则得到的jedis实例均是可用的</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> TEST_ON_BORROW = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JedisPool jedisPool = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化redis连接池</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        JedisPoolConfig config = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">        config.setMaxTotal(MAX_ACTIVE);</span><br><span class="line">        config.setMaxIdle(MAX_IDLE);</span><br><span class="line">        config.setMaxWaitMillis(MAX_WAIT);</span><br><span class="line">        config.setTestOnBorrow(TEST_ON_BORROW);</span><br><span class="line">        jedisPool = <span class="keyword">new</span> JedisPool(config, IP, PORT, TIMEOUT, AUTH);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisUtils</span><span class="params">(RedisTemplate redisTemplate)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Jedis实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> Jedis <span class="title">getJedis</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != jedisPool) &#123;</span><br><span class="line">            Jedis resource = jedisPool.getResource();</span><br><span class="line">            <span class="keyword">return</span> resource;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放jedis资源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">returnResource</span><span class="params">(<span class="keyword">final</span> Jedis jedis)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != jedis)</span><br><span class="line">            jedisPool.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Jedis客户端操作redis服务器"><a href="#Jedis客户端操作redis服务器" class="headerlink" title="Jedis客户端操作redis服务器"></a>Jedis客户端操作redis服务器</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJeditPool</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Jedis jedis;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        jedis = RedisUtils.getJedis();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * string操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        jedis.set(<span class="string">"one"</span>, <span class="string">"hello"</span>);</span><br><span class="line">        jedis.append(<span class="string">"one"</span>, <span class="string">"world"</span>);</span><br><span class="line">        System.out.println(jedis.get(<span class="string">"one"</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"---------------"</span>);</span><br><span class="line">        jedis.mset(<span class="string">"name"</span>, <span class="string">"zs"</span>, <span class="string">"age"</span>, <span class="string">"20"</span>, <span class="string">"id"</span>, <span class="string">"123456"</span>);</span><br><span class="line">        List&lt;String&gt; list = jedis.mget(<span class="string">"name"</span>, <span class="string">"age"</span>, <span class="string">"id"</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != list &amp;&amp; list.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String str : list) System.out.println(str + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"---------------"</span>);</span><br><span class="line">        jedis.incr(<span class="string">"age"</span>);</span><br><span class="line">        System.out.println(jedis.get(<span class="string">"age"</span>));</span><br><span class="line">        jedis.incrBy(<span class="string">"age"</span>, <span class="number">10</span>);</span><br><span class="line">        System.out.println(jedis.get(<span class="string">"age"</span>));</span><br><span class="line"></span><br><span class="line">        RedisUtils.returnResource(jedis);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"id"</span>, <span class="string">"1"</span>);</span><br><span class="line">        map.put(<span class="string">"name"</span>, <span class="string">"zs"</span>);</span><br><span class="line">        map.put(<span class="string">"age"</span>, <span class="string">"20"</span>);</span><br><span class="line">        jedis.hmset(<span class="string">"user"</span>, map);</span><br><span class="line"></span><br><span class="line">        System.out.println(jedis.hmget(<span class="string">"user"</span>, <span class="string">"id"</span>, <span class="string">"name"</span>, <span class="string">"age"</span>));</span><br><span class="line"></span><br><span class="line">        jedis.hdel(<span class="string">"user"</span>, <span class="string">"age"</span>);</span><br><span class="line">        System.out.println(jedis.hexists(<span class="string">"user"</span>, <span class="string">"age"</span>));</span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; keys = jedis.hkeys(<span class="string">"user"</span>);</span><br><span class="line">        <span class="keyword">for</span> (String str : keys)</span><br><span class="line">            System.out.println(str + <span class="string">"-"</span> + jedis.hget(<span class="string">"user"</span>, str));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * list操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        jedis.lpush(<span class="string">"test"</span>, <span class="string">"h1"</span>);</span><br><span class="line">        jedis.lpush(<span class="string">"test"</span>, <span class="string">"h2"</span>);</span><br><span class="line">        jedis.lpush(<span class="string">"test"</span>, <span class="string">"h3"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(jedis.lrange(<span class="string">"test"</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(jedis.lpop(<span class="string">"test"</span>));</span><br><span class="line">        System.out.println(jedis.lrange(<span class="string">"test"</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        jedis.lrem(<span class="string">"test"</span>, <span class="number">0</span>, <span class="string">"h1"</span>);</span><br><span class="line">        jedis.lrem(<span class="string">"test"</span>, <span class="number">1</span>, <span class="string">"h2"</span>);</span><br><span class="line">        jedis.lrem(<span class="string">"test"</span>, <span class="number">2</span>, <span class="string">"h3"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * set操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        jedis.sadd(<span class="string">"users"</span>, <span class="string">"zs"</span>);</span><br><span class="line">        jedis.sadd(<span class="string">"users"</span>, <span class="string">"ls"</span>);</span><br><span class="line">        jedis.sadd(<span class="string">"users"</span>, <span class="string">"ww"</span>);</span><br><span class="line">        System.out.println(jedis.smembers(<span class="string">"users"</span>));</span><br><span class="line">        System.out.println(jedis.sismember(<span class="string">"users"</span>, <span class="string">"zss"</span>));</span><br><span class="line">        System.out.println(jedis.srandmember(<span class="string">"users"</span>));</span><br><span class="line">        System.out.println(jedis.spop(<span class="string">"users"</span>));</span><br><span class="line">        System.out.println(jedis.scard(<span class="string">"users"</span>));</span><br><span class="line">        RedisUtils.returnResource(jedis);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * sort set</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test05</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        jedis.zadd(<span class="string">"stu"</span>, <span class="number">100</span>, <span class="string">"zs"</span>);</span><br><span class="line">        jedis.zadd(<span class="string">"stu"</span>, <span class="number">30</span>, <span class="string">"ls"</span>);</span><br><span class="line">        jedis.zadd(<span class="string">"stu"</span>, <span class="number">60</span>, <span class="string">"ww"</span>);</span><br><span class="line">        System.out.println(jedis.zrange(<span class="string">"stu"</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">        System.out.println(jedis.zrevrange(<span class="string">"stu"</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">        System.out.println(jedis.zrangeByScore(<span class="string">"stu"</span>, <span class="number">50</span>, <span class="number">60</span>));</span><br><span class="line">        RedisUtils.returnResource(jedis);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    在前面我们添加的服务器访问密码和bind的设置就是为了连接客户端准备的。&lt;/p&gt;
&lt;h1 id=&quot;添加依赖&quot;&gt;&lt;a href=&quot;#添加依赖&quot; class=&quot;headerlink&quot; title=&quot;添加依赖&quot;&gt;&lt;/a&gt;添加依赖&lt;/h1&gt;&lt;figure class=&quot;h
      
    
    </summary>
    
      <category term="redis" scheme="http://www.dlhblog.online/categories/redis/"/>
    
    
  </entry>
  
</feed>
